# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.

# source://railties//lib/rails/initializable.rb#5
module Rails
  extend ::ActiveSupport::Autoload

  class << self
    # source://railties//lib/rails.rb#38
    def app_class; end

    # source://railties//lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties//lib/rails.rb#39
    def application; end

    # source://railties//lib/rails.rb#37
    def application=(_arg0); end

    # source://railties//lib/rails.rb#112
    def autoloaders; end

    # source://railties//lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties//lib/rails.rb#38
    def cache; end

    # source://railties//lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties//lib/rails.rb#46
    def configuration; end

    # source://railties//lib/rails.rb#72
    def env; end

    # source://railties//lib/rails.rb#79
    def env=(environment); end

    # source://railties//lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties//lib/rails.rb#92
    def groups(*groups); end

    # source://railties//lib/rails.rb#43
    def initialize!(*_arg0, &_arg1); end

    # source://railties//lib/rails.rb#43
    def initialized?(*_arg0, &_arg1); end

    # source://railties//lib/rails.rb#38
    def logger; end

    # source://railties//lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties//lib/rails.rb#108
    def public_path; end

    # source://railties//lib/rails.rb#63
    def root; end

    # source://railties//lib/rails/version.rb#7
    def version; end
  end
end

# source://railties//lib/rails/application.rb#83
class Rails::Application < ::Rails::Engine
  # source://railties//lib/rails/application.rb#128
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://railties//lib/rails/application.rb#119
  def assets; end

  # source://railties//lib/rails/application.rb#119
  def assets=(_arg0); end

  # source://railties//lib/rails/engine.rb#520
  def build_middleware_stack; end

  # source://railties//lib/rails/application.rb#402
  def config; end

  # source://railties//lib/rails/application.rb#406
  def config=(_arg0); end

  # source://railties//lib/rails/application.rb#241
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#322
  def console(&blk); end

  # source://railties//lib/rails/application.rb#450
  def credentials; end

  # source://railties//lib/rails/application.rb#422
  def credentials=(_arg0); end

  # source://railties//lib/rails/application.rb#123
  def default_url_options(*_arg0, &_arg1); end

  # source://railties//lib/rails/application.rb#123
  def default_url_options=(arg); end

  # source://railties//lib/rails/application.rb#515
  def eager_load!; end

  # source://railties//lib/rails/application.rb#481
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#268
  def env_config; end

  # source://railties//lib/rails/application.rb#121
  def executor; end

  # source://railties//lib/rails/application.rb#328
  def generators(&blk); end

  # source://railties//lib/rails/application.rb#494
  def helpers_paths; end

  # source://railties//lib/rails/application.rb#389
  def initialize!(group = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#149
  def initialized?; end

  # source://railties//lib/rails/application.rb#310
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties//lib/rails/application.rb#396
  def initializers; end

  # source://railties//lib/rails/application.rb#339
  def isolate_namespace(mod); end

  # source://railties//lib/rails/application.rb#173
  def key_generator; end

  # source://railties//lib/rails/application.rb#199
  def message_verifier(verifier_name); end

  # source://railties//lib/rails/application.rb#510
  def migration_railties; end

  # source://railties//lib/rails/application.rb#303
  def rake_tasks(&block); end

  # source://railties//lib/rails/application.rb#168
  def reload_routes!; end

  # source://railties//lib/rails/application.rb#121
  def reloader; end

  # source://railties//lib/rails/application.rb#121
  def reloaders; end

  # source://railties//lib/rails/application.rb#365
  def require_environment!; end

  # source://railties//lib/rails/application.rb#370
  def routes_reloader; end

  # source://railties//lib/rails/application.rb#153
  def run_load_hooks!; end

  # source://railties//lib/rails/application.rb#316
  def runner(&blk); end

  # source://railties//lib/rails/application.rb#119
  def sandbox; end

  # source://railties//lib/rails/application.rb#119
  def sandbox=(_arg0); end

  # source://railties//lib/rails/application.rb#119
  def sandbox?; end

  # source://railties//lib/rails/application.rb#433
  def secret_key_base; end

  # source://railties//lib/rails/application.rb#408
  def secrets; end

  # source://railties//lib/rails/application.rb#422
  def secrets=(_arg0); end

  # source://railties//lib/rails/application.rb#334
  def server(&blk); end

  # source://railties//lib/rails/application.rb#490
  def to_app; end

  # source://railties//lib/rails/application.rb#377
  def watchable_args; end

  protected

  # source://railties//lib/rails/application.rb#592
  def default_middleware_stack; end

  # source://railties//lib/rails/application.rb#558
  def ordered_railties; end

  # source://railties//lib/rails/application.rb#580
  def railties_initializers(current); end

  # source://railties//lib/rails/application.rb#547
  def run_console_blocks(app); end

  # source://railties//lib/rails/application.rb#537
  def run_generators_blocks(app); end

  # source://railties//lib/rails/application.rb#542
  def run_runner_blocks(app); end

  # source://railties//lib/rails/application.rb#552
  def run_server_blocks(app); end

  # source://railties//lib/rails/application.rb#526
  def run_tasks_blocks(app); end

  # source://railties//lib/rails/application.rb#597
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties//lib/rails/application.rb#631
  def build_middleware; end

  # source://railties//lib/rails/application.rb#624
  def build_request(env); end

  # source://railties//lib/rails/application.rb#635
  def coerce_same_site_protection(protection); end

  # source://railties//lib/rails/application.rb#608
  def generate_development_secret; end

  class << self
    # source://railties//lib/rails/application.rb#358
    def add_lib_to_load_path!(root); end

    # source://railties//lib/rails/application.rb#103
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties//lib/rails/application.rb#107
    def find_root(from); end

    # source://railties//lib/rails/application.rb#92
    def inherited(base); end

    # source://railties//lib/rails/application.rb#99
    def instance; end
  end
end

# source://railties//lib/rails/application/bootstrap.rb#11
module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/configuration.rb#13
class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # source://railties//lib/rails/application/configuration.rb#29
  def initialize(*_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path; end

  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency; end

  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#342
  def annotations; end

  # source://railties//lib/rails/application/configuration.rb#27
  def api_only; end

  # source://railties//lib/rails/application/configuration.rb#223
  def api_only=(value); end

  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host; end

  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log; end

  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#27
  def autoloader; end

  # source://railties//lib/rails/application/configuration.rb#362
  def autoloader=(autoloader); end

  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week; end

  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes; end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store; end

  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#302
  def colorize_logging; end

  # source://railties//lib/rails/application/configuration.rb#306
  def colorize_logging=(val); end

  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local; end

  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def console; end

  # source://railties//lib/rails/application/configuration.rb#14
  def console=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#346
  def content_security_policy(&block); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only; end

  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def credentials; end

  # source://railties//lib/rails/application/configuration.rb#14
  def credentials=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#277
  def database_configuration; end

  # source://railties//lib/rails/application/configuration.rb#230
  def debug_exception_response_format; end

  # source://railties//lib/rails/application/configuration.rb#234
  def debug_exception_response_format=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#374
  def default_log_file; end

  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox; end

  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load; end

  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def enable_dependency_loading; end

  # source://railties//lib/rails/application/configuration.rb#14
  def enable_dependency_loading=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#27
  def encoding; end

  # source://railties//lib/rails/application/configuration.rb#215
  def encoding=(value); end

  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app; end

  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher; end

  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters; end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect; end

  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl; end

  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths; end

  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization; end

  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def hosts; end

  # source://railties//lib/rails/application/configuration.rb#14
  def hosts=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#259
  def load_database_yaml; end

  # source://railties//lib/rails/application/configuration.rb#85
  def load_defaults(target_version); end

  # source://railties//lib/rails/application/configuration.rb#27
  def loaded_config_version; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_level; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_level=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags; end

  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def logger; end

  # source://railties//lib/rails/application/configuration.rb#14
  def logger=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#236
  def paths; end

  # source://railties//lib/rails/application/configuration.rb#354
  def permissions_policy(&block); end

  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server; end

  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order; end

  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load; end

  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets; end

  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root; end

  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change; end

  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key; end

  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base; end

  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def session_options; end

  # source://railties//lib/rails/application/configuration.rb#14
  def session_options=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#311
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # source://railties//lib/rails/application/configuration.rb#338
  def session_store?; end

  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options; end

  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone; end

  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#14
  def x; end

  # source://railties//lib/rails/application/configuration.rb#14
  def x=(_arg0); end

  private

  # source://railties//lib/rails/application/configuration.rb#423
  def credentials_available_for_current_env?; end

  # source://railties//lib/rails/application/configuration.rb#407
  def default_credentials_content_path; end

  # source://railties//lib/rails/application/configuration.rb#415
  def default_credentials_key_path; end
end

# source://railties//lib/rails/application/configuration.rb#386
class Rails::Application::Configuration::Custom
  # source://railties//lib/rails/application/configuration.rb#387
  def initialize; end

  # source://railties//lib/rails/application/configuration.rb#391
  def method_missing(method, *args); end

  private

  # source://railties//lib/rails/application/configuration.rb#401
  def respond_to_missing?(symbol, *_arg1); end
end

# source://railties//lib/rails/application/default_middleware_stack.rb#5
class Rails::Application::DefaultMiddlewareStack
  # source://railties//lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties//lib/rails/application/default_middleware_stack.rb#84
  def load_rack_cache; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#106
  def show_exceptions_app; end
end

# source://railties//lib/rails/application/finisher.rb#8
module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/finisher.rb#157
module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties//lib/rails/application/finisher.rb#162
    def complete(_state); end

    # source://railties//lib/rails/application/finisher.rb#158
    def run; end
  end
end

# source://railties//lib/rails/application/finisher.rb#143
class Rails::Application::Finisher::MutexHook
  # source://railties//lib/rails/application/finisher.rb#144
  def initialize(mutex = T.unsafe(nil)); end

  # source://railties//lib/rails/application/finisher.rb#152
  def complete(_state); end

  # source://railties//lib/rails/application/finisher.rb#148
  def run; end
end

# source://railties//lib/rails/application.rb#125
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/application/routes_reloader.rb#7
class Rails::Application::RoutesReloader
  # source://railties//lib/rails/application/routes_reloader.rb#12
  def initialize; end

  # source://railties//lib/rails/application/routes_reloader.rb#9
  def eager_load; end

  # source://railties//lib/rails/application/routes_reloader.rb#9
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def execute(*_arg0, &_arg1); end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def execute_if_updated(*_arg0, &_arg1); end

  # source://railties//lib/rails/application/routes_reloader.rb#8
  def external_routes; end

  # source://railties//lib/rails/application/routes_reloader.rb#8
  def paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#19
  def reload!; end

  # source://railties//lib/rails/application/routes_reloader.rb#8
  def route_sets; end

  # source://railties//lib/rails/application/routes_reloader.rb#10
  def updated?(*_arg0, &_arg1); end

  private

  # source://railties//lib/rails/application/routes_reloader.rb#39
  def clear!; end

  # source://railties//lib/rails/application/routes_reloader.rb#50
  def finalize!; end

  # source://railties//lib/rails/application/routes_reloader.rb#46
  def load_paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#54
  def revert; end

  # source://railties//lib/rails/application/routes_reloader.rb#29
  def updater; end
end

# source://railties//lib/rails/application_controller.rb#3
class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/6.1.7.3/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # source://railties//lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties//lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/6.1.7.3/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

# source://railties//lib/rails/autoloaders.rb#6
module Rails::Autoloaders
  extend ::Enumerable

  class << self
    # source://railties//lib/rails/autoloaders.rb#28
    def each; end

    # source://railties//lib/rails/autoloaders.rb#39
    def log!; end

    # source://railties//lib/rails/autoloaders.rb#35
    def logger=(logger); end

    # source://railties//lib/rails/autoloaders.rb#10
    def main; end

    # source://railties//lib/rails/autoloaders.rb#19
    def once; end

    # source://railties//lib/rails/autoloaders.rb#43
    def zeitwerk_enabled?; end
  end
end

# source://railties//lib/rails/command.rb#10
module Rails::Command
  include ::Rails::Command::Behavior
  extend ::ActiveSupport::Autoload
  extend ::Rails::Command::Behavior::ClassMethods

  class << self
    # source://railties//lib/rails/command.rb#26
    def environment; end

    # source://railties//lib/rails/command.rb#69
    def find_by_namespace(namespace, command_name = T.unsafe(nil)); end

    # source://railties//lib/rails/command.rb#22
    def hidden_commands; end

    # source://railties//lib/rails/command.rb#31
    def invoke(full_namespace, args = T.unsafe(nil), **config); end

    # source://railties//lib/rails/command.rb#89
    def print_commands; end

    # source://railties//lib/rails/command.rb#81
    def root; end

    private

    # source://railties//lib/rails/command.rb#105
    def command_type; end

    # source://railties//lib/rails/command.rb#97
    def commands; end

    # source://railties//lib/rails/command.rb#113
    def file_lookup_paths; end

    # source://railties//lib/rails/command.rb#109
    def lookup_paths; end
  end
end

# source://railties//lib/rails/command/actions.rb#5
module Rails::Command::Actions
  # source://railties//lib/rails/command/actions.rb#48
  def load_generators; end

  # source://railties//lib/rails/command/actions.rb#44
  def load_tasks; end

  # source://railties//lib/rails/command/actions.rb#18
  def require_application!; end

  # source://railties//lib/rails/command/actions.rb#13
  def require_application_and_environment!; end

  # source://railties//lib/rails/command/actions.rb#26
  def require_environment!; end

  # source://railties//lib/rails/command/actions.rb#9
  def set_application_directory!; end
end

# source://railties//lib/rails/command/base.rb#13
class Rails::Command::Base < ::Thor
  include ::Rails::Command::Actions

  # source://railties//lib/rails/command/base.rb#160
  def help; end

  class << self
    # source://railties//lib/rails/command/base.rb#81
    def banner(*_arg0); end

    # source://railties//lib/rails/command/base.rb#88
    def base_name; end

    # source://railties//lib/rails/command/base.rb#99
    def command_name; end

    # source://railties//lib/rails/command/base.rb#121
    def default_command_root; end

    # source://railties//lib/rails/command/base.rb#31
    def desc(usage = T.unsafe(nil), description = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#25
    def engine?; end

    # source://railties//lib/rails/command/base.rb#76
    def executable; end

    # source://railties//lib/rails/command/base.rb#20
    def exit_on_failure?; end

    # source://railties//lib/rails/command/base.rb#52
    def hide_command!; end

    # source://railties//lib/rails/command/base.rb#56
    def inherited(base); end

    # source://railties//lib/rails/command/base.rb#42
    def namespace(name = T.unsafe(nil)); end

    # source://railties//lib/rails/command/base.rb#64
    def perform(command, args, config); end

    # source://railties//lib/rails/command/base.rb#72
    def printing_commands; end

    # source://railties//lib/rails/command/base.rb#109
    def usage_path; end

    private

    # source://railties//lib/rails/command/base.rb#141
    def command_root_namespace; end

    # source://railties//lib/rails/command/base.rb#128
    def create_command(meth); end

    # source://railties//lib/rails/command/base.rb#149
    def namespaced_commands; end

    # source://railties//lib/rails/command/base.rb#145
    def relative_command_path; end
  end
end

# source://railties//lib/rails/command/base.rb#14
class Rails::Command::Base::Error < ::Thor::Error; end

# source://railties//lib/rails/command/behavior.rb#7
module Rails::Command::Behavior
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Command::Behavior::ClassMethods
end

# source://railties//lib/rails/command/behavior.rb#0
module Rails::Command::Behavior::ClassMethods
  # source://railties//lib/rails/command/behavior.rb#12
  def no_color!; end

  # source://railties//lib/rails/command/behavior.rb#17
  def subclasses; end

  private

  # source://railties//lib/rails/command/behavior.rb#36
  def lookup(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#56
  def lookup!; end

  # source://railties//lib/rails/command/behavior.rb#70
  def namespaces_to_paths(namespaces); end

  # source://railties//lib/rails/command/behavior.rb#23
  def print_list(base, namespaces); end
end

# source://railties//lib/rails/command.rb#19
Rails::Command::HELP_MAPPINGS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/command/spellchecker.rb#5
module Rails::Command::Spellchecker
  class << self
    # source://railties//lib/rails/command/spellchecker.rb#7
    def suggest(word, from:); end

    private

    # source://railties//lib/rails/command/spellchecker.rb#20
    def levenshtein_distance(str1, str2); end
  end
end

# source://railties//lib/rails/configuration.rb#9
module Rails::Configuration; end

# source://railties//lib/rails/configuration.rb#109
class Rails::Configuration::Generators
  # source://railties//lib/rails/configuration.rb#113
  def initialize; end

  # source://railties//lib/rails/configuration.rb#135
  def after_generate(&block); end

  # source://railties//lib/rails/configuration.rb#111
  def after_generate_callbacks; end

  # source://railties//lib/rails/configuration.rb#110
  def aliases; end

  # source://railties//lib/rails/configuration.rb#110
  def aliases=(_arg0); end

  # source://railties//lib/rails/configuration.rb#110
  def api_only; end

  # source://railties//lib/rails/configuration.rb#110
  def api_only=(_arg0); end

  # source://railties//lib/rails/configuration.rb#110
  def colorize_logging; end

  # source://railties//lib/rails/configuration.rb#110
  def colorize_logging=(_arg0); end

  # source://railties//lib/rails/configuration.rb#110
  def fallbacks; end

  # source://railties//lib/rails/configuration.rb#110
  def fallbacks=(_arg0); end

  # source://railties//lib/rails/configuration.rb#111
  def hidden_namespaces; end

  # source://railties//lib/rails/configuration.rb#131
  def hide_namespace(namespace); end

  # source://railties//lib/rails/configuration.rb#139
  def method_missing(method, *args); end

  # source://railties//lib/rails/configuration.rb#110
  def options; end

  # source://railties//lib/rails/configuration.rb#110
  def options=(_arg0); end

  # source://railties//lib/rails/configuration.rb#110
  def templates; end

  # source://railties//lib/rails/configuration.rb#110
  def templates=(_arg0); end

  private

  # source://railties//lib/rails/configuration.rb#124
  def initialize_copy(source); end
end

# source://railties//lib/rails/configuration.rb#46
class Rails::Configuration::MiddlewareStackProxy
  # source://railties//lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties//lib/rails/configuration.rb#101
  def +(other); end

  # source://railties//lib/rails/configuration.rb#74
  def delete(*args, &block); end

  # source://railties//lib/rails/configuration.rb#52
  def insert(*args, &block); end

  # source://railties//lib/rails/configuration.rb#59
  def insert_after(*args, &block); end

  # source://railties//lib/rails/configuration.rb#52
  def insert_before(*args, &block); end

  # source://railties//lib/rails/configuration.rb#93
  def merge_into(other); end

  # source://railties//lib/rails/configuration.rb#78
  def move(*args, &block); end

  # source://railties//lib/rails/configuration.rb#84
  def move_after(*args, &block); end

  # source://railties//lib/rails/configuration.rb#78
  def move_before(*args, &block); end

  # source://railties//lib/rails/configuration.rb#64
  def swap(*args, &block); end

  # source://railties//lib/rails/configuration.rb#88
  def unshift(*args, &block); end

  # source://railties//lib/rails/configuration.rb#69
  def use(*args, &block); end

  protected

  # source://railties//lib/rails/configuration.rb#106
  def delete_operations; end

  # source://railties//lib/rails/configuration.rb#106
  def operations; end
end

# source://railties//lib/rails/engine/railties.rb#4
class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # source://railties//lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks?; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _load_seed_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_load_seed_callbacks(&block); end

  # source://railties//lib/rails/engine.rb#520
  def app; end

  # source://railties//lib/rails/engine.rb#537
  def call(env); end

  # source://railties//lib/rails/engine.rb#556
  def config; end

  # source://railties//lib/rails/engine.rb#484
  def eager_load!; end

  # source://railties//lib/rails/engine.rb#532
  def endpoint; end

  # source://railties//lib/rails/engine.rb#430
  def engine_name(*_arg0, &_arg1); end

  # source://railties//lib/rails/engine.rb#543
  def env_config; end

  # source://railties//lib/rails/engine.rb#503
  def helpers; end

  # source://railties//lib/rails/engine.rb#515
  def helpers_paths; end

  # source://railties//lib/rails/engine.rb#430
  def isolated?(*_arg0, &_arg1); end

  # source://railties//lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#564
  def load_seed; end

  # source://railties//lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#429
  def middleware(*_arg0, &_arg1); end

  # source://railties//lib/rails/engine.rb#429
  def paths(*_arg0, &_arg1); end

  # source://railties//lib/rails/engine.rb#498
  def railties; end

  # source://railties//lib/rails/engine.rb#429
  def root(*_arg0, &_arg1); end

  # source://railties//lib/rails/engine.rb#549
  def routes(&block); end

  # source://railties//lib/rails/engine.rb#668
  def routes?; end

  protected

  # source://railties//lib/rails/engine.rb#673
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties//lib/rails/engine.rb#705
  def _all_autoload_once_paths; end

  # source://railties//lib/rails/engine.rb#709
  def _all_autoload_paths; end

  # source://railties//lib/rails/engine.rb#713
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties//lib/rails/engine.rb#729
  def build_middleware; end

  # source://railties//lib/rails/engine.rb#721
  def build_request(env); end

  # source://railties//lib/rails/engine.rb#701
  def default_middleware_stack; end

  # source://railties//lib/rails/engine.rb#685
  def has_migrations?; end

  # source://railties//lib/rails/engine.rb#679
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks?; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _load_seed_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _load_seed_callbacks=(value); end

    # source://railties//lib/rails/engine.rb#353
    def called_from; end

    # source://railties//lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties//lib/rails/engine.rb#358
    def eager_load!(*_arg0, &_arg1); end

    # source://railties//lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/engine.rb#416
    def find(path); end

    # source://railties//lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties//lib/rails/engine.rb#689
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # source://railties//lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties//lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # source://railties//lib/rails/engine.rb#353
    def isolated; end

    # source://railties//lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # source://railties//lib/rails/engine.rb#353
    def isolated?; end
  end
end

# source://railties//lib/rails/engine/configuration.rb#7
class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # source://railties//lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties//lib/rails/engine/configuration.rb#83
  def autoload_once_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#87
  def autoload_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#79
  def eager_load_paths; end

  # source://railties//lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#32
  def generators; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware; end

  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#38
  def paths; end

  # source://railties//lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties//lib/rails/engine/configuration.rb#75
  def root=(value); end
end

# source://railties//lib/rails/engine/railties.rb#5
class Rails::Engine::Railties
  include ::Enumerable

  # source://railties//lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties//lib/rails/engine/railties.rb#18
  def -(others); end

  # source://railties//lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties//lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

# source://railties//lib/rails/generators.rb#17
module Rails::Generators
  include ::Rails::Command::Behavior
  extend ::Rails::Command::Behavior::ClassMethods

  # source://railties//lib/rails/generators.rb#30
  def namespace; end

  # source://railties//lib/rails/generators.rb#30
  def namespace=(val); end

  class << self
    # source://railties//lib/rails/generators.rb#289
    def add_generated_file(file); end

    # source://railties//lib/rails/generators.rb#97
    def after_generate_callbacks; end

    # source://railties//lib/rails/generators.rb#89
    def aliases; end

    # source://railties//lib/rails/generators.rb#121
    def api_only!; end

    # source://railties//lib/rails/generators.rb#73
    def configure!(config); end

    # source://railties//lib/rails/generators.rb#113
    def fallbacks; end

    # source://railties//lib/rails/generators.rb#244
    def find_by_namespace(name, base = T.unsafe(nil), context = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#180
    def help(command = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#140
    def hidden_namespaces; end

    # source://railties//lib/rails/generators.rb#174
    def hide_namespace(*namespaces); end

    # source://railties//lib/rails/generators.rb#174
    def hide_namespaces(*namespaces); end

    # source://railties//lib/rails/generators.rb#271
    def invoke(namespace, args = T.unsafe(nil), config = T.unsafe(nil)); end

    # source://railties//lib/rails/generators.rb#30
    def namespace; end

    # source://railties//lib/rails/generators.rb#30
    def namespace=(val); end

    # source://railties//lib/rails/generators.rb#93
    def options; end

    # source://railties//lib/rails/generators.rb#201
    def print_generators; end

    # source://railties//lib/rails/generators.rb#196
    def public_namespaces; end

    # source://railties//lib/rails/generators.rb#205
    def sorted_groups; end

    # source://railties//lib/rails/generators.rb#85
    def templates_path; end

    private

    # source://railties//lib/rails/generators.rb#316
    def command_type; end

    # source://railties//lib/rails/generators.rb#324
    def file_lookup_paths; end

    # source://railties//lib/rails/generators.rb#301
    def invoke_fallbacks_for(name, base); end

    # source://railties//lib/rails/generators.rb#320
    def lookup_paths; end

    # source://railties//lib/rails/generators.rb#295
    def print_list(base, namespaces); end

    # source://railties//lib/rails/generators.rb#328
    def run_after_generate_callback; end
  end
end

# source://railties//lib/rails/generators/actions.rb#9
module Rails::Generators::Actions
  # source://railties//lib/rails/generators/actions.rb#10
  def initialize(*_arg0); end

  # source://railties//lib/rails/generators/actions.rb#94
  def add_source(source, options = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/actions.rb#120
  def application(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#120
  def environment(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#21
  def gem(*args); end

  # source://railties//lib/rails/generators/actions.rb#54
  def gem_group(*names, &block); end

  # source://railties//lib/rails/generators/actions.rb#226
  def generate(what, *args); end

  # source://railties//lib/rails/generators/actions.rb#142
  def git(commands = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#68
  def github(repo, options = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/actions.rb#215
  def initializer(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#175
  def lib(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#251
  def rails_command(command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#241
  def rake(command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#196
  def rakefile(filename, data = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#285
  def readme(path); end

  # source://railties//lib/rails/generators/actions.rb#269
  def route(routing_code, namespace: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#161
  def vendor(filename, data = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/actions.rb#363
  def append_file_with_newline(path, str, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#304
  def execute_command(executor, command, options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#318
  def extify(name); end

  # source://railties//lib/rails/generators/actions.rb#350
  def indentation; end

  # source://railties//lib/rails/generators/actions.rb#293
  def log(*args); end

  # source://railties//lib/rails/generators/actions.rb#344
  def optimize_indentation(value, amount = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/actions.rb#328
  def quote(value); end

  # source://railties//lib/rails/generators/actions.rb#355
  def with_indentation(&block); end
end

# source://railties//lib/rails/generators/actions/create_migration.rb#9
class Rails::Generators::Actions::CreateMigration < ::Thor::Actions::CreateFile
  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#41
  def exists?; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#18
  def identical?; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#22
  def invoke!; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#10
  def migration_dir; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#14
  def migration_file_name; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#37
  def relative_existing_migration; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#29
  def revoke!; end

  private

  # source://railties//lib/rails/generators/actions/create_migration.rb#50
  def on_conflict_behavior; end

  # source://railties//lib/rails/generators/actions/create_migration.rb#71
  def say_status(status, color, message = T.unsafe(nil)); end
end

# source://railties//lib/rails/generators/active_model.rb#28
class Rails::Generators::ActiveModel
  # source://railties//lib/rails/generators/active_model.rb#31
  def initialize(name); end

  # source://railties//lib/rails/generators/active_model.rb#75
  def destroy; end

  # source://railties//lib/rails/generators/active_model.rb#70
  def errors; end

  # source://railties//lib/rails/generators/active_model.rb#29
  def name; end

  # source://railties//lib/rails/generators/active_model.rb#59
  def save; end

  # source://railties//lib/rails/generators/active_model.rb#64
  def update(params = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/generators/active_model.rb#36
    def all(klass); end

    # source://railties//lib/rails/generators/active_model.rb#50
    def build(klass, params = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/active_model.rb#44
    def find(klass, params = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/generators/app_name.rb#5
module Rails::Generators::AppName
  private

  # source://railties//lib/rails/generators/app_name.rb#33
  def app_const; end

  # source://railties//lib/rails/generators/app_name.rb#28
  def app_const_base; end

  # source://railties//lib/rails/generators/app_name.rb#9
  def app_name; end

  # source://railties//lib/rails/generators/app_name.rb#28
  def camelized; end

  # source://railties//lib/rails/generators/app_name.rb#21
  def defined_app_const_base; end

  # source://railties//lib/rails/generators/app_name.rb#21
  def defined_app_const_base?; end

  # source://railties//lib/rails/generators/app_name.rb#17
  def defined_app_name; end

  # source://railties//lib/rails/generators/app_name.rb#13
  def original_app_name; end

  # source://railties//lib/rails/generators/app_name.rb#37
  def valid_const?; end
end

# source://railties//lib/rails/generators/app_name.rb#6
Rails::Generators::AppName::RESERVED_NAMES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/base.rb#17
class Rails::Generators::Base < ::Thor::Group
  include ::Thor::Actions
  include ::Rails::Generators::Actions
  extend ::Thor::Actions::ClassMethods

  private

  # source://railties//lib/rails/generators/base.rb#256
  def class_collisions(*class_names); end

  # source://railties//lib/rails/generators/base.rb#279
  def extract_last_module(nesting); end

  # source://railties//lib/rails/generators/base.rb#294
  def indent(content, multiplier = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/base.rb#288
  def module_namespacing(&block); end

  # source://railties//lib/rails/generators/base.rb#304
  def namespace; end

  # source://railties//lib/rails/generators/base.rb#312
  def namespace_dirs; end

  # source://railties//lib/rails/generators/base.rb#308
  def namespaced?; end

  # source://railties//lib/rails/generators/base.rb#316
  def namespaced_path; end

  # source://railties//lib/rails/generators/base.rb#299
  def wrap_with_namespace(content); end

  class << self
    # source://railties//lib/rails/generators/base.rb#392
    def add_shebang_option!; end

    # source://railties//lib/rails/generators/base.rb#321
    def banner; end

    # source://railties//lib/rails/generators/base.rb#326
    def base_name; end

    # source://railties//lib/rails/generators/base.rb#228
    def base_root; end

    # source://railties//lib/rails/generators/base.rb#209
    def class_option(name, options = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#353
    def default_aliases_for_option(name, options); end

    # source://railties//lib/rails/generators/base.rb#358
    def default_for_option(config, name, options, default); end

    # source://railties//lib/rails/generators/base.rb#418
    def default_generator_root; end

    # source://railties//lib/rails/generators/base.rb#219
    def default_source_root; end

    # source://railties//lib/rails/generators/base.rb#347
    def default_value_for_option(name, options); end

    # source://railties//lib/rails/generators/base.rb#41
    def desc(description = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#29
    def exit_on_failure?; end

    # source://railties//lib/rails/generators/base.rb#336
    def generator_name; end

    # source://railties//lib/rails/generators/base.rb#61
    def hide!; end

    # source://railties//lib/rails/generators/base.rb#174
    def hook_for(*names, &block); end

    # source://railties//lib/rails/generators/base.rb#371
    def hooks; end

    # source://railties//lib/rails/generators/base.rb#234
    def inherited(base); end

    # source://railties//lib/rails/generators/base.rb#54
    def namespace(name = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#377
    def prepare_for_invocation(name, value); end

    # source://railties//lib/rails/generators/base.rb#200
    def remove_hook_for(*names); end

    # source://railties//lib/rails/generators/base.rb#34
    def source_root(path = T.unsafe(nil)); end

    # source://railties//lib/rails/generators/base.rb#410
    def usage_path; end
  end
end

# source://railties//lib/rails/generators.rb#32
Rails::Generators::DEFAULT_ALIASES = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators.rb#52
Rails::Generators::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://railties//lib/rails/generators/database.rb#5
module Rails::Generators::Database
  # source://railties//lib/rails/generators/database.rb#9
  def initialize(*_arg0); end

  # source://railties//lib/rails/generators/database.rb#29
  def convert_database_option_for_jruby; end

  # source://railties//lib/rails/generators/database.rb#14
  def gem_for_database(database = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/database.rb#42
  def mysql_socket; end
end

# source://railties//lib/rails/generators/database.rb#7
Rails::Generators::Database::DATABASES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/database.rb#6
Rails::Generators::Database::JDBC_DATABASES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/base.rb#14
class Rails::Generators::Error < ::Thor::Error; end

# source://railties//lib/rails/generators/generated_attribute.rb#7
class Rails::Generators::GeneratedAttribute
  # source://railties//lib/rails/generators/generated_attribute.rb#61
  def initialize(name, type = T.unsafe(nil), index_type = T.unsafe(nil), attr_options = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/generated_attribute.rb#163
  def attachment?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#167
  def attachments?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#12
  def attr_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#123
  def column_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#85
  def default; end

  # source://railties//lib/rails/generators/generated_attribute.rb#69
  def field_type; end

  # source://railties//lib/rails/generators/generated_attribute.rb#127
  def foreign_key?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#143
  def has_index?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#147
  def has_uniq_index?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#111
  def human_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#115
  def index_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#13
  def index_name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#179
  def inject_index_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#175
  def inject_options; end

  # source://railties//lib/rails/generators/generated_attribute.rb#11
  def name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#11
  def name=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#183
  def options_for_migration; end

  # source://railties//lib/rails/generators/generated_attribute.rb#151
  def password_digest?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#103
  def plural_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#135
  def polymorphic?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#131
  def reference?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#139
  def required?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#159
  def rich_text?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#107
  def singular_name; end

  # source://railties//lib/rails/generators/generated_attribute.rb#155
  def token?; end

  # source://railties//lib/rails/generators/generated_attribute.rb#11
  def type; end

  # source://railties//lib/rails/generators/generated_attribute.rb#11
  def type=(_arg0); end

  # source://railties//lib/rails/generators/generated_attribute.rb#171
  def virtual?; end

  class << self
    # source://railties//lib/rails/generators/generated_attribute.rb#16
    def parse(column_definition); end

    # source://railties//lib/rails/generators/generated_attribute.rb#36
    def reference?(type); end

    private

    # source://railties//lib/rails/generators/generated_attribute.rb#43
    def parse_type_and_options(type); end
  end
end

# source://railties//lib/rails/generators/generated_attribute.rb#8
Rails::Generators::GeneratedAttribute::INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/generated_attribute.rb#9
Rails::Generators::GeneratedAttribute::UNIQ_INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/generators/migration.rb#11
module Rails::Generators::Migration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Rails::Generators::Migration::ClassMethods

  # source://railties//lib/rails/generators/migration.rb#35
  def create_migration(destination, data, config = T.unsafe(nil), &block); end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_class_name; end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_file_name; end

  # source://railties//lib/rails/generators/migration.rb#13
  def migration_number; end

  # source://railties//lib/rails/generators/migration.rb#56
  def migration_template(source, destination, config = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/migration.rb#39
  def set_migration_assigns!(destination); end
end

# source://railties//lib/rails/generators/migration.rb#15
module Rails::Generators::Migration::ClassMethods
  # source://railties//lib/rails/generators/migration.rb#24
  def current_migration_number(dirname); end

  # source://railties//lib/rails/generators/migration.rb#20
  def migration_exists?(dirname, file_name); end

  # source://railties//lib/rails/generators/migration.rb#16
  def migration_lookup_at(dirname); end

  # source://railties//lib/rails/generators/migration.rb#30
  def next_migration_number(dirname); end
end

# source://railties//lib/rails/generators/model_helpers.rb#7
module Rails::Generators::ModelHelpers
  # source://railties//lib/rails/generators/model_helpers.rb#25
  def initialize(args, *_options); end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn; end

  # source://railties//lib/rails/generators/model_helpers.rb#19
  def skip_warn=(val); end

  private

  # source://railties//lib/rails/generators/model_helpers.rb#55
  def inflection_impossible?(name); end

  # source://railties//lib/rails/generators/model_helpers.rb#51
  def irregular_model_name?(name); end

  # source://railties//lib/rails/generators/model_helpers.rb#47
  def plural_model_name?(name); end

  class << self
    # source://railties//lib/rails/generators/model_helpers.rb#21
    def included(base); end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn; end

    # source://railties//lib/rails/generators/model_helpers.rb#19
    def skip_warn=(val); end
  end
end

# source://railties//lib/rails/generators/model_helpers.rb#14
Rails::Generators::ModelHelpers::INFLECTION_IMPOSSIBLE_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#10
Rails::Generators::ModelHelpers::IRREGULAR_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/model_helpers.rb#8
Rails::Generators::ModelHelpers::PLURAL_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/generators/named_base.rb#8
class Rails::Generators::NamedBase < ::Rails::Generators::Base
  # source://railties//lib/rails/generators/named_base.rb#11
  def initialize(args, *options); end

  # source://thor/1.2.1/lib/thor/base.rb#139
  def file_name; end

  # source://railties//lib/rails/generators/named_base.rb#29
  def js_template(source, destination); end

  # source://thor/1.2.1/lib/thor/base.rb#147
  def name; end

  # source://thor/1.2.1/lib/thor/base.rb#147
  def name=(_arg0); end

  # source://railties//lib/rails/generators/named_base.rb#23
  def template(source, *args, &block); end

  private

  # source://railties//lib/rails/generators/named_base.rb#138
  def application_name; end

  # source://railties//lib/rails/generators/named_base.rb#175
  def assign_names!(name); end

  # source://railties//lib/rails/generators/named_base.rb#188
  def attributes_names; end

  # source://railties//lib/rails/generators/named_base.rb#70
  def class_name; end

  # source://railties//lib/rails/generators/named_base.rb#58
  def class_path; end

  # source://railties//lib/rails/generators/named_base.rb#105
  def edit_helper; end

  # source://railties//lib/rails/generators/named_base.rb#54
  def file_path; end

  # source://railties//lib/rails/generators/named_base.rb#125
  def fixture_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#74
  def human_name; end

  # source://railties//lib/rails/generators/named_base.rb#82
  def i18n_scope; end

  # source://railties//lib/rails/generators/named_base.rb#97
  def index_helper; end

  # source://railties//lib/rails/generators/named_base.rb#43
  def inside_template; end

  # source://railties//lib/rails/generators/named_base.rb#50
  def inside_template?; end

  # source://railties//lib/rails/generators/named_base.rb#150
  def model_resource_name(prefix: T.unsafe(nil)); end

  # source://railties//lib/rails/generators/named_base.rb#200
  def mountable_engine?; end

  # source://railties//lib/rails/generators/named_base.rb#66
  def namespaced_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#109
  def new_helper; end

  # source://railties//lib/rails/generators/named_base.rb#182
  def parse_attributes!; end

  # source://railties//lib/rails/generators/named_base.rb#121
  def plural_file_name; end

  # source://railties//lib/rails/generators/named_base.rb#78
  def plural_name; end

  # source://railties//lib/rails/generators/named_base.rb#167
  def plural_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#117
  def plural_table_name; end

  # source://railties//lib/rails/generators/named_base.rb#196
  def pluralize_table_names?; end

  # source://railties//lib/rails/generators/named_base.rb#146
  def redirect_resource_name; end

  # source://railties//lib/rails/generators/named_base.rb#62
  def regular_class_path; end

  # source://railties//lib/rails/generators/named_base.rb#129
  def route_url; end

  # source://railties//lib/rails/generators/named_base.rb#101
  def show_helper; end

  # source://railties//lib/rails/generators/named_base.rb#39
  def singular_name; end

  # source://railties//lib/rails/generators/named_base.rb#159
  def singular_route_name; end

  # source://railties//lib/rails/generators/named_base.rb#113
  def singular_table_name; end

  # source://railties//lib/rails/generators/named_base.rb#86
  def table_name; end

  # source://railties//lib/rails/generators/named_base.rb#93
  def uncountable?; end

  # source://railties//lib/rails/generators/named_base.rb#133
  def url_helper_prefix; end

  class << self
    # source://railties//lib/rails/generators/named_base.rb#214
    def check_class_collision(options = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/generators/resource_helpers.rb#10
module Rails::Generators::ResourceHelpers
  include ::Rails::Generators::ModelHelpers

  # source://railties//lib/rails/generators/resource_helpers.rb#17
  def initialize(*args); end

  private

  # source://railties//lib/rails/generators/resource_helpers.rb#39
  def assign_controller_names!(name); end

  # source://railties//lib/rails/generators/resource_helpers.rb#50
  def controller_class_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#31
  def controller_class_path; end

  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_file_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#46
  def controller_file_path; end

  # source://railties//lib/rails/generators/resource_helpers.rb#54
  def controller_i18n_scope; end

  # source://railties//lib/rails/generators/resource_helpers.rb#29
  def controller_name; end

  # source://railties//lib/rails/generators/resource_helpers.rb#61
  def orm_class; end

  # source://railties//lib/rails/generators/resource_helpers.rb#77
  def orm_instance(name = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/generators/resource_helpers.rb#11
    def included(base); end
  end
end

# source://railties//lib/rails/generators/test_case.rb#30
class Rails::Generators::TestCase < ::ActiveSupport::TestCase
  include ::ActiveSupport::Testing::Stream
  include ::Rails::Generators::Testing::Behaviour
  include ::Rails::Generators::Testing::SetupAndTeardown
  include ::Rails::Generators::Testing::Assertions
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  extend ::Rails::Generators::Testing::Behaviour::ClassMethods

  # source://railties//lib/rails/generators/testing/behaviour.rb#21
  def current_path; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#21
  def current_path=(_arg0); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#21
  def current_path?; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#22
  def default_arguments; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#22
  def default_arguments=(_arg0); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#22
  def default_arguments?; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#23
  def destination_root; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#23
  def destination_root=(_arg0); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#23
  def destination_root?; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#24
  def generator_class; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#24
  def generator_class=(_arg0); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#24
  def generator_class?; end

  class << self
    # source://railties//lib/rails/generators/testing/behaviour.rb#21
    def current_path; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#21
    def current_path=(value); end

    # source://railties//lib/rails/generators/testing/behaviour.rb#21
    def current_path?; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#22
    def default_arguments; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#22
    def default_arguments=(value); end

    # source://railties//lib/rails/generators/testing/behaviour.rb#22
    def default_arguments?; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#23
    def destination_root; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#23
    def destination_root=(value); end

    # source://railties//lib/rails/generators/testing/behaviour.rb#23
    def destination_root?; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#24
    def generator_class; end

    # source://railties//lib/rails/generators/testing/behaviour.rb#24
    def generator_class=(value); end

    # source://railties//lib/rails/generators/testing/behaviour.rb#24
    def generator_class?; end
  end
end

# source://railties//lib/rails/generators/testing/behaviour.rb#13
module Rails::Generators::Testing; end

# source://railties//lib/rails/generators/testing/assertions.rb#6
module Rails::Generators::Testing::Assertions
  # source://railties//lib/rails/generators/testing/assertions.rb#88
  def assert_class_method(method, content, &block); end

  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_directory(relative, *contents); end

  # source://railties//lib/rails/generators/testing/assertions.rb#117
  def assert_field_default_value(attribute_type, value); end

  # source://railties//lib/rails/generators/testing/assertions.rb#110
  def assert_field_type(attribute_type, field_type); end

  # source://railties//lib/rails/generators/testing/assertions.rb#25
  def assert_file(relative, *contents); end

  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_instance_method(method, content); end

  # source://railties//lib/rails/generators/testing/assertions.rb#100
  def assert_method(method, content); end

  # source://railties//lib/rails/generators/testing/assertions.rb#64
  def assert_migration(relative, *contents, &block); end

  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_directory(relative); end

  # source://railties//lib/rails/generators/testing/assertions.rb#47
  def assert_no_file(relative); end

  # source://railties//lib/rails/generators/testing/assertions.rb#74
  def assert_no_migration(relative); end
end

# source://railties//lib/rails/generators/testing/behaviour.rb#14
module Rails::Generators::Testing::Behaviour
  include ::ActiveSupport::Testing::Stream
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Rails::Generators::Testing::Behaviour::ClassMethods

  # source://railties//lib/rails/generators/testing/behaviour.rb#86
  def create_generated_attribute(attribute_type, name = T.unsafe(nil), index = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#78
  def generator(args = T.unsafe(nil), options = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#67
  def run_generator(args = T.unsafe(nil), config = T.unsafe(nil)); end

  private

  # source://railties//lib/rails/generators/testing/behaviour.rb#91
  def destination_root_is_set?; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#95
  def ensure_current_path; end

  # source://railties//lib/rails/generators/testing/behaviour.rb#105
  def migration_file_name(relative); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#100
  def prepare_destination; end

  module GeneratedClassMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end

  module GeneratedInstanceMethods
    def current_path; end
    def current_path=(value); end
    def current_path?; end
    def default_arguments; end
    def default_arguments=(value); end
    def default_arguments?; end
    def destination_root; end
    def destination_root=(value); end
    def destination_root?; end
    def generator_class; end
    def generator_class=(value); end
    def generator_class?; end
  end
end

# source://railties//lib/rails/generators/testing/behaviour.rb#27
module Rails::Generators::Testing::Behaviour::ClassMethods
  # source://railties//lib/rails/generators/testing/behaviour.rb#39
  def arguments(array); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#46
  def destination(path); end

  # source://railties//lib/rails/generators/testing/behaviour.rb#31
  def tests(klass); end
end

# source://railties//lib/rails/generators/testing/setup_and_teardown.rb#6
module Rails::Generators::Testing::SetupAndTeardown
  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#7
  def setup; end

  # source://railties//lib/rails/generators/testing/setup_and_teardown.rb#13
  def teardown; end
end

# source://railties//lib/rails/info.rb#9
module Rails::Info
  # source://railties//lib/rails/info.rb#10
  def properties; end

  # source://railties//lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties//lib/rails/info.rb#31
    def inspect; end

    # source://railties//lib/rails/info.rb#10
    def properties; end

    # source://railties//lib/rails/info.rb#10
    def properties=(val); end

    # source://railties//lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties//lib/rails/info.rb#43
    def to_html; end

    # source://railties//lib/rails/info.rb#31
    def to_s; end
  end
end

# source://railties//lib/rails/info_controller.rb#6
class Rails::InfoController < ::Rails::ApplicationController
  # source://railties//lib/rails/info_controller.rb#12
  def index; end

  # source://railties//lib/rails/info_controller.rb#16
  def properties; end

  # source://railties//lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/6.1.7.3/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties//lib/rails/info_controller.rb#36
  def match_route; end

  # source://railties//lib/rails/info_controller.rb#42
  def with_leading_slash(path); end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/6.1.7.3/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

# source://railties//lib/rails/initializable.rb#6
module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/initializable.rb#66
  def initializers; end

  # source://railties//lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties//lib/rails/initializable.rb#7
    def included(base); end
  end
end

# source://railties//lib/rails/initializable.rb#70
module Rails::Initializable::ClassMethods
  # source://railties//lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties//lib/rails/initializable.rb#71
  def initializers; end

  # source://railties//lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties//lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

# source://railties//lib/rails/initializable.rb#45
class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties//lib/rails/initializable.rb#53
  def +(other); end

  # source://railties//lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

# source://railties//lib/rails/initializable.rb#11
class Rails::Initializable::Initializer
  # source://railties//lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties//lib/rails/initializable.rb#23
  def after; end

  # source://railties//lib/rails/initializable.rb#19
  def before; end

  # source://railties//lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties//lib/rails/initializable.rb#35
  def bind(context); end

  # source://railties//lib/rails/initializable.rb#12
  def block; end

  # source://railties//lib/rails/initializable.rb#40
  def context_class; end

  # source://railties//lib/rails/initializable.rb#12
  def name; end

  # source://railties//lib/rails/initializable.rb#31
  def run(*args); end
end

# source://railties//lib/rails/mailers_controller.rb#5
class Rails::MailersController < ::Rails::ApplicationController
  # source://railties//lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties//lib/rails/mailers_controller.rb#21
  def preview; end

  private

  # source://actionview/6.1.7.3/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/mailers_controller.rb#80
  def find_part(format); end

  # source://railties//lib/rails/mailers_controller.rb#68
  def find_preferred_part(*formats); end

  # source://railties//lib/rails/mailers_controller.rb#56
  def find_preview; end

  # source://railties//lib/rails/mailers_controller.rb#92
  def locale_query(locale); end

  # source://railties//lib/rails/mailers_controller.rb#88
  def part_query(mime_type); end

  # source://railties//lib/rails/mailers_controller.rb#96
  def set_locale; end

  # source://railties//lib/rails/mailers_controller.rb#52
  def show_previews?; end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.7.3/lib/abstract_controller/helpers.rb#10
    def _helper_methods; end

    # source://actionpack/6.1.7.3/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

# source://railties//lib/rails/mailers_controller.rb#0
module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # source://railties//lib/rails/mailers_controller.rb#12
  def locale_query(*args, &block); end

  # source://railties//lib/rails/mailers_controller.rb#12
  def part_query(*args, &block); end
end

# source://railties//lib/rails/paths.rb#6
module Rails::Paths; end

# source://railties//lib/rails/paths.rb#111
class Rails::Paths::Path
  include ::Enumerable

  # source://railties//lib/rails/paths.rb#116
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#168
  def <<(path); end

  # source://railties//lib/rails/paths.rb#129
  def absolute_current; end

  # source://railties//lib/rails/paths.rb#150
  def autoload!; end

  # source://railties//lib/rails/paths.rb#158
  def autoload?; end

  # source://railties//lib/rails/paths.rb#150
  def autoload_once!; end

  # source://railties//lib/rails/paths.rb#158
  def autoload_once?; end

  # source://railties//lib/rails/paths.rb#133
  def children; end

  # source://railties//lib/rails/paths.rb#173
  def concat(paths); end

  # source://railties//lib/rails/paths.rb#164
  def each(&block); end

  # source://railties//lib/rails/paths.rb#150
  def eager_load!; end

  # source://railties//lib/rails/paths.rb#158
  def eager_load?; end

  # source://railties//lib/rails/paths.rb#217
  def existent; end

  # source://railties//lib/rails/paths.rb#228
  def existent_directories; end

  # source://railties//lib/rails/paths.rb#198
  def expanded; end

  # source://railties//lib/rails/paths.rb#193
  def extensions; end

  # source://railties//lib/rails/paths.rb#140
  def first; end

  # source://railties//lib/rails/paths.rb#114
  def glob; end

  # source://railties//lib/rails/paths.rb#114
  def glob=(_arg0); end

  # source://railties//lib/rails/paths.rb#144
  def last; end

  # source://railties//lib/rails/paths.rb#150
  def load_path!; end

  # source://railties//lib/rails/paths.rb#158
  def load_path?; end

  # source://railties//lib/rails/paths.rb#185
  def paths; end

  # source://railties//lib/rails/paths.rb#168
  def push(path); end

  # source://railties//lib/rails/paths.rb#154
  def skip_autoload!; end

  # source://railties//lib/rails/paths.rb#154
  def skip_autoload_once!; end

  # source://railties//lib/rails/paths.rb#154
  def skip_eager_load!; end

  # source://railties//lib/rails/paths.rb#154
  def skip_load_path!; end

  # source://railties//lib/rails/paths.rb#198
  def to_a; end

  # source://railties//lib/rails/paths.rb#181
  def to_ary; end

  # source://railties//lib/rails/paths.rb#177
  def unshift(*paths); end

  private

  # source://railties//lib/rails/paths.rb#235
  def files_in(path); end
end

# source://railties//lib/rails/paths.rb#48
class Rails::Paths::Root
  # source://railties//lib/rails/paths.rb#51
  def initialize(path); end

  # source://railties//lib/rails/paths.rb#66
  def [](path); end

  # source://railties//lib/rails/paths.rb#56
  def []=(path, value); end

  # source://railties//lib/rails/paths.rb#61
  def add(path, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#82
  def all_paths; end

  # source://railties//lib/rails/paths.rb#86
  def autoload_once; end

  # source://railties//lib/rails/paths.rb#94
  def autoload_paths; end

  # source://railties//lib/rails/paths.rb#90
  def eager_load; end

  # source://railties//lib/rails/paths.rb#74
  def keys; end

  # source://railties//lib/rails/paths.rb#98
  def load_paths; end

  # source://railties//lib/rails/paths.rb#49
  def path; end

  # source://railties//lib/rails/paths.rb#49
  def path=(_arg0); end

  # source://railties//lib/rails/paths.rb#70
  def values; end

  # source://railties//lib/rails/paths.rb#78
  def values_at(*list); end

  private

  # source://railties//lib/rails/paths.rb#103
  def filter_by(&block); end
end

# source://railties//lib/rails/rack.rb#4
module Rails::Rack; end

# source://railties//lib/rails/rack/logger.rb#16
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # source://railties//lib/rails/rack/logger.rb#17
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties//lib/rails/rack/logger.rb#22
  def call(env); end

  private

  # source://railties//lib/rails/rack/logger.rb#33
  def call_app(request, env); end

  # source://railties//lib/rails/rack/logger.rb#56
  def compute_tags(request); end

  # source://railties//lib/rails/rack/logger.rb#69
  def finish(request); end

  # source://railties//lib/rails/rack/logger.rb#74
  def logger; end

  # source://railties//lib/rails/rack/logger.rb#48
  def started_request_message(request); end
end

# source://railties//lib/rails/railtie.rb#136
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/railtie.rb#227
  def initialize; end

  # source://railties//lib/rails/railtie.rb#240
  def config; end

  # source://railties//lib/rails/railtie.rb#233
  def configure(&block); end

  # source://railties//lib/rails/railtie.rb#225
  def railtie_name(*_arg0, &_arg1); end

  # source://railties//lib/rails/railtie.rb#244
  def railtie_namespace; end

  protected

  # source://railties//lib/rails/railtie.rb#249
  def run_console_blocks(app); end

  # source://railties//lib/rails/railtie.rb#253
  def run_generators_blocks(app); end

  # source://railties//lib/rails/railtie.rb#257
  def run_runner_blocks(app); end

  # source://railties//lib/rails/railtie.rb#266
  def run_server_blocks(app); end

  # source://railties//lib/rails/railtie.rb#261
  def run_tasks_blocks(app); end

  private

  # source://railties//lib/rails/railtie.rb#272
  def each_registered_block(type, &block); end

  class << self
    # source://railties//lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties//lib/rails/railtie.rb#146
    def config(*_arg0, &_arg1); end

    # source://railties//lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties//lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties//lib/rails/railtie.rb#164
    def generators(&blk); end

    # source://railties//lib/rails/railtie.rb#183
    def instance; end

    # source://railties//lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties//lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties//lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties//lib/rails/railtie.rb#148
    def subclasses; end

    private

    # source://railties//lib/rails/railtie.rb#195
    def generate_railtie_name(string); end

    # source://railties//lib/rails/railtie.rb#205
    def method_missing(name, *args, &block); end

    # source://railties//lib/rails/railtie.rb#217
    def register_block_for(type, &blk); end

    # source://railties//lib/rails/railtie.rb#199
    def respond_to_missing?(name, _); end
  end
end

# source://railties//lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/railtie/configuration.rb#8
class Rails::Railtie::Configuration
  # source://railties//lib/rails/railtie/configuration.rb#9
  def initialize; end

  # source://railties//lib/rails/railtie/configuration.rb#71
  def after_initialize(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#48
  def app_generators; end

  # source://railties//lib/rails/railtie/configuration.rb#40
  def app_middleware; end

  # source://railties//lib/rails/railtie/configuration.rb#55
  def before_configuration(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#61
  def before_eager_load(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#66
  def before_initialize(&block); end

  # source://railties//lib/rails/railtie/configuration.rb#19
  def eager_load_namespaces; end

  # source://railties//lib/rails/railtie/configuration.rb#86
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://railties//lib/rails/railtie/configuration.rb#82
  def to_prepare(&blk); end

  # source://railties//lib/rails/railtie/configuration.rb#76
  def to_prepare_blocks; end

  # source://railties//lib/rails/railtie/configuration.rb#31
  def watchable_dirs; end

  # source://railties//lib/rails/railtie/configuration.rb#24
  def watchable_files; end

  private

  # source://railties//lib/rails/railtie/configuration.rb#91
  def method_missing(name, *args, &blk); end

  class << self
    # source://railties//lib/rails/railtie/configuration.rb#14
    def eager_load_namespaces; end
  end
end

# source://railties//lib/rails/secrets.rb#8
class Rails::Secrets
  class << self
    # source://railties//lib/rails/secrets.rb#45
    def decrypt(data); end

    # source://railties//lib/rails/secrets.rb#41
    def encrypt(data); end

    # source://railties//lib/rails/secrets.rb#37
    def key; end

    # source://railties//lib/rails/secrets.rb#24
    def parse(paths, env:); end

    # source://railties//lib/rails/secrets.rb#49
    def read; end

    # source://railties//lib/rails/secrets.rb#58
    def read_for_editing(&block); end

    # source://railties//lib/rails/secrets.rb#22
    def root=(_arg0); end

    # source://railties//lib/rails/secrets.rb#53
    def write(contents); end

    private

    # source://railties//lib/rails/secrets.rb#103
    def encryptor; end

    # source://railties//lib/rails/secrets.rb#63
    def handle_missing_key; end

    # source://railties//lib/rails/secrets.rb#73
    def key_path; end

    # source://railties//lib/rails/secrets.rb#77
    def path; end

    # source://railties//lib/rails/secrets.rb#81
    def preprocess(path); end

    # source://railties//lib/rails/secrets.rb#67
    def read_key_file; end

    # source://railties//lib/rails/secrets.rb#89
    def writing(contents); end
  end
end

# source://railties//lib/rails/secrets.rb#9
class Rails::Secrets::MissingKeyError < ::RuntimeError
  # source://railties//lib/rails/secrets.rb#10
  def initialize; end
end

# source://railties//lib/rails/source_annotation_extractor.rb#13
class Rails::SourceAnnotationExtractor
  # source://railties//lib/rails/source_annotation_extractor.rb#85
  def initialize(tag); end

  # source://railties//lib/rails/source_annotation_extractor.rb#137
  def display(results, options = T.unsafe(nil)); end

  # source://railties//lib/rails/source_annotation_extractor.rb#125
  def extract_annotations_from(file, pattern); end

  # source://railties//lib/rails/source_annotation_extractor.rb#91
  def find(dirs); end

  # source://railties//lib/rails/source_annotation_extractor.rb#99
  def find_in(dir); end

  # source://railties//lib/rails/source_annotation_extractor.rb#83
  def tag; end

  class << self
    # source://railties//lib/rails/source_annotation_extractor.rb#76
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/source_annotation_extractor.rb#14
class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#55
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/source_annotation_extractor.rb#15
    def directories; end

    # source://railties//lib/rails/source_annotation_extractor.rb#35
    def extensions; end

    # source://railties//lib/rails/source_annotation_extractor.rb#21
    def register_directories(*dirs); end

    # source://railties//lib/rails/source_annotation_extractor.rb#41
    def register_extensions(*exts, &block); end

    # source://railties//lib/rails/source_annotation_extractor.rb#31
    def register_tags(*additional_tags); end

    # source://railties//lib/rails/source_annotation_extractor.rb#25
    def tags; end
  end
end

# source://railties//lib/rails/gem_version.rb#9
module Rails::VERSION; end

# source://railties//lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/welcome_controller.rb#5
class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties//lib/rails/welcome_controller.rb#8
  def index; end

  private

  # source://actionview/6.1.7.3/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  class << self
    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/6.1.7.3/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/6.1.7.3/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end
