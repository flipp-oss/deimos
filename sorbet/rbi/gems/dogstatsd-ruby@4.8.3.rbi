# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dogstatsd-ruby` gem.
# Please instead update this file by running `bin/tapioca gem dogstatsd-ruby`.

# source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#3
module Datadog
  extend ::Datadog::Tracing::Contrib::Extensions::Helpers
  extend ::Datadog::Tracing::Contrib::Extensions::Configuration
end

# source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#4
class Datadog::Statsd
  # source://dogstatsd-ruby//lib/datadog/statsd.rb#74
  def initialize(host = T.unsafe(nil), port = T.unsafe(nil), namespace: T.unsafe(nil), tags: T.unsafe(nil), max_buffer_bytes: T.unsafe(nil), socket_path: T.unsafe(nil), logger: T.unsafe(nil), sample_rate: T.unsafe(nil), disable_telemetry: T.unsafe(nil), telemetry_flush_interval: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#311
  def batch; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#55
  def buffer; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#318
  def close; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#64
  def connection; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#162
  def count(stat, count, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#149
  def decrement(stat, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#207
  def distribution(stat, value, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#297
  def event(title, text, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#180
  def gauge(stat, value, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#194
  def histogram(stat, value, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#135
  def increment(stat, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#58
  def max_buffer_bytes; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#47
  def namespace; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#61
  def sample_rate; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#272
  def service_check(name, status, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#256
  def set(stat, value, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#50
  def tags; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#239
  def time(stat, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#221
  def timing(stat, ms, opts = T.unsafe(nil)); end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#330
  def now; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#351
  def send_stat(message); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#339
  def send_stats(stat, delta, type, opts = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#323
  def serializer; end

  # source://dogstatsd-ruby//lib/datadog/statsd.rb#324
  def telemetry; end

  class << self
    # source://dogstatsd-ruby//lib/datadog/statsd.rb#119
    def open(*args); end
  end
end

# source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#5
class Datadog::Statsd::Batch
  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#6
  def initialize(connection, max_buffer_bytes); end

  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#26
  def add(message); end

  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#42
  def flush; end

  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#13
  def open; end

  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#22
  def open?; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/batch.rb#50
  def reset; end
end

# source://dogstatsd-ruby//lib/datadog/statsd.rb#39
Datadog::Statsd::COUNTER_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#31
Datadog::Statsd::CRITICAL = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#5
class Datadog::Statsd::Connection
  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#6
  def initialize(telemetry); end

  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#11
  def close; end

  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#20
  def write(payload); end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#55
  def logger; end

  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#57
  def socket; end

  # source://dogstatsd-ruby//lib/datadog/statsd/connection.rb#54
  def telemetry; end
end

# source://dogstatsd-ruby//lib/datadog/statsd.rb#34
Datadog::Statsd::DEFAULT_BUFFER_SIZE = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#37
Datadog::Statsd::DEFAULT_TELEMETRY_FLUSH_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#42
Datadog::Statsd::DISTRIBUTION_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#327
Datadog::Statsd::EMPTY_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#40
Datadog::Statsd::GAUGE_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#41
Datadog::Statsd::HISTOGRAM_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#35
Datadog::Statsd::MAX_EVENT_SIZE = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#29
Datadog::Statsd::OK = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#326
Datadog::Statsd::PROCESS_TIME_SUPPORTED = T.let(T.unsafe(nil), TrueClass)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#44
Datadog::Statsd::SET_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd/serialization.rb#5
module Datadog::Statsd::Serialization; end

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#6
class Datadog::Statsd::Serialization::EventSerializer
  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#16
  def initialize(global_tags: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#20
  def format(title, text, options = T.unsafe(nil)); end

  protected

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#63
  def escape(text); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#61
  def tag_serializer; end
end

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/event_serializer.rb#7
Datadog::Statsd::Serialization::EventSerializer::EVENT_BASIC_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#8
class Datadog::Statsd::Serialization::Serializer
  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#9
  def initialize(prefix: T.unsafe(nil), global_tags: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#30
  def global_tags; end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#26
  def to_event(title, text, options = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#21
  def to_service_check(name, status, options = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#16
  def to_stat(name, delta, type, tags: T.unsafe(nil), sample_rate: T.unsafe(nil)); end

  protected

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#37
  def event_serializer; end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#36
  def service_check_serializer; end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/serializer.rb#35
  def stat_serializer; end
end

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#6
class Datadog::Statsd::Serialization::ServiceCheckSerializer
  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#12
  def initialize(global_tags: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#16
  def format(name, status, options = T.unsafe(nil)); end

  protected

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#51
  def escape_message(message); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#49
  def tag_serializer; end
end

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/service_check_serializer.rb#7
Datadog::Statsd::Serialization::ServiceCheckSerializer::SERVICE_CHECK_BASIC_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#6
class Datadog::Statsd::Serialization::StatSerializer
  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#7
  def initialize(prefix, global_tags: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#13
  def format(name, delta, type, tags: T.unsafe(nil), sample_rate: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#31
  def global_tags; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#40
  def formated_name(name); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#37
  def prefix; end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/stat_serializer.rb#38
  def tag_serializer; end
end

# source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#6
class Datadog::Statsd::Serialization::TagSerializer
  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#7
  def initialize(global_tags = T.unsafe(nil), env = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#19
  def format(message_tags); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#33
  def global_tags; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#75
  def dd_tags(env = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#81
  def default_tags(env = T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#71
  def escape_tag_content(tag); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#37
  def to_tags_hash(tags); end

  # source://dogstatsd-ruby//lib/datadog/statsd/serialization/tag_serializer.rb#54
  def to_tags_list(tags); end
end

# source://dogstatsd-ruby//lib/datadog/statsd.rb#43
Datadog::Statsd::TIMING_TYPE = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#6
class Datadog::Statsd::Telemetry
  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#16
  def initialize(disabled, flush_interval, global_tags: T.unsafe(nil), transport_type: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#11
  def bytes_dropped; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#10
  def bytes_sent; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#61
  def dropped(bytes: T.unsafe(nil), packets: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#14
  def estimate_max_size; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#8
  def events; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#70
  def flush; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#66
  def flush?; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#7
  def metrics; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#13
  def packets_dropped; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#12
  def packets_sent; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#41
  def reset; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#52
  def sent(metrics: T.unsafe(nil), events: T.unsafe(nil), service_checks: T.unsafe(nil), bytes: T.unsafe(nil), packets: T.unsafe(nil)); end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#9
  def service_checks; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#88
  def now_in_s; end

  # source://dogstatsd-ruby//lib/datadog/statsd/telemetry.rb#85
  def serialized_tags; end
end

# source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#7
class Datadog::Statsd::UDPConnection < ::Datadog::Statsd::Connection
  # source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#17
  def initialize(host, port, logger, telemetry); end

  # source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#12
  def host; end

  # source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#15
  def port; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#26
  def connect; end

  # source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#32
  def send_message(message); end
end

# source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#8
Datadog::Statsd::UDPConnection::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd/udp_connection.rb#9
Datadog::Statsd::UDPConnection::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#7
class Datadog::Statsd::UDSConnection < ::Datadog::Statsd::Connection
  # source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#13
  def initialize(socket_path, logger, telemetry); end

  # source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#11
  def socket_path; end

  private

  # source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#21
  def connect; end

  # source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#27
  def send_message(message); end
end

# source://dogstatsd-ruby//lib/datadog/statsd/uds_connection.rb#8
class Datadog::Statsd::UDSConnection::BadSocketError < ::StandardError; end

# source://dogstatsd-ruby//lib/datadog/statsd.rb#32
Datadog::Statsd::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://dogstatsd-ruby//lib/datadog/statsd/version.rb#7
Datadog::Statsd::VERSION = T.let(T.unsafe(nil), String)

# source://dogstatsd-ruby//lib/datadog/statsd.rb#30
Datadog::Statsd::WARNING = T.let(T.unsafe(nil), Integer)
