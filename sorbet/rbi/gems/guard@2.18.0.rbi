# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard` gem.
# Please instead update this file by running `bin/tapioca gem guard`.

# source://guard//lib/guard/config.rb#3
module Guard
  extend ::Guard::Deprecated::Guard::ClassMethods
  extend ::Guard::Internals::Helpers

  class << self
    # source://guard//lib/guard.rb#87
    def async_queue_add(changes); end

    # source://guard//lib/guard.rb#73
    def init(cmdline_options); end

    # source://guard//lib/guard.rb#24
    def interactor; end

    # source://guard//lib/guard.rb#23
    def listener; end

    # source://guard//lib/guard.rb#22
    def queue; end

    # source://guard//lib/guard.rb#44
    def setup(cmdline_options = T.unsafe(nil)); end

    # source://guard//lib/guard.rb#21
    def state; end

    private

    # source://guard//lib/guard.rb#132
    def _evaluate(options); end

    # source://guard//lib/guard.rb#152
    def _guardfile_deprecated_check(modified); end

    # source://guard//lib/guard.rb#113
    def _listener_callback; end

    # source://guard//lib/guard.rb#128
    def _pluginless_guardfile?; end

    # source://guard//lib/guard.rb#109
    def _relative_pathnames(paths); end

    # source://guard//lib/guard.rb#99
    def _relevant_changes?(changes); end
  end
end

# source://guard//lib/guard/config.rb#9
class Guard::Config < ::Nenv::Environment
  # source://guard//lib/guard/config.rb#10
  def initialize; end

  # source://guard//lib/guard/config.rb#14
  def silence_deprecations?; end
end

# source://guard//lib/guard/deprecated/watcher.rb#5
module Guard::Deprecated; end

# source://guard//lib/guard/deprecated/dsl.rb#6
module Guard::Deprecated::Dsl
  class << self
    # source://guard//lib/guard/deprecated/dsl.rb#7
    def add_deprecated(dsl_klass); end
  end
end

# source://guard//lib/guard/deprecated/dsl.rb#16
module Guard::Deprecated::Dsl::ClassMethods
  # source://guard//lib/guard/deprecated/dsl.rb#35
  def evaluate_guardfile(options = T.unsafe(nil)); end
end

# source://guard//lib/guard/deprecated/dsl.rb#24
Guard::Deprecated::Dsl::ClassMethods::EVALUATE_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/dsl.rb#11
Guard::Deprecated::Dsl::MORE_INFO_ON_UPGRADING_TO_GUARD_2 = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/evaluator.rb#8
module Guard::Deprecated::Evaluator
  # source://guard//lib/guard/deprecated/evaluator.rb#26
  def evaluate_guardfile; end

  # source://guard//lib/guard/deprecated/evaluator.rb#31
  def reevaluate_guardfile; end

  class << self
    # source://guard//lib/guard/deprecated/evaluator.rb#9
    def add_deprecated(klass); end
  end
end

# source://guard//lib/guard/deprecated/evaluator.rb#13
Guard::Deprecated::Evaluator::EVALUATE_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/evaluator.rb#18
Guard::Deprecated::Evaluator::REEVALUATE_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#14
module Guard::Deprecated::Guard
  class << self
    # source://guard//lib/guard/deprecated/guard.rb#15
    def add_deprecated(klass); end
  end
end

# source://guard//lib/guard/deprecated/guard.rb#19
module Guard::Deprecated::Guard::ClassMethods
  # source://guard//lib/guard/deprecated/guard.rb#251
  def add_group(name, options = T.unsafe(nil)); end

  # source://guard//lib/guard/deprecated/guard.rb#57
  def add_guard(*args); end

  # source://guard//lib/guard/deprecated/guard.rb#261
  def add_plugin(name, options = T.unsafe(nil)); end

  # source://guard//lib/guard/deprecated/guard.rb#179
  def evaluate_guardfile; end

  # source://guard//lib/guard/deprecated/guard.rb#152
  def evaluator; end

  # source://guard//lib/guard/deprecated/guard.rb#79
  def get_guard_class(name, fail_gracefully = T.unsafe(nil)); end

  # source://guard//lib/guard/deprecated/guard.rb#271
  def group(filter); end

  # source://guard//lib/guard/deprecated/guard.rb#291
  def groups(filter); end

  # source://guard//lib/guard/deprecated/guard.rb#116
  def guard_gem_names; end

  # source://guard//lib/guard/deprecated/guard.rb#38
  def guards(filter = T.unsafe(nil)); end

  # source://guard//lib/guard/deprecated/guard.rb#143
  def listener=(_); end

  # source://guard//lib/guard/deprecated/guard.rb#97
  def locate_guard(name); end

  # source://guard//lib/guard/deprecated/guard.rb#135
  def lock; end

  # source://guard//lib/guard/deprecated/guard.rb#195
  def options; end

  # source://guard//lib/guard/deprecated/guard.rb#281
  def plugin(filter); end

  # source://guard//lib/guard/deprecated/guard.rb#301
  def plugins(filter); end

  # source://guard//lib/guard/deprecated/guard.rb#162
  def reset_evaluator(_options); end

  # source://guard//lib/guard/deprecated/guard.rb#170
  def runner; end

  # source://guard//lib/guard/deprecated/guard.rb#126
  def running; end

  # source://guard//lib/guard/deprecated/guard.rb#311
  def scope; end

  # source://guard//lib/guard/deprecated/guard.rb#321
  def scope=(scope); end
end

# source://guard//lib/guard/deprecated/guard.rb#246
Guard::Deprecated::Guard::ClassMethods::ADD_GROUP = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#48
Guard::Deprecated::Guard::ClassMethods::ADD_GUARD = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#256
Guard::Deprecated::Guard::ClassMethods::ADD_PLUGIN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#175
Guard::Deprecated::Guard::ClassMethods::EVALUATE_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#148
Guard::Deprecated::Guard::ClassMethods::EVALUATOR = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#69
Guard::Deprecated::Guard::ClassMethods::GET_GUARD_CLASS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#266
Guard::Deprecated::Guard::ClassMethods::GROUP = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#286
Guard::Deprecated::Guard::ClassMethods::GROUPS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#30
Guard::Deprecated::Guard::ClassMethods::GUARDS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#108
Guard::Deprecated::Guard::ClassMethods::GUARD_GEM_NAMES = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#139
Guard::Deprecated::Guard::ClassMethods::LISTENER_ASSIGN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#89
Guard::Deprecated::Guard::ClassMethods::LOCATE_GUARD = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#131
Guard::Deprecated::Guard::ClassMethods::LOCK = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#20
Guard::Deprecated::Guard::ClassMethods::MORE_INFO_ON_UPGRADING_TO_GUARD_2 = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#188
Guard::Deprecated::Guard::ClassMethods::OPTIONS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#276
Guard::Deprecated::Guard::ClassMethods::PLUGIN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#296
Guard::Deprecated::Guard::ClassMethods::PLUGINS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#158
Guard::Deprecated::Guard::ClassMethods::RESET_EVALUATOR = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#166
Guard::Deprecated::Guard::ClassMethods::RUNNER = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#121
Guard::Deprecated::Guard::ClassMethods::RUNNING = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#306
Guard::Deprecated::Guard::ClassMethods::SCOPE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/guard.rb#316
Guard::Deprecated::Guard::ClassMethods::SCOPE_ASSIGN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/deprecated/watcher.rb#6
module Guard::Deprecated::Watcher
  class << self
    # source://guard//lib/guard/deprecated/watcher.rb#7
    def add_deprecated(klass); end
  end
end

# source://guard//lib/guard/deprecated/watcher.rb#11
module Guard::Deprecated::Watcher::ClassMethods
  # source://guard//lib/guard/deprecated/watcher.rb#16
  def match_guardfile?(files); end
end

# source://guard//lib/guard/deprecated/watcher.rb#12
Guard::Deprecated::Watcher::ClassMethods::MATCH_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/dsl.rb#49
class Guard::Dsl
  extend ::Guard::Deprecated::Dsl::ClassMethods

  # source://guard//lib/guard/dsl.rb#246
  def callback(*args, &block); end

  # source://guard//lib/guard/dsl.rb#408
  def clearing(on); end

  # source://guard//lib/guard/dsl.rb#394
  def directories(directories); end

  # source://guard//lib/guard/dsl.rb#377
  def evaluate(contents, filename, lineno); end

  # source://guard//lib/guard/dsl.rb#267
  def filter(*regexps); end

  # source://guard//lib/guard/dsl.rb#282
  def filter!(*regexps); end

  # source://guard//lib/guard/dsl.rb#124
  def group(*args); end

  # source://guard//lib/guard/dsl.rb#176
  def guard(name, options = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl.rb#267
  def ignore(*regexps); end

  # source://guard//lib/guard/dsl.rb#282
  def ignore!(*regexps); end

  # source://guard//lib/guard/dsl.rb#91
  def interactor(options); end

  # source://guard//lib/guard/dsl.rb#325
  def logger(options); end

  # source://guard//lib/guard/dsl.rb#76
  def notification(notifier, opts = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl.rb#372
  def scope(scope = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl.rb#218
  def watch(pattern, &action); end

  private

  # source://guard//lib/guard/dsl.rb#414
  def _cleanup_backtrace(backtrace); end
end

# source://guard//lib/guard/dsl.rb#53
class Guard::Dsl::Error < ::RuntimeError; end

# source://guard//lib/guard/dsl.rb#56
Guard::Dsl::WARN_INVALID_LOG_LEVEL = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/dsl.rb#59
Guard::Dsl::WARN_INVALID_LOG_OPTIONS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/dsl_reader.rb#5
class Guard::DslReader < ::Guard::Dsl
  # source://guard//lib/guard/dsl_reader.rb#8
  def initialize; end

  # source://guard//lib/guard/dsl_reader.rb#30
  def callback(*_args, &_block); end

  # source://guard//lib/guard/dsl_reader.rb#48
  def clearing(_on); end

  # source://guard//lib/guard/dsl_reader.rb#45
  def directories(_directories); end

  # source://guard//lib/guard/dsl_reader.rb#24
  def group(*_args); end

  # source://guard//lib/guard/dsl_reader.rb#13
  def guard(name, _options = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl_reader.rb#33
  def ignore(*_regexps); end

  # source://guard//lib/guard/dsl_reader.rb#36
  def ignore!(*_regexps); end

  # source://guard//lib/guard/dsl_reader.rb#21
  def interactor(_options); end

  # source://guard//lib/guard/dsl_reader.rb#39
  def logger(_options); end

  # source://guard//lib/guard/dsl_reader.rb#18
  def notification(_notifier, _opts = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl_reader.rb#6
  def plugin_names; end

  # source://guard//lib/guard/dsl_reader.rb#42
  def scope(_scope = T.unsafe(nil)); end

  # source://guard//lib/guard/dsl_reader.rb#27
  def watch(_pattern, &_action); end
end

# source://guard//lib/guard/group.rb#24
class Guard::Group
  # source://guard//lib/guard/group.rb#35
  def initialize(name, options = T.unsafe(nil)); end

  # source://guard//lib/guard/group.rb#25
  def name; end

  # source://guard//lib/guard/group.rb#25
  def name=(_arg0); end

  # source://guard//lib/guard/group.rb#25
  def options; end

  # source://guard//lib/guard/group.rb#25
  def options=(_arg0); end

  # source://guard//lib/guard/group.rb#48
  def title; end

  # source://guard//lib/guard/group.rb#60
  def to_s; end
end

# source://guard//lib/guard/guardfile/evaluator.rb#11
module Guard::Guardfile; end

# source://guard//lib/guard/guardfile/evaluator.rb#18
class Guard::Guardfile::Evaluator
  include ::Guard::Deprecated::Evaluator

  # source://guard//lib/guard/guardfile/evaluator.rb#57
  def initialize(opts = T.unsafe(nil)); end

  # source://guard//lib/guard/guardfile/evaluator.rb#121
  def custom?; end

  # source://guard//lib/guard/guardfile/evaluator.rb#89
  def evaluate; end

  # source://guard//lib/guard/guardfile/evaluator.rb#134
  def guardfile_contents; end

  # source://guard//lib/guard/guardfile/evaluator.rb#113
  def guardfile_include?(plugin_name); end

  # source://guard//lib/guard/guardfile/evaluator.rb#30
  def guardfile_path; end

  # source://guard//lib/guard/guardfile/evaluator.rb#47
  def guardfile_source; end

  # source://guard//lib/guard/guardfile/evaluator.rb#139
  def inline?; end

  # source://guard//lib/guard/guardfile/evaluator.rb#30
  def options; end

  # source://guard//lib/guard/guardfile/evaluator.rb#119
  def path; end

  private

  # source://guard//lib/guard/guardfile/evaluator.rb#156
  def _fetch_guardfile_contents; end

  # source://guard//lib/guard/guardfile/evaluator.rb#223
  def _from_deprecated(opts); end

  # source://guard//lib/guard/guardfile/evaluator.rb#212
  def _guardfile_contents; end

  # source://guard//lib/guard/guardfile/evaluator.rb#219
  def _guardfile_contents_usable?; end

  # source://guard//lib/guard/guardfile/evaluator.rb#145
  def _guardfile_contents_without_user_config; end

  # source://guard//lib/guard/guardfile/evaluator.rb#149
  def _instance_eval_guardfile(contents); end

  # source://guard//lib/guard/guardfile/evaluator.rb#200
  def _read(path); end

  # source://guard//lib/guard/guardfile/evaluator.rb#186
  def _use_default!; end

  # source://guard//lib/guard/guardfile/evaluator.rb#165
  def _use_inline; end

  # source://guard//lib/guard/guardfile/evaluator.rb#178
  def _use_provided; end
end

# source://guard//lib/guard/guardfile/evaluator.rb#21
Guard::Guardfile::Evaluator::DEFAULT_GUARDFILES = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/guardfile/evaluator.rb#27
Guard::Guardfile::Evaluator::ERROR_NO_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/guardfile/evaluator.rb#32
Guard::Guardfile::Evaluator::ERROR_NO_PLUGINS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/guardfile/evaluator.rb#35
class Guard::Guardfile::Evaluator::Error < ::RuntimeError; end

# source://guard//lib/guard/guardfile/evaluator.rb#41
class Guard::Guardfile::Evaluator::NoCustomGuardfile < ::Guard::Guardfile::Evaluator::Error; end

# source://guard//lib/guard/guardfile/evaluator.rb#38
class Guard::Guardfile::Evaluator::NoGuardfileError < ::Guard::Guardfile::Evaluator::Error; end

# source://guard//lib/guard/guardfile/evaluator.rb#44
class Guard::Guardfile::Evaluator::NoPluginsError < ::Guard::Guardfile::Evaluator::Error; end

# source://guard//lib/guard/interactor.rb#4
class Guard::Interactor
  extend ::Forwardable

  # source://guard//lib/guard/interactor.rb#9
  def initialize(no_interaction = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def background(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def foreground(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def handle_interrupt(*args, &block); end

  # source://guard//lib/guard/interactor.rb#20
  def interactive?; end

  private

  # source://guard//lib/guard/interactor.rb#51
  def idle_job; end

  class << self
    # source://guard//lib/guard/interactor.rb#39
    def enabled; end

    # source://guard//lib/guard/interactor.rb#46
    def enabled=(_arg0); end

    # source://guard//lib/guard/interactor.rb#39
    def enabled?; end

    # source://guard//lib/guard/interactor.rb#31
    def options; end

    # source://guard//lib/guard/interactor.rb#36
    def options=(_arg0); end
  end
end

# source://guard//lib/guard/internals/groups.rb#5
module Guard::Internals; end

# source://guard//lib/guard/internals/debugging.rb#12
class Guard::Internals::Debugging
  class << self
    # source://guard//lib/guard/internals/debugging.rb#26
    def start; end

    # source://guard//lib/guard/internals/debugging.rb#38
    def stop; end

    private

    # source://guard//lib/guard/internals/debugging.rb#46
    def _notify(*args); end

    # source://guard//lib/guard/internals/debugging.rb#51
    def _reset; end

    # source://guard//lib/guard/internals/debugging.rb#58
    def _trace(mod, meth, &block); end

    # source://guard//lib/guard/internals/debugging.rb#62
    def _untrace(mod, meth); end
  end
end

# source://guard//lib/guard/internals/groups.rb#6
class Guard::Internals::Groups
  # source://guard//lib/guard/internals/groups.rb#9
  def initialize; end

  # source://guard//lib/guard/internals/groups.rb#19
  def add(name, options = T.unsafe(nil)); end

  # source://guard//lib/guard/internals/groups.rb#13
  def all(filter = T.unsafe(nil)); end

  private

  # source://guard//lib/guard/internals/groups.rb#28
  def matcher_for(filter); end
end

# source://guard//lib/guard/internals/groups.rb#7
Guard::Internals::Groups::DEFAULT_GROUPS = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/internals/helpers.rb#4
module Guard::Internals::Helpers
  # source://guard//lib/guard/internals/helpers.rb#5
  def _relative_pathname(path); end
end

# source://guard//lib/guard/internals/plugins.rb#8
class Guard::Internals::Plugins
  # source://guard//lib/guard/internals/plugins.rb#9
  def initialize; end

  # source://guard//lib/guard/internals/plugins.rb#25
  def add(name, options); end

  # source://guard//lib/guard/internals/plugins.rb#13
  def all(filter = T.unsafe(nil)); end

  # source://guard//lib/guard/internals/plugins.rb#19
  def remove(plugin); end

  private

  # source://guard//lib/guard/internals/plugins.rb#31
  def matcher_for(filter); end
end

# source://guard//lib/guard/internals/queue.rb#3
class Guard::Internals::Queue
  # source://guard//lib/guard/internals/queue.rb#4
  def initialize(commander); end

  # source://guard//lib/guard/internals/queue.rb#31
  def <<(changes); end

  # source://guard//lib/guard/internals/queue.rb#27
  def pending?; end

  # source://guard//lib/guard/internals/queue.rb#10
  def process; end

  private

  # source://guard//lib/guard/internals/queue.rb#37
  def _run_actions(actions); end
end

# source://guard//lib/guard/internals/scope.rb#6
class Guard::Internals::Scope
  # source://guard//lib/guard/internals/scope.rb#7
  def initialize; end

  # source://guard//lib/guard/internals/scope.rb#51
  def from_interactor(scope); end

  # source://guard//lib/guard/internals/scope.rb#20
  def grouped_plugins(scope = T.unsafe(nil)); end

  # source://guard//lib/guard/internals/scope.rb#56
  def titles(scope = T.unsafe(nil)); end

  # source://guard//lib/guard/internals/scope.rb#12
  def to_hash; end

  private

  # source://guard//lib/guard/internals/scope.rb#108
  def _find_non_empty_scope(type, local_scope); end

  # source://guard//lib/guard/internals/scope.rb#112
  def _groups; end

  # source://guard//lib/guard/internals/scope.rb#77
  def _hashify_scope(type); end

  # source://guard//lib/guard/internals/scope.rb#102
  def _instantiate(meth, obj); end

  # source://guard//lib/guard/internals/scope.rb#116
  def _plugins; end

  # source://guard//lib/guard/internals/scope.rb#68
  def _scope_names(new_scope, name); end
end

# source://guard//lib/guard/internals/session.rb#11
class Guard::Internals::Session
  # source://guard//lib/guard/internals/session.rb#51
  def initialize(new_options); end

  # source://guard//lib/guard/internals/session.rb#102
  def clear?; end

  # source://guard//lib/guard/internals/session.rb#98
  def clearing(on); end

  # source://guard//lib/guard/internals/session.rb#102
  def clearing?; end

  # source://guard//lib/guard/internals/session.rb#43
  def cmdline_groups; end

  # source://guard//lib/guard/internals/session.rb#47
  def cmdline_plugins; end

  # source://guard//lib/guard/internals/session.rb#162
  def convert_scope(entries); end

  # source://guard//lib/guard/internals/session.rb#108
  def debug?; end

  # source://guard//lib/guard/internals/session.rb#136
  def evaluator_options; end

  # source://guard//lib/guard/internals/session.rb#13
  def groups; end

  # source://guard//lib/guard/internals/session.rb#89
  def guardfile_group_scope; end

  # source://guard//lib/guard/internals/session.rb#93
  def guardfile_ignore; end

  # source://guard//lib/guard/internals/session.rb#94
  def guardfile_ignore=(ignores); end

  # source://guard//lib/guard/internals/session.rb#91
  def guardfile_ignore_bang; end

  # source://guard//lib/guard/internals/session.rb#91
  def guardfile_ignore_bang=(_arg0); end

  # source://guard//lib/guard/internals/session.rb#155
  def guardfile_notification=(config); end

  # source://guard//lib/guard/internals/session.rb#90
  def guardfile_plugin_scope; end

  # source://guard//lib/guard/internals/session.rb#74
  def guardfile_scope(scope); end

  # source://guard//lib/guard/internals/session.rb#159
  def interactor_name; end

  # source://guard//lib/guard/internals/session.rb#123
  def listener_args; end

  # source://guard//lib/guard/internals/session.rb#145
  def notify_options; end

  # source://guard//lib/guard/internals/session.rb#12
  def plugins; end

  # source://guard//lib/guard/internals/session.rb#112
  def watchdirs; end

  # source://guard//lib/guard/internals/session.rb#118
  def watchdirs=(dirs); end
end

# source://guard//lib/guard/internals/session.rb#15
Guard::Internals::Session::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://guard//lib/guard/internals/state.rb#10
class Guard::Internals::State
  # source://guard//lib/guard/internals/state.rb#12
  def initialize(cmdline_opts); end

  # source://guard//lib/guard/internals/state.rb#21
  def scope; end

  # source://guard//lib/guard/internals/state.rb#22
  def session; end
end

# source://guard//lib/guard/internals/tracing.rb#3
module Guard::Internals::Tracing
  class << self
    # source://guard//lib/guard/internals/tracing.rb#4
    def trace(mod, meth); end

    # source://guard//lib/guard/internals/tracing.rb#19
    def untrace(mod, meth); end
  end
end

# source://guard//lib/guard/internals/traps.rb#3
module Guard::Internals::Traps
  class << self
    # source://guard//lib/guard/internals/traps.rb#4
    def handle(signal, &block); end
  end
end

# source://guard//lib/guard/notifier.rb#5
class Guard::Notifier
  class << self
    # source://guard//lib/guard/notifier.rb#6
    def connect(options = T.unsafe(nil)); end

    # source://guard//lib/guard/notifier.rb#65
    def detected; end

    # source://guard//lib/guard/notifier.rb#18
    def disconnect; end

    # source://guard//lib/guard/notifier.rb#27
    def notify(message, options = T.unsafe(nil)); end

    # source://guard//lib/guard/notifier.rb#60
    def supported; end

    # source://guard//lib/guard/notifier.rb#44
    def toggle; end

    # source://guard//lib/guard/notifier.rb#40
    def turn_on; end
  end
end

# source://guard//lib/guard/notifier.rb#23
Guard::Notifier::DEPRECATED_IMPLICIT_CONNECT = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/options.rb#12
class Guard::Options < ::Thor::CoreExt::HashWithIndifferentAccess
  # source://guard//lib/guard/options.rb#13
  def initialize(opts = T.unsafe(nil), default_opts = T.unsafe(nil)); end

  # source://guard//lib/guard/options.rb#18
  def fetch(name); end
end

# source://guard//lib/guard/plugin.rb#44
class Guard::Plugin
  # source://guard//lib/guard/plugin.rb#285
  def initialize(options = T.unsafe(nil)); end

  # source://guard//lib/guard/plugin.rb#129
  def callbacks; end

  # source://guard//lib/guard/plugin.rb#129
  def callbacks=(_arg0); end

  # source://guard//lib/guard/plugin.rb#129
  def group; end

  # source://guard//lib/guard/plugin.rb#129
  def group=(_arg0); end

  # source://guard//lib/guard/plugin.rb#116
  def hook(event, *args); end

  # source://guard//lib/guard/plugin.rb#240
  def name; end

  # source://guard//lib/guard/plugin.rb#129
  def options; end

  # source://guard//lib/guard/plugin.rb#129
  def options=(_arg0); end

  # source://guard//lib/guard/plugin.rb#252
  def title; end

  # source://guard//lib/guard/plugin.rb#267
  def to_s; end

  # source://guard//lib/guard/plugin.rb#129
  def watchers; end

  # source://guard//lib/guard/plugin.rb#129
  def watchers=(_arg0); end

  private

  # source://guard//lib/guard/plugin.rb#297
  def _register_callbacks; end

  class << self
    # source://guard//lib/guard/plugin.rb#62
    def add_callback(listener, guard_plugin, events); end

    # source://guard//lib/guard/plugin.rb#52
    def callbacks; end

    # source://guard//lib/guard/plugin.rb#140
    def non_namespaced_classname; end

    # source://guard//lib/guard/plugin.rb#153
    def non_namespaced_name; end

    # source://guard//lib/guard/plugin.rb#74
    def notify(guard_plugin, event, *args); end

    # source://guard//lib/guard/plugin.rb#83
    def reset_callbacks!; end

    # source://guard//lib/guard/plugin.rb#162
    def template(plugin_location); end
  end
end

# source://guard//lib/guard/plugin.rb#45
Guard::Plugin::TEMPLATE_FORMAT = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/plugin_util.rb#11
class Guard::PluginUtil
  # source://guard//lib/guard/plugin_util.rb#36
  def initialize(name); end

  # source://guard//lib/guard/plugin_util.rb#126
  def add_to_guardfile; end

  # source://guard//lib/guard/plugin_util.rb#55
  def initialize_plugin(options); end

  # source://guard//lib/guard/plugin_util.rb#18
  def name; end

  # source://guard//lib/guard/plugin_util.rb#18
  def name=(_arg0); end

  # source://guard//lib/guard/plugin_util.rb#96
  def plugin_class(options = T.unsafe(nil)); end

  # source://guard//lib/guard/plugin_util.rb#73
  def plugin_location; end

  private

  # source://guard//lib/guard/plugin_util.rb#172
  def _constant_name; end

  # source://guard//lib/guard/plugin_util.rb#177
  def _full_gem_path(name); end

  # source://guard//lib/guard/plugin_util.rb#160
  def _plugin_constant; end

  class << self
    # source://guard//lib/guard/plugin_util.rb#182
    def _gem_valid?(gem); end

    # source://guard//lib/guard/plugin_util.rb#24
    def plugin_names; end
  end
end

# source://guard//lib/guard/plugin_util.rb#12
Guard::PluginUtil::ERROR_NO_GUARD_OR_CLASS = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/plugin_util.rb#15
Guard::PluginUtil::INFO_ADDED_GUARD_TO_GUARDFILE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/runner.rb#9
class Guard::Runner
  # source://guard//lib/guard/runner.rb#78
  def _supervise(plugin, task, *args); end

  # source://guard//lib/guard/runner.rb#17
  def run(task, scope_hash = T.unsafe(nil)); end

  # source://guard//lib/guard/runner.rb#44
  def run_on_changes(modified, added, removed); end

  private

  # source://guard//lib/guard/runner.rb#116
  def _run_group_plugins(plugins); end

  class << self
    # source://guard//lib/guard/runner.rb#110
    def stopping_symbol_for(guard); end
  end
end

# source://guard//lib/guard/runner.rb#34
Guard::Runner::ADDITION_TASKS = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/runner.rb#30
Guard::Runner::MODIFICATION_TASKS = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/runner.rb#28
Guard::Runner::PLUGIN_FAILED = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/runner.rb#35
Guard::Runner::REMOVAL_TASKS = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/terminal.rb#4
class Guard::Terminal
  class << self
    # source://guard//lib/guard/terminal.rb#6
    def clear; end
  end
end

# source://guard//lib/guard/ui/colors.rb#2
module Guard::UI
  include ::Guard::UI::Colors

  class << self
    # source://guard//lib/guard/ui.rb#161
    def action_with_scopes(action, scope); end

    # source://guard//lib/guard/ui.rb#131
    def clear(opts = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#152
    def clearable; end

    # source://guard//lib/guard/ui.rb#119
    def debug(message, options = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#105
    def deprecation(message, options = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#94
    def error(message, options = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#74
    def info(message, options = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#63
    def level=(new_level); end

    # source://guard//lib/guard/ui.rb#26
    def logger; end

    # source://guard//lib/guard/ui.rb#46
    def options; end

    # source://guard//lib/guard/ui.rb#58
    def options=(options); end

    # source://guard//lib/guard/ui.rb#145
    def reset_and_clear; end

    # source://guard//lib/guard/ui.rb#125
    def reset_line; end

    # source://guard//lib/guard/ui.rb#38
    def reset_logger; end

    # source://guard//lib/guard/ui.rb#84
    def warning(message, options = T.unsafe(nil)); end

    private

    # source://guard//lib/guard/ui.rb#203
    def _calling_plugin_name; end

    # source://guard//lib/guard/ui.rb#175
    def _filter(plugin); end

    # source://guard//lib/guard/ui.rb#188
    def _filtered_logger_message(message, method, color_name, options = T.unsafe(nil)); end

    # source://guard//lib/guard/ui.rb#247
    def color(text, *color_options); end

    # source://guard//lib/guard/ui.rb#217
    def color_enabled?; end
  end
end

# source://guard//lib/guard/ui/colors.rb#3
module Guard::UI::Colors; end

# source://guard//lib/guard/ui/colors.rb#32
Guard::UI::Colors::ANSI_ESCAPE_BGBLACK = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#44
Guard::UI::Colors::ANSI_ESCAPE_BGBLUE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#50
Guard::UI::Colors::ANSI_ESCAPE_BGCYAN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#38
Guard::UI::Colors::ANSI_ESCAPE_BGGREEN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#47
Guard::UI::Colors::ANSI_ESCAPE_BGMAGENTA = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#35
Guard::UI::Colors::ANSI_ESCAPE_BGRED = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#53
Guard::UI::Colors::ANSI_ESCAPE_BGWHITE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#41
Guard::UI::Colors::ANSI_ESCAPE_BGYELLOW = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#8
Guard::UI::Colors::ANSI_ESCAPE_BLACK = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#20
Guard::UI::Colors::ANSI_ESCAPE_BLUE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#5
Guard::UI::Colors::ANSI_ESCAPE_BRIGHT = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#26
Guard::UI::Colors::ANSI_ESCAPE_CYAN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#14
Guard::UI::Colors::ANSI_ESCAPE_GREEN = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#23
Guard::UI::Colors::ANSI_ESCAPE_MAGENTA = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#11
Guard::UI::Colors::ANSI_ESCAPE_RED = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#29
Guard::UI::Colors::ANSI_ESCAPE_WHITE = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/colors.rb#17
Guard::UI::Colors::ANSI_ESCAPE_YELLOW = T.let(T.unsafe(nil), String)

# source://guard//lib/guard/ui/config.rb#6
class Guard::UI::Config < ::Guard::Options
  # source://guard//lib/guard/ui/config.rb#20
  def initialize(options = T.unsafe(nil)); end

  # source://guard//lib/guard/ui/config.rb#48
  def [](name); end

  # source://guard//lib/guard/ui/config.rb#35
  def device; end

  # source://guard//lib/guard/ui/config.rb#44
  def except; end

  # source://guard//lib/guard/ui/config.rb#18
  def logger_config; end

  # source://guard//lib/guard/ui/config.rb#40
  def only; end

  # source://guard//lib/guard/ui/config.rb#59
  def with_progname(name); end
end

# source://guard//lib/guard/ui/config.rb#7
Guard::UI::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://guard//lib/guard/ui/config.rb#16
Guard::UI::Config::DEPRECATED_OPTS = T.let(T.unsafe(nil), Array)

# source://guard//lib/guard/ui/logger.rb#5
class Guard::UI::Logger; end

# source://guard//lib/guard/ui/logger.rb#6
class Guard::UI::Logger::Config < ::Guard::Options
  # source://guard//lib/guard/ui/logger.rb#20
  def initialize(options = T.unsafe(nil)); end

  # source://guard//lib/guard/ui/logger.rb#24
  def level=(value); end
end

# source://guard//lib/guard/ui/logger.rb#7
Guard::UI::Logger::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://guard//lib/guard/watcher/pattern/match_result.rb#2
class Guard::Watcher
  extend ::Guard::Deprecated::Watcher::ClassMethods

  # source://guard//lib/guard/watcher.rb#24
  def initialize(pattern, action = T.unsafe(nil)); end

  # source://guard//lib/guard/watcher.rb#32
  def ==(other); end

  # source://guard//lib/guard/watcher.rb#15
  def action; end

  # source://guard//lib/guard/watcher.rb#15
  def action=(_arg0); end

  # source://guard//lib/guard/watcher.rb#81
  def call_action(matches); end

  # source://guard//lib/guard/watcher.rb#70
  def match(string_or_pathname); end

  # source://guard//lib/guard/watcher.rb#15
  def pattern; end

  # source://guard//lib/guard/watcher.rb#15
  def pattern=(_arg0); end

  class << self
    # source://guard//lib/guard/watcher.rb#42
    def match_files(guard, files); end
  end
end

# source://guard//lib/guard/watcher/pattern/match_result.rb#3
class Guard::Watcher::Pattern
  class << self
    # source://guard//lib/guard/watcher/pattern.rb#12
    def create(pattern); end
  end
end

# source://guard//lib/guard/watcher/pattern/deprecated_regexp.rb#7
class Guard::Watcher::Pattern::DeprecatedRegexp
  # source://guard//lib/guard/watcher/pattern/deprecated_regexp.rb#8
  def initialize(pattern); end

  # source://guard//lib/guard/watcher/pattern/deprecated_regexp.rb#16
  def deprecated?; end

  class << self
    # source://guard//lib/guard/watcher/pattern/deprecated_regexp.rb#12
    def convert(pattern); end

    # source://guard//lib/guard/watcher/pattern/deprecated_regexp.rb#21
    def show_deprecation(pattern); end
  end
end

# source://guard//lib/guard/watcher/pattern/match_result.rb#4
class Guard::Watcher::Pattern::MatchResult
  # source://guard//lib/guard/watcher/pattern/match_result.rb#5
  def initialize(match_result, original_value); end

  # source://guard//lib/guard/watcher/pattern/match_result.rb#10
  def [](index); end
end

# source://guard//lib/guard/watcher/pattern/matcher.rb#4
class Guard::Watcher::Pattern::Matcher
  # source://guard//lib/guard/watcher/pattern/matcher.rb#7
  def initialize(obj); end

  # source://guard//lib/guard/watcher/pattern/matcher.rb#15
  def ==(other); end

  # source://guard//lib/guard/watcher/pattern/matcher.rb#19
  def match(string_or_pathname); end

  # source://guard//lib/guard/watcher/pattern/matcher.rb#5
  def matcher; end

  private

  # source://guard//lib/guard/watcher/pattern/matcher.rb#25
  def normalized(string_or_pathname); end
end

# source://guard//lib/guard/watcher/pattern/pathname_path.rb#6
class Guard::Watcher::Pattern::PathnamePath < ::Guard::Watcher::Pattern::SimplePath
  protected

  # source://guard//lib/guard/watcher/pattern/pathname_path.rb#9
  def normalize(string_or_pathname); end
end

# source://guard//lib/guard/watcher/pattern/simple_path.rb#4
class Guard::Watcher::Pattern::SimplePath
  # source://guard//lib/guard/watcher/pattern/simple_path.rb#5
  def initialize(string_or_pathname); end

  # source://guard//lib/guard/watcher/pattern/simple_path.rb#9
  def match(string_or_pathname); end

  protected

  # source://guard//lib/guard/watcher/pattern/simple_path.rb#17
  def normalize(string_or_pathname); end
end
