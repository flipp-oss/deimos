# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activemodel` gem.
# Please instead update this file by running `bin/tapioca gem activemodel`.

# source://activemodel//lib/active_model/gem_version.rb#3
module ActiveModel
  extend ::ActiveSupport::Autoload

  class << self
    # source://activemodel//lib/active_model.rb#70
    def eager_load!; end

    # source://activemodel//lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel//lib/active_model/version.rb#7
    def version; end
  end
end

# source://activemodel//lib/active_model/attribute.rb#6
class ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#33
  def initialize(name, value_before_type_cast, type, original_attribute = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute.rb#108
  def ==(other); end

  # source://activemodel//lib/active_model/attribute.rb#100
  def came_from_user?; end

  # source://activemodel//lib/active_model/attribute.rb#59
  def changed?; end

  # source://activemodel//lib/active_model/attribute.rb#63
  def changed_in_place?; end

  # source://activemodel//lib/active_model/attribute.rb#128
  def encode_with(coder); end

  # source://activemodel//lib/active_model/attribute.rb#108
  def eql?(other); end

  # source://activemodel//lib/active_model/attribute.rb#67
  def forgetting_assignment; end

  # source://activemodel//lib/active_model/attribute.rb#104
  def has_been_read?; end

  # source://activemodel//lib/active_model/attribute.rb#116
  def hash; end

  # source://activemodel//lib/active_model/attribute.rb#120
  def init_with(coder); end

  # source://activemodel//lib/active_model/attribute.rb#96
  def initialized?; end

  # source://activemodel//lib/active_model/attribute.rb#29
  def name; end

  # source://activemodel//lib/active_model/attribute.rb#47
  def original_value; end

  # source://activemodel//lib/active_model/attribute.rb#136
  def original_value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#29
  def type; end

  # source://activemodel//lib/active_model/attribute.rb#92
  def type_cast(*_arg0); end

  # source://activemodel//lib/active_model/attribute.rb#41
  def value; end

  # source://activemodel//lib/active_model/attribute.rb#29
  def value_before_type_cast; end

  # source://activemodel//lib/active_model/attribute.rb#55
  def value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#80
  def with_cast_value(value); end

  # source://activemodel//lib/active_model/attribute.rb#84
  def with_type(type); end

  # source://activemodel//lib/active_model/attribute.rb#76
  def with_value_from_database(value); end

  # source://activemodel//lib/active_model/attribute.rb#71
  def with_value_from_user(value); end

  private

  # source://activemodel//lib/active_model/attribute.rb#158
  def _original_value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#145
  def assigned?; end

  # source://activemodel//lib/active_model/attribute.rb#154
  def changed_from_assignment?; end

  # source://activemodel//lib/active_model/attribute.rb#148
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/attribute.rb#145
  def original_attribute; end

  class << self
    # source://activemodel//lib/active_model/attribute.rb#8
    def from_database(name, value_before_type_cast, type, value = T.unsafe(nil)); end

    # source://activemodel//lib/active_model/attribute.rb#12
    def from_user(name, value_before_type_cast, type, original_attribute = T.unsafe(nil)); end

    # source://activemodel//lib/active_model/attribute.rb#20
    def null(name); end

    # source://activemodel//lib/active_model/attribute.rb#24
    def uninitialized(name, type); end

    # source://activemodel//lib/active_model/attribute.rb#16
    def with_cast_value(name, value_before_type_cast, type); end
  end
end

# source://activemodel//lib/active_model/attribute.rb#162
class ActiveModel::Attribute::FromDatabase < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#163
  def type_cast(value); end

  private

  # source://activemodel//lib/active_model/attribute.rb#168
  def _original_value_for_database; end
end

# source://activemodel//lib/active_model/attribute.rb#173
class ActiveModel::Attribute::FromUser < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#178
  def came_from_user?; end

  # source://activemodel//lib/active_model/attribute.rb#174
  def type_cast(value); end
end

# source://activemodel//lib/active_model/attribute.rb#193
class ActiveModel::Attribute::Null < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#194
  def initialize(name); end

  # source://activemodel//lib/active_model/attribute.rb#198
  def type_cast(*_arg0); end

  # source://activemodel//lib/active_model/attribute.rb#206
  def with_cast_value(value); end

  # source://activemodel//lib/active_model/attribute.rb#202
  def with_type(type); end

  # source://activemodel//lib/active_model/attribute.rb#206
  def with_value_from_database(value); end

  # source://activemodel//lib/active_model/attribute.rb#206
  def with_value_from_user(value); end
end

# source://activemodel//lib/active_model/attribute.rb#213
class ActiveModel::Attribute::Uninitialized < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#216
  def initialize(name, type); end

  # source://activemodel//lib/active_model/attribute.rb#237
  def forgetting_assignment; end

  # source://activemodel//lib/active_model/attribute.rb#233
  def initialized?; end

  # source://activemodel//lib/active_model/attribute.rb#226
  def original_value; end

  # source://activemodel//lib/active_model/attribute.rb#220
  def value; end

  # source://activemodel//lib/active_model/attribute.rb#230
  def value_for_database; end

  # source://activemodel//lib/active_model/attribute.rb#241
  def with_type(type); end
end

# source://activemodel//lib/active_model/attribute.rb#214
ActiveModel::Attribute::Uninitialized::UNINITIALIZED_ORIGINAL_VALUE = T.let(T.unsafe(nil), Object)

# source://activemodel//lib/active_model/attribute/user_provided_default.rb#7
class ActiveModel::Attribute::UserProvidedDefault < ::ActiveModel::Attribute::FromUser
  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#8
  def initialize(name, value, type, database_default); end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#25
  def marshal_dump; end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#36
  def marshal_load(values); end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#13
  def value_before_type_cast; end

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#21
  def with_type(type); end

  private

  # source://activemodel//lib/active_model/attribute/user_provided_default.rb#48
  def user_provided_value; end
end

# source://activemodel//lib/active_model/attribute.rb#183
class ActiveModel::Attribute::WithCastValue < ::ActiveModel::Attribute
  # source://activemodel//lib/active_model/attribute.rb#188
  def changed_in_place?; end

  # source://activemodel//lib/active_model/attribute.rb#184
  def type_cast(value); end
end

# source://activemodel//lib/active_model/attribute_assignment.rb#6
module ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection

  # source://activemodel//lib/active_model/attribute_assignment.rb#28
  def assign_attributes(new_attributes); end

  # source://activemodel//lib/active_model/attribute_assignment.rb#28
  def attributes=(new_attributes); end

  private

  # source://activemodel//lib/active_model/attribute_assignment.rb#46
  def _assign_attribute(k, v); end

  # source://activemodel//lib/active_model/attribute_assignment.rb#40
  def _assign_attributes(attributes); end
end

# source://activemodel//lib/active_model/attribute_methods.rb#65
module ActiveModel::AttributeMethods
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel//lib/active_model/attribute_methods.rb#478
  def attribute_missing(match, *args, &block); end

  # source://activemodel//lib/active_model/attribute_methods.rb#464
  def method_missing(method, *args, &block); end

  # source://activemodel//lib/active_model/attribute_methods.rb#486
  def respond_to?(method, include_private_methods = T.unsafe(nil)); end

  def respond_to_without_attributes?(*_arg0); end

  private

  # source://activemodel//lib/active_model/attribute_methods.rb#514
  def _read_attribute(attr); end

  # source://activemodel//lib/active_model/attribute_methods.rb#499
  def attribute_method?(attr_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#505
  def matched_attribute_method(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#510
  def missing_attribute(attr_name, stack); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#518
module ActiveModel::AttributeMethods::AttrNames
  class << self
    # source://activemodel//lib/active_model/attribute_methods.rb#539
    def define_attribute_accessor_method(owner, attr_name, writer: T.unsafe(nil)); end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#519
ActiveModel::AttributeMethods::AttrNames::DEF_SAFE_NAME = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_methods.rb#69
ActiveModel::AttributeMethods::CALL_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_methods.rb#76
module ActiveModel::AttributeMethods::ClassMethods
  # source://activemodel//lib/active_model/attribute_methods.rb#208
  def alias_attribute(new_name, old_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#225
  def attribute_alias(name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#220
  def attribute_alias?(new_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#179
  def attribute_method_affix(*affixes); end

  # source://activemodel//lib/active_model/attribute_methods.rb#108
  def attribute_method_prefix(*prefixes); end

  # source://activemodel//lib/active_model/attribute_methods.rb#143
  def attribute_method_suffix(*suffixes); end

  # source://activemodel//lib/active_model/attribute_methods.rb#288
  def define_attribute_method(attr_name, _owner: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#253
  def define_attribute_methods(*attr_names); end

  # source://activemodel//lib/active_model/attribute_methods.rb#330
  def undefine_attribute_methods; end

  private

  # source://activemodel//lib/active_model/attribute_methods.rb#395
  def attribute_method_matchers_cache; end

  # source://activemodel//lib/active_model/attribute_methods.rb#399
  def attribute_method_matchers_matching(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#408
  def define_proxy_call(include_private, code_generator, name, target, *extra); end

  # source://activemodel//lib/active_model/attribute_methods.rb#378
  def generated_attribute_methods; end

  # source://activemodel//lib/active_model/attribute_methods.rb#382
  def instance_method_already_implemented?(method_name); end
end

# source://activemodel//lib/active_model/attribute_methods.rb#430
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher
  # source://activemodel//lib/active_model/attribute_methods.rb#435
  def initialize(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_methods.rb#442
  def match(method_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#448
  def method_name(attr_name); end

  # source://activemodel//lib/active_model/attribute_methods.rb#431
  def prefix; end

  # source://activemodel//lib/active_model/attribute_methods.rb#431
  def suffix; end

  # source://activemodel//lib/active_model/attribute_methods.rb#431
  def target; end
end

# source://activemodel//lib/active_model/attribute_methods.rb#433
class ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher::AttributeMethodMatch < ::Struct
  def attr_name; end

  # source://activemodel//lib/active_model/attribute_methods.rb#433
  def attr_name=(_); end

  def target; end

  # source://activemodel//lib/active_model/attribute_methods.rb#433
  def target=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#338
class ActiveModel::AttributeMethods::ClassMethods::CodeGenerator
  # source://activemodel//lib/active_model/attribute_methods.rb#352
  def initialize(owner, path, line); end

  # source://activemodel//lib/active_model/attribute_methods.rb#360
  def <<(source_line); end

  # source://activemodel//lib/active_model/attribute_methods.rb#368
  def execute; end

  # source://activemodel//lib/active_model/attribute_methods.rb#364
  def rename_method(old_name, new_name); end

  class << self
    # source://activemodel//lib/active_model/attribute_methods.rb#340
    def batch(owner, path, line); end
  end
end

# source://activemodel//lib/active_model/attribute_methods.rb#68
ActiveModel::AttributeMethods::NAME_COMPILABLE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#7
class ActiveModel::AttributeMutationTracker
  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#10
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#40
  def any_changes?; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#34
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#44
  def changed?(attr_name, from: T.unsafe(nil), to: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#14
  def changed_attribute_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#50
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#18
  def changed_values; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#26
  def changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#63
  def force_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#54
  def forget_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#59
  def original_value(attr_name); end

  private

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#74
  def attr_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#78
  def attribute_changed?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#68
  def attributes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#82
  def fetch_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#70
  def forced_changes; end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#8
ActiveModel::AttributeMutationTracker::OPTION_NOT_GIVEN = T.let(T.unsafe(nil), Object)

# source://activemodel//lib/active_model/attribute_set/builder.rb#6
class ActiveModel::AttributeSet
  # source://activemodel//lib/active_model/attribute_set.rb#12
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_set.rb#94
  def ==(other); end

  # source://activemodel//lib/active_model/attribute_set.rb#16
  def [](name); end

  # source://activemodel//lib/active_model/attribute_set.rb#20
  def []=(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#85
  def accessed; end

  # source://activemodel//lib/active_model/attribute_set.rb#65
  def deep_dup; end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def each_value(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def except(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set.rb#10
  def fetch(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set.rb#41
  def fetch_value(name, &block); end

  # source://activemodel//lib/active_model/attribute_set.rb#60
  def freeze; end

  # source://activemodel//lib/active_model/attribute_set.rb#33
  def key?(name); end

  # source://activemodel//lib/active_model/attribute_set.rb#37
  def keys; end

  # source://activemodel//lib/active_model/attribute_set.rb#89
  def map(&block); end

  # source://activemodel//lib/active_model/attribute_set.rb#79
  def reset(key); end

  # source://activemodel//lib/active_model/attribute_set.rb#28
  def to_h; end

  # source://activemodel//lib/active_model/attribute_set.rb#28
  def to_hash; end

  # source://activemodel//lib/active_model/attribute_set.rb#24
  def values_before_type_cast; end

  # source://activemodel//lib/active_model/attribute_set.rb#55
  def write_cast_value(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#45
  def write_from_database(name, value); end

  # source://activemodel//lib/active_model/attribute_set.rb#49
  def write_from_user(name, value); end

  protected

  # source://activemodel//lib/active_model/attribute_set.rb#99
  def attributes; end

  private

  # source://activemodel//lib/active_model/attribute_set.rb#102
  def default_attribute(name); end

  # source://activemodel//lib/active_model/attribute_set.rb#74
  def initialize_clone(_); end

  # source://activemodel//lib/active_model/attribute_set.rb#69
  def initialize_dup(_); end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#7
class ActiveModel::AttributeSet::Builder
  # source://activemodel//lib/active_model/attribute_set/builder.rb#10
  def initialize(types, default_attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#15
  def build_from_database(values = T.unsafe(nil), additional_types = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#8
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#8
  def types; end
end

# source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#7
class ActiveModel::AttributeSet::YAMLEncoder
  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#8
  def initialize(default_types); end

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#22
  def decode(coder); end

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#12
  def encode(attribute_set, coder); end

  private

  # source://activemodel//lib/active_model/attribute_set/yaml_encoder.rb#37
  def default_types; end
end

# source://activemodel//lib/active_model/attributes.rb#7
module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveModel::Attributes::ClassMethods

  # source://activemodel//lib/active_model/attributes.rb#75
  def initialize(*_arg0); end

  # source://activemodel//lib/active_model/attributes.rb#113
  def attribute_names; end

  # source://activemodel//lib/active_model/attributes.rb#97
  def attributes; end

  # source://activemodel//lib/active_model/attributes.rb#117
  def freeze; end

  private

  # source://activemodel//lib/active_model/attributes.rb#123
  def _write_attribute(attr_name, value); end

  # source://activemodel//lib/active_model/attributes.rb#128
  def attribute(attr_name); end

  # source://activemodel//lib/active_model/attributes.rb#123
  def attribute=(attr_name, value); end

  # source://activemodel//lib/active_model/attributes.rb#80
  def initialize_dup(other); end

  module GeneratedClassMethods
    def _default_attributes; end
    def _default_attributes=(value); end
    def _default_attributes?; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attribute_types; end
    def attribute_types=(value); end
    def attribute_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

# source://activemodel//lib/active_model/attributes.rb#18
module ActiveModel::Attributes::ClassMethods
  # source://activemodel//lib/active_model/attributes.rb#19
  def attribute(name, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/attributes.rb#40
  def attribute_names; end

  private

  # source://activemodel//lib/active_model/attributes.rb#59
  def define_default_attribute(name, value, type); end

  # source://activemodel//lib/active_model/attributes.rb#45
  def define_method_attribute=(name, owner:); end
end

# source://activemodel//lib/active_model/attributes.rb#56
ActiveModel::Attributes::ClassMethods::NO_DEFAULT_PROVIDED = T.let(T.unsafe(nil), Object)

# source://activemodel//lib/active_model/validator.rb#177
class ActiveModel::BlockValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validator.rb#178
  def initialize(options, &block); end

  private

  # source://activemodel//lib/active_model/validator.rb#184
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/callbacks.rb#65
module ActiveModel::Callbacks
  # source://activemodel//lib/active_model/callbacks.rb#109
  def define_model_callbacks(*callbacks); end

  private

  # source://activemodel//lib/active_model/callbacks.rb#143
  def _define_after_model_callback(klass, callback); end

  # source://activemodel//lib/active_model/callbacks.rb#136
  def _define_around_model_callback(klass, callback); end

  # source://activemodel//lib/active_model/callbacks.rb#129
  def _define_before_model_callback(klass, callback); end

  class << self
    # source://activemodel//lib/active_model/callbacks.rb#66
    def extended(base); end
  end
end

# source://activemodel//lib/active_model/conversion.rb#24
module ActiveModel::Conversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel//lib/active_model/conversion.rb#59
  def to_key; end

  # source://activemodel//lib/active_model/conversion.rb#41
  def to_model; end

  # source://activemodel//lib/active_model/conversion.rb#82
  def to_param; end

  # source://activemodel//lib/active_model/conversion.rb#95
  def to_partial_path; end
end

# source://activemodel//lib/active_model/conversion.rb#99
module ActiveModel::Conversion::ClassMethods
  # source://activemodel//lib/active_model/conversion.rb#102
  def _to_partial_path; end
end

# source://activemodel//lib/active_model/errors.rb#660
class ActiveModel::DeprecationHandlingDetailsHash < ::SimpleDelegator
  # source://activemodel//lib/active_model/errors.rb#661
  def initialize(details); end
end

# source://activemodel//lib/active_model/errors.rb#638
class ActiveModel::DeprecationHandlingMessageArray < ::SimpleDelegator
  # source://activemodel//lib/active_model/errors.rb#639
  def initialize(content, errors, attribute); end

  # source://activemodel//lib/active_model/errors.rb#645
  def <<(message); end

  # source://activemodel//lib/active_model/errors.rb#653
  def clear; end
end

# source://activemodel//lib/active_model/errors.rb#599
class ActiveModel::DeprecationHandlingMessageHash < ::SimpleDelegator
  # source://activemodel//lib/active_model/errors.rb#600
  def initialize(errors); end

  # source://activemodel//lib/active_model/errors.rb#605
  def []=(attribute, value); end

  # source://activemodel//lib/active_model/errors.rb#616
  def delete(attribute); end

  private

  # source://activemodel//lib/active_model/errors.rb#623
  def prepare_content; end
end

# source://activemodel//lib/active_model/dirty.rb#121
module ActiveModel::Dirty
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods

  # source://activemodel//lib/active_model/dirty.rb#142
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/dirty.rb#177
  def attribute_changed?(attr_name, **options); end

  # source://activemodel//lib/active_model/dirty.rb#244
  def attribute_changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#187
  def attribute_previously_changed?(attr_name, **options); end

  # source://activemodel//lib/active_model/dirty.rb#192
  def attribute_previously_was(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#182
  def attribute_was(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#172
  def changed; end

  # source://activemodel//lib/active_model/dirty.rb#163
  def changed?; end

  # source://activemodel//lib/active_model/dirty.rb#220
  def changed_attributes; end

  # source://activemodel//lib/active_model/dirty.rb#230
  def changes; end

  # source://activemodel//lib/active_model/dirty.rb#149
  def changes_applied; end

  # source://activemodel//lib/active_model/dirty.rb#208
  def clear_attribute_changes(attr_names); end

  # source://activemodel//lib/active_model/dirty.rb#202
  def clear_changes_information; end

  # source://activemodel//lib/active_model/dirty.rb#240
  def previous_changes; end

  # source://activemodel//lib/active_model/dirty.rb#197
  def restore_attributes(attr_names = T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/dirty.rb#270
  def attribute_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#275
  def attribute_previous_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#280
  def attribute_will_change!(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#249
  def clear_attribute_change(attr_name); end

  # source://activemodel//lib/active_model/dirty.rb#261
  def forget_attribute_assignments; end

  # source://activemodel//lib/active_model/dirty.rb#132
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/dirty.rb#265
  def mutations_before_last_save; end

  # source://activemodel//lib/active_model/dirty.rb#253
  def mutations_from_database; end

  # source://activemodel//lib/active_model/dirty.rb#285
  def restore_attribute!(attr_name); end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

# source://activemodel//lib/active_model/validator.rb#132
class ActiveModel::EachValidator < ::ActiveModel::Validator
  # source://activemodel//lib/active_model/validator.rb#138
  def initialize(options); end

  # source://activemodel//lib/active_model/validator.rb#133
  def attributes; end

  # source://activemodel//lib/active_model/validator.rb#166
  def check_validity!; end

  # source://activemodel//lib/active_model/validator.rb#148
  def validate(record); end

  # source://activemodel//lib/active_model/validator.rb#159
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validator.rb#170
  def prepare_value_for_validation(value, record, attr_name); end
end

# source://activemodel//lib/active_model/error.rb#9
class ActiveModel::Error
  # source://activemodel//lib/active_model/error.rb#103
  def initialize(base, attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/error.rb#189
  def ==(other); end

  # source://activemodel//lib/active_model/error.rb#121
  def attribute; end

  # source://activemodel//lib/active_model/error.rb#119
  def base; end

  # source://activemodel//lib/active_model/error.rb#148
  def detail; end

  # source://activemodel//lib/active_model/error.rb#148
  def details; end

  # source://activemodel//lib/active_model/error.rb#189
  def eql?(other); end

  # source://activemodel//lib/active_model/error.rb#158
  def full_message; end

  # source://activemodel//lib/active_model/error.rb#194
  def hash; end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message; end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message=(_arg0); end

  # source://activemodel//lib/active_model/error.rb#13
  def i18n_customize_full_message?; end

  # source://activemodel//lib/active_model/error.rb#198
  def inspect; end

  # source://activemodel//lib/active_model/error.rb#165
  def match?(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/error.rb#134
  def message; end

  # source://activemodel//lib/active_model/error.rb#127
  def options; end

  # source://activemodel//lib/active_model/error.rb#125
  def raw_type; end

  # source://activemodel//lib/active_model/error.rb#183
  def strict_match?(attribute, type, **options); end

  # source://activemodel//lib/active_model/error.rb#123
  def type; end

  protected

  # source://activemodel//lib/active_model/error.rb#203
  def attributes_for_hash; end

  private

  # source://activemodel//lib/active_model/error.rb#111
  def initialize_dup(other); end

  class << self
    # source://activemodel//lib/active_model/error.rb#15
    def full_message(attribute, message, base); end

    # source://activemodel//lib/active_model/error.rb#64
    def generate_message(attribute, type, base, options); end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message; end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message=(value); end

    # source://activemodel//lib/active_model/error.rb#13
    def i18n_customize_full_message?; end
  end
end

# source://activemodel//lib/active_model/error.rb#10
ActiveModel::Error::CALLBACKS_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/error.rb#11
ActiveModel::Error::MESSAGE_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/errors.rb#62
class ActiveModel::Errors
  include ::Enumerable
  extend ::Forwardable

  # source://activemodel//lib/active_model/errors.rb#85
  def initialize(base); end

  # source://activemodel//lib/active_model/errors.rb#207
  def [](attribute); end

  # source://activemodel//lib/active_model/errors.rb#404
  def add(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/errors.rb#434
  def added?(attribute, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def any?(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#310
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#284
  def attribute_names; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def blank?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def clear(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#103
  def copy!(other); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def count(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#193
  def delete(attribute, type = T.unsafe(nil), **options); end

  # source://activemodel//lib/active_model/errors.rb#348
  def details; end

  # source://activemodel//lib/active_model/errors.rb#235
  def each(&block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def empty?(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#75
  def errors; end

  # source://activemodel//lib/active_model/errors.rb#513
  def full_message(attribute, message); end

  # source://activemodel//lib/active_model/errors.rb#477
  def full_messages; end

  # source://activemodel//lib/active_model/errors.rb#492
  def full_messages_for(attribute); end

  # source://activemodel//lib/active_model/errors.rb#541
  def generate_message(attribute, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#359
  def group_by_attribute; end

  # source://activemodel//lib/active_model/errors.rb#180
  def has_key?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#118
  def import(error, override_options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#180
  def include?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#552
  def init_with(coder); end

  # source://activemodel//lib/active_model/errors.rb#180
  def key?(attribute); end

  # source://activemodel//lib/active_model/errors.rb#273
  def keys; end

  # source://activemodel//lib/active_model/errors.rb#545
  def marshal_load(array); end

  # source://activemodel//lib/active_model/errors.rb#135
  def merge!(other); end

  # source://activemodel//lib/active_model/errors.rb#340
  def messages; end

  # source://activemodel//lib/active_model/errors.rb#506
  def messages_for(attribute); end

  # source://activemodel//lib/active_model/errors.rb#75
  def objects; end

  # source://activemodel//lib/active_model/errors.rb#457
  def of_kind?(attribute, type = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def size(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#146
  def slice!(*keys); end

  # source://activemodel//lib/active_model/errors.rb#477
  def to_a; end

  # source://activemodel//lib/active_model/errors.rb#326
  def to_h; end

  # source://activemodel//lib/active_model/errors.rb#319
  def to_hash(full_messages = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#299
  def to_xml(options = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def uniq!(*args, &block); end

  # source://activemodel//lib/active_model/errors.rb#264
  def values; end

  # source://activemodel//lib/active_model/errors.rb#167
  def where(attribute, type = T.unsafe(nil), **options); end

  private

  # source://activemodel//lib/active_model/errors.rb#576
  def add_from_legacy_details_hash(details); end

  # source://activemodel//lib/active_model/errors.rb#585
  def deprecation_removal_warning(method_name, alternative_message = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/errors.rb#594
  def deprecation_rename_warning(old_method_name, new_method_name); end

  # source://activemodel//lib/active_model/errors.rb#90
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/errors.rb#567
  def normalize_arguments(attribute, type, **options); end
end

# source://activemodel//lib/active_model/errors.rb#70
ActiveModel::Errors::LEGACY_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/forbidden_attributes_protection.rb#16
class ActiveModel::ForbiddenAttributesError < ::StandardError; end

# source://activemodel//lib/active_model/forbidden_attributes_protection.rb#19
module ActiveModel::ForbiddenAttributesProtection
  private

  # source://activemodel//lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_for_mass_assignment(attributes); end

  # source://activemodel//lib/active_model/forbidden_attributes_protection.rb#21
  def sanitize_forbidden_attributes(attributes); end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#87
class ActiveModel::ForcedMutationTracker < ::ActiveModel::AttributeMutationTracker
  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#88
  def initialize(attributes); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#97
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#93
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#121
  def finalize_changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#117
  def force_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#105
  def forget_change(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#109
  def original_value(attr_name); end

  private

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#128
  def attr_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#132
  def attribute_changed?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#140
  def clone_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#136
  def fetch_value(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#126
  def finalized_changes; end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#94
class ActiveModel::LazyAttributeHash
  # source://activemodel//lib/active_model/attribute_set/builder.rb#97
  def initialize(types, values, additional_types, default_attributes, delegate_hash = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#134
  def ==(other); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#110
  def [](key); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#114
  def []=(key, value); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#118
  def deep_dup; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#129
  def each_key(&block); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def each_value(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def except(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def fetch(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#106
  def key?(key); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#142
  def marshal_dump; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#146
  def marshal_load(values); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#95
  def transform_values(*_arg0, &_arg1); end

  protected

  # source://activemodel//lib/active_model/attribute_set/builder.rb#160
  def materialize; end

  private

  # source://activemodel//lib/active_model/attribute_set/builder.rb#172
  def additional_types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#174
  def assign_default_value(name); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#172
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#172
  def delegate_hash; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#124
  def initialize_dup(_); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#172
  def types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#172
  def values; end
end

# source://activemodel//lib/active_model/attribute_set/builder.rb#21
class ActiveModel::LazyAttributeSet < ::ActiveModel::AttributeSet
  # source://activemodel//lib/active_model/attribute_set/builder.rb#22
  def initialize(values, types, additional_types, default_attributes, attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#41
  def fetch_value(name, &block); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#32
  def key?(name); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#36
  def keys; end

  protected

  # source://activemodel//lib/active_model/attribute_set/builder.rb#61
  def attributes; end

  private

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def additional_types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#73
  def default_attribute(name, value_present = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def default_attributes; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def types; end

  # source://activemodel//lib/active_model/attribute_set/builder.rb#71
  def values; end
end

# source://activemodel//lib/active_model/lint.rb#4
module ActiveModel::Lint; end

# source://activemodel//lib/active_model/lint.rb#24
module ActiveModel::Lint::Tests
  # source://activemodel//lib/active_model/lint.rb#102
  def test_errors_aref; end

  # source://activemodel//lib/active_model/lint.rb#81
  def test_model_naming; end

  # source://activemodel//lib/active_model/lint.rb#70
  def test_persisted?; end

  # source://activemodel//lib/active_model/lint.rb#31
  def test_to_key; end

  # source://activemodel//lib/active_model/lint.rb#46
  def test_to_param; end

  # source://activemodel//lib/active_model/lint.rb#58
  def test_to_partial_path; end

  private

  # source://activemodel//lib/active_model/lint.rb#113
  def assert_boolean(result, name); end

  # source://activemodel//lib/active_model/lint.rb#108
  def model; end
end

# source://activemodel//lib/active_model/attribute_methods.rb#15
class ActiveModel::MissingAttributeError < ::NoMethodError; end

# source://activemodel//lib/active_model/model.rb#59
module ActiveModel::Model
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods

  # source://activemodel//lib/active_model/model.rb#80
  def initialize(attributes = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/model.rb#95
  def persisted?; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://activemodel//lib/active_model/naming.rb#8
class ActiveModel::Name
  include ::Comparable

  # source://activemodel//lib/active_model/naming.rb#164
  def initialize(klass, namespace = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/naming.rb#150
  def !~(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#150
  def <=>(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#150
  def ==(arg); end

  # source://activemodel//lib/active_model/naming.rb#150
  def ===(arg); end

  # source://activemodel//lib/active_model/naming.rb#150
  def =~(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#150
  def as_json(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#11
  def cache_key; end

  # source://activemodel//lib/active_model/naming.rb#11
  def collection; end

  # source://activemodel//lib/active_model/naming.rb#11
  def collection=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def element; end

  # source://activemodel//lib/active_model/naming.rb#11
  def element=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#150
  def eql?(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#194
  def human(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/naming.rb#11
  def i18n_key; end

  # source://activemodel//lib/active_model/naming.rb#11
  def i18n_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#150
  def match?(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#11
  def name; end

  # source://activemodel//lib/active_model/naming.rb#11
  def name=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def param_key; end

  # source://activemodel//lib/active_model/naming.rb#11
  def param_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def plural; end

  # source://activemodel//lib/active_model/naming.rb#11
  def plural=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def route_key; end

  # source://activemodel//lib/active_model/naming.rb#11
  def route_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def singular; end

  # source://activemodel//lib/active_model/naming.rb#11
  def singular=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#11
  def singular_route_key; end

  # source://activemodel//lib/active_model/naming.rb#11
  def singular_route_key=(_arg0); end

  # source://activemodel//lib/active_model/naming.rb#150
  def to_s(*_arg0, &_arg1); end

  # source://activemodel//lib/active_model/naming.rb#150
  def to_str(*_arg0, &_arg1); end

  private

  # source://activemodel//lib/active_model/naming.rb#210
  def _singularize(string); end
end

# source://activemodel//lib/active_model/naming.rb#234
module ActiveModel::Naming
  # source://activemodel//lib/active_model/naming.rb#252
  def model_name; end

  class << self
    # source://activemodel//lib/active_model/naming.rb#235
    def extended(base); end

    # source://activemodel//lib/active_model/naming.rb#320
    def param_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#265
    def plural(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#308
    def route_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#273
    def singular(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#293
    def singular_route_key(record_or_class); end

    # source://activemodel//lib/active_model/naming.rb#281
    def uncountable?(record_or_class); end

    private

    # source://activemodel//lib/active_model/naming.rb#324
    def model_name_from_record_or_class(record_or_class); end
  end
end

# source://activemodel//lib/active_model/nested_error.rb#7
class ActiveModel::NestedError < ::ActiveModel::Error
  extend ::Forwardable

  # source://activemodel//lib/active_model/nested_error.rb#8
  def initialize(base, inner_error, override_options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/nested_error.rb#17
  def inner_error; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def message(*args, &block); end
end

# source://activemodel//lib/active_model/attribute_mutation_tracker.rb#148
class ActiveModel::NullMutationTracker
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#166
  def any_changes?; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#163
  def change_to_attribute(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#170
  def changed?(attr_name, **_arg1); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#151
  def changed_attribute_names; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#174
  def changed_in_place?(attr_name); end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#155
  def changed_values; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#159
  def changes; end

  # source://activemodel//lib/active_model/attribute_mutation_tracker.rb#178
  def original_value(attr_name); end
end

# source://activemodel//lib/active_model/errors.rb#687
class ActiveModel::RangeError < ::RangeError; end

# source://activemodel//lib/active_model/secure_password.rb#4
module ActiveModel::SecurePassword
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveModel::SecurePassword::ClassMethods

  class << self
    # source://activemodel//lib/active_model/secure_password.rb#13
    def min_cost; end

    # source://activemodel//lib/active_model/secure_password.rb#13
    def min_cost=(_arg0); end
  end
end

# source://activemodel//lib/active_model/secure_password.rb#17
module ActiveModel::SecurePassword::ClassMethods
  # source://activemodel//lib/active_model/secure_password.rb#61
  def has_secure_password(attribute = T.unsafe(nil), validations: T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/secure_password.rb#91
class ActiveModel::SecurePassword::InstanceMethodsOnActivation < ::Module
  # source://activemodel//lib/active_model/secure_password.rb#92
  def initialize(attribute); end
end

# source://activemodel//lib/active_model/secure_password.rb#10
ActiveModel::SecurePassword::MAX_PASSWORD_LENGTH_ALLOWED = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/serialization.rb#69
module ActiveModel::Serialization
  def read_attribute_for_serialization(*_arg0); end

  # source://activemodel//lib/active_model/serialization.rb#125
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/serialization.rb#180
  def serializable_add_includes(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/serialization.rb#170
  def serializable_attributes(attribute_names); end
end

# source://activemodel//lib/active_model.rb#62
module ActiveModel::Serializers
  extend ::ActiveSupport::Autoload
end

# source://activemodel//lib/active_model/serializers/json.rb#8
module ActiveModel::Serializers::JSON
  include ::ActiveModel::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  # source://activemodel//lib/active_model/serializers/json.rb#96
  def as_json(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/serializers/json.rb#146
  def from_json(json, include_root = T.unsafe(nil)); end

  module GeneratedClassMethods
    def include_root_in_json; end
    def include_root_in_json=(value); end
    def include_root_in_json?; end
  end

  module GeneratedInstanceMethods
    def include_root_in_json; end
    def include_root_in_json?; end
  end
end

# source://activemodel//lib/active_model/errors.rb#683
class ActiveModel::StrictValidationFailed < ::StandardError; end

# source://activemodel//lib/active_model/translation.rb#22
module ActiveModel::Translation
  include ::ActiveModel::Naming

  # source://activemodel//lib/active_model/translation.rb#44
  def human_attribute_name(attribute, options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/translation.rb#26
  def i18n_scope; end

  # source://activemodel//lib/active_model/translation.rb#34
  def lookup_ancestors; end
end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#4
module ActiveModel::Type
  class << self
    # source://activemodel//lib/active_model/type.rb#37
    def default_value; end

    # source://activemodel//lib/active_model/type.rb#32
    def lookup(*args); end

    # source://activemodel//lib/active_model/type.rb#28
    def register(type_name, klass = T.unsafe(nil), **options, &block); end

    # source://activemodel//lib/active_model/type.rb#25
    def registry; end

    # source://activemodel//lib/active_model/type.rb#25
    def registry=(_arg0); end
  end
end

# source://activemodel//lib/active_model/type/big_integer.rb#7
class ActiveModel::Type::BigInteger < ::ActiveModel::Type::Integer
  private

  # source://activemodel//lib/active_model/type/big_integer.rb#9
  def max_value; end
end

# source://activemodel//lib/active_model/type/binary.rb#5
class ActiveModel::Type::Binary < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/binary.rb#10
  def binary?; end

  # source://activemodel//lib/active_model/type/binary.rb#14
  def cast(value); end

  # source://activemodel//lib/active_model/type/binary.rb#27
  def changed_in_place?(raw_old_value, value); end

  # source://activemodel//lib/active_model/type/binary.rb#22
  def serialize(value); end

  # source://activemodel//lib/active_model/type/binary.rb#6
  def type; end
end

# source://activemodel//lib/active_model/type/binary.rb#32
class ActiveModel::Type::Binary::Data
  # source://activemodel//lib/active_model/type/binary.rb#33
  def initialize(value); end

  # source://activemodel//lib/active_model/type/binary.rb#46
  def ==(other); end

  # source://activemodel//lib/active_model/type/binary.rb#42
  def hex; end

  # source://activemodel//lib/active_model/type/binary.rb#37
  def to_s; end

  # source://activemodel//lib/active_model/type/binary.rb#37
  def to_str; end
end

# source://activemodel//lib/active_model/type/boolean.rb#16
class ActiveModel::Type::Boolean < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/boolean.rb#32
  def serialize(value); end

  # source://activemodel//lib/active_model/type/boolean.rb#28
  def type; end

  private

  # source://activemodel//lib/active_model/type/boolean.rb#37
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/boolean.rb#17
ActiveModel::Type::Boolean::FALSE_VALUES = T.let(T.unsafe(nil), Set)

# source://activemodel//lib/active_model/type/date.rb#5
class ActiveModel::Type::Date < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel//lib/active_model/type/date.rb#9
  def type; end

  # source://activemodel//lib/active_model/type/date.rb#13
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/date.rb#18
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/date.rb#36
  def fallback_string_to_date(string); end

  # source://activemodel//lib/active_model/type/date.rb#30
  def fast_string_to_date(string); end

  # source://activemodel//lib/active_model/type/date.rb#40
  def new_date(year, mon, mday); end

  # source://activemodel//lib/active_model/type/date.rb#46
  def value_from_multiparameter_assignment(*_arg0); end
end

# source://activemodel//lib/active_model/type/date.rb#29
ActiveModel::Type::Date::ISO_DATE = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/date_time.rb#5
class ActiveModel::Type::DateTime < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::TimeValue
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel//lib/active_model/type/date_time.rb#12
  def type; end

  private

  # source://activemodel//lib/active_model/type/date_time.rb#17
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/date_time.rb#30
  def fallback_string_to_time(string); end

  # source://activemodel//lib/active_model/type/date_time.rb#26
  def microseconds(time); end

  # source://activemodel//lib/active_model/type/date_time.rb#37
  def value_from_multiparameter_assignment(values_hash); end
end

# source://activemodel//lib/active_model/type/decimal.rb#7
class ActiveModel::Type::Decimal < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/decimal.rb#11
  def type; end

  # source://activemodel//lib/active_model/type/decimal.rb#15
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/decimal.rb#60
  def apply_scale(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#20
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#44
  def convert_float_to_big_decimal(value); end

  # source://activemodel//lib/active_model/type/decimal.rb#52
  def float_precision; end
end

# source://activemodel//lib/active_model/type/decimal.rb#9
ActiveModel::Type::Decimal::BIGDECIMAL_PRECISION = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/type/float.rb#7
class ActiveModel::Type::Float < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/float.rb#10
  def type; end

  # source://activemodel//lib/active_model/type/float.rb#14
  def type_cast_for_schema(value); end

  private

  # source://activemodel//lib/active_model/type/float.rb#24
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#5
module ActiveModel::Type::Helpers; end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#6
class ActiveModel::Type::Helpers::AcceptsMultiparameterTime < ::Module
  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#33
  def initialize(defaults: T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#7
module ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#20
  def assert_valid_value(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#12
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#8
  def serialize(value); end

  # source://activemodel//lib/active_model/type/helpers/accepts_multiparameter_time.rb#28
  def value_constructed_by_mass_assignment?(value); end
end

# source://activemodel//lib/active_model/type/helpers/mutable.rb#6
module ActiveModel::Type::Helpers::Mutable
  # source://activemodel//lib/active_model/type/helpers/mutable.rb#7
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/mutable.rb#14
  def changed_in_place?(raw_old_value, new_value); end
end

# source://activemodel//lib/active_model/type/helpers/numeric.rb#6
module ActiveModel::Type::Helpers::Numeric
  # source://activemodel//lib/active_model/type/helpers/numeric.rb#11
  def cast(value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#27
  def changed?(old_value, _new_value, new_value_before_type_cast); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#7
  def serialize(value); end

  private

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#36
  def non_numeric_string?(value); end

  # source://activemodel//lib/active_model/type/helpers/numeric.rb#32
  def number_to_non_number?(old_value, new_value_before_type_cast); end
end

# source://activemodel//lib/active_model/type/helpers/numeric.rb#43
ActiveModel::Type::Helpers::Numeric::NUMERIC_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/helpers/time_value.rb#9
module ActiveModel::Type::Helpers::TimeValue
  # source://activemodel//lib/active_model/type/helpers/time_value.rb#24
  def apply_seconds_precision(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#10
  def serialize(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#38
  def type_cast_for_schema(value); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#42
  def user_input_in_time_zone(value); end

  private

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#72
  def fast_string_to_time(string); end

  # source://activemodel//lib/active_model/type/helpers/time_value.rb#47
  def new_time(year, mon, mday, hour, min, sec, microsec, offset = T.unsafe(nil)); end
end

# source://activemodel//lib/active_model/type/helpers/time_value.rb#64
ActiveModel::Type::Helpers::TimeValue::ISO_DATETIME = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/type/helpers/timezone.rb#8
module ActiveModel::Type::Helpers::Timezone
  # source://activemodel//lib/active_model/type/helpers/timezone.rb#13
  def default_timezone; end

  # source://activemodel//lib/active_model/type/helpers/timezone.rb#9
  def is_utc?; end
end

# source://activemodel//lib/active_model/type/immutable_string.rb#5
class ActiveModel::Type::ImmutableString < ::ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/immutable_string.rb#6
  def initialize(**args); end

  # source://activemodel//lib/active_model/type/immutable_string.rb#16
  def serialize(value); end

  # source://activemodel//lib/active_model/type/immutable_string.rb#12
  def type; end

  private

  # source://activemodel//lib/active_model/type/immutable_string.rb#26
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/integer.rb#5
class ActiveModel::Type::Integer < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Numeric

  # source://activemodel//lib/active_model/type/integer.rb#12
  def initialize(**_arg0); end

  # source://activemodel//lib/active_model/type/integer.rb#21
  def deserialize(value); end

  # source://activemodel//lib/active_model/type/integer.rb#31
  def serializable?(value); end

  # source://activemodel//lib/active_model/type/integer.rb#26
  def serialize(value); end

  # source://activemodel//lib/active_model/type/integer.rb#17
  def type; end

  private

  # source://activemodel//lib/active_model/type/integer.rb#62
  def _limit; end

  # source://activemodel//lib/active_model/type/integer.rb#43
  def cast_value(value); end

  # source://activemodel//lib/active_model/type/integer.rb#47
  def ensure_in_range(value); end

  # source://activemodel//lib/active_model/type/integer.rb#39
  def in_range?(value); end

  # source://activemodel//lib/active_model/type/integer.rb#54
  def max_value; end

  # source://activemodel//lib/active_model/type/integer.rb#58
  def min_value; end

  # source://activemodel//lib/active_model/type/integer.rb#37
  def range; end
end

# source://activemodel//lib/active_model/type/integer.rb#10
ActiveModel::Type::Integer::DEFAULT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/type/registry.rb#47
class ActiveModel::Type::Registration
  # source://activemodel//lib/active_model/type/registry.rb#49
  def initialize(name, block, **_arg2); end

  # source://activemodel//lib/active_model/type/registry.rb#54
  def call(_registry, *args); end

  # source://activemodel//lib/active_model/type/registry.rb#59
  def matches?(type_name, *args, **kwargs); end

  private

  # source://activemodel//lib/active_model/type/registry.rb#64
  def block; end

  # source://activemodel//lib/active_model/type/registry.rb#64
  def name; end
end

# source://activemodel//lib/active_model/type/registry.rb#6
class ActiveModel::Type::Registry
  # source://activemodel//lib/active_model/type/registry.rb#7
  def initialize; end

  # source://activemodel//lib/active_model/type/registry.rb#24
  def lookup(symbol, *args); end

  # source://activemodel//lib/active_model/type/registry.rb#16
  def register(type_name, klass = T.unsafe(nil), **options, &block); end

  private

  # source://activemodel//lib/active_model/type/registry.rb#42
  def find_registration(symbol, *args, **kwargs); end

  # source://activemodel//lib/active_model/type/registry.rb#11
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/type/registry.rb#38
  def registration_klass; end

  # source://activemodel//lib/active_model/type/registry.rb#36
  def registrations; end
end

# source://activemodel//lib/active_model/type/string.rb#7
class ActiveModel::Type::String < ::ActiveModel::Type::ImmutableString
  # source://activemodel//lib/active_model/type/string.rb#8
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel//lib/active_model/type/string.rb#14
  def to_immutable_string; end

  private

  # source://activemodel//lib/active_model/type/string.rb#25
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/time.rb#5
class ActiveModel::Type::Time < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Timezone
  include ::ActiveModel::Type::Helpers::TimeValue
  include ::ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods

  # source://activemodel//lib/active_model/type/time.rb#12
  def type; end

  # source://activemodel//lib/active_model/type/time.rb#16
  def user_input_in_time_zone(value); end

  private

  # source://activemodel//lib/active_model/type/time.rb#32
  def cast_value(value); end
end

# source://activemodel//lib/active_model/type/value.rb#5
class ActiveModel::Type::Value
  # source://activemodel//lib/active_model/type/value.rb#8
  def initialize(precision: T.unsafe(nil), limit: T.unsafe(nil), scale: T.unsafe(nil)); end

  # source://activemodel//lib/active_model/type/value.rb#109
  def ==(other); end

  # source://activemodel//lib/active_model/type/value.rb#121
  def assert_valid_value(_); end

  # source://activemodel//lib/active_model/type/value.rb#65
  def binary?; end

  # source://activemodel//lib/active_model/type/value.rb#45
  def cast(value); end

  # source://activemodel//lib/active_model/type/value.rb#72
  def changed?(old_value, new_value, _new_value_before_type_cast); end

  # source://activemodel//lib/active_model/type/value.rb#93
  def changed_in_place?(raw_old_value, new_value); end

  # source://activemodel//lib/active_model/type/value.rb#31
  def deserialize(value); end

  # source://activemodel//lib/active_model/type/value.rb#109
  def eql?(other); end

  # source://activemodel//lib/active_model/type/value.rb#101
  def force_equality?(_value); end

  # source://activemodel//lib/active_model/type/value.rb#117
  def hash; end

  # source://activemodel//lib/active_model/type/value.rb#6
  def limit; end

  # source://activemodel//lib/active_model/type/value.rb#105
  def map(value); end

  # source://activemodel//lib/active_model/type/value.rb#6
  def precision; end

  # source://activemodel//lib/active_model/type/value.rb#6
  def scale; end

  # source://activemodel//lib/active_model/type/value.rb#18
  def serializable?(value); end

  # source://activemodel//lib/active_model/type/value.rb#53
  def serialize(value); end

  # source://activemodel//lib/active_model/type/value.rb#22
  def type; end

  # source://activemodel//lib/active_model/type/value.rb#59
  def type_cast_for_schema(value); end

  # source://activemodel//lib/active_model/type/value.rb#97
  def value_constructed_by_mass_assignment?(_value); end

  private

  # source://activemodel//lib/active_model/type/value.rb#128
  def cast_value(value); end
end

# source://activemodel//lib/active_model/errors.rb#700
class ActiveModel::UnknownAttributeError < ::NoMethodError
  # source://activemodel//lib/active_model/errors.rb#703
  def initialize(record, attribute); end

  # source://activemodel//lib/active_model/errors.rb#701
  def attribute; end

  # source://activemodel//lib/active_model/errors.rb#701
  def record; end
end

# source://activemodel//lib/active_model/gem_version.rb#9
module ActiveModel::VERSION; end

# source://activemodel//lib/active_model/gem_version.rb#10
ActiveModel::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/gem_version.rb#11
ActiveModel::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/gem_version.rb#13
ActiveModel::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/gem_version.rb#15
ActiveModel::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/gem_version.rb#12
ActiveModel::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activemodel//lib/active_model/validations.rb#425
class ActiveModel::ValidationError < ::StandardError
  # source://activemodel//lib/active_model/validations.rb#428
  def initialize(model); end

  # source://activemodel//lib/active_model/validations.rb#426
  def model; end
end

# source://activemodel//lib/active_model/validations.rb#37
module ActiveModel::Validations
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel//lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel//lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel//lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel//lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel//lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel//lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://activemodel//lib/active_model/validations/absence.rb#6
class ActiveModel::Validations::AbsenceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/absence.rb#7
  def validate_each(record, attr_name, value); end
end

# source://activemodel//lib/active_model/validations/acceptance.rb#5
class ActiveModel::Validations::AcceptanceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/acceptance.rb#6
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/acceptance.rb#23
  def acceptable_option?(value); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#18
  def setup!(klass); end
end

# source://activemodel//lib/active_model/validations/acceptance.rb#27
class ActiveModel::Validations::AcceptanceValidator::LazilyDefineAttributes < ::Module
  # source://activemodel//lib/active_model/validations/acceptance.rb#28
  def initialize(attributes); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#73
  def ==(other); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#56
  def define_on(klass); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#32
  def included(klass); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#51
  def matches?(method_name); end

  protected

  # source://activemodel//lib/active_model/validations/acceptance.rb#78
  def attributes; end
end

# source://activemodel//lib/active_model/validations/callbacks.rb#22
module ActiveModel::Validations::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  private

  # source://activemodel//lib/active_model/validations/callbacks.rb#116
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://activemodel//lib/active_model/validations/callbacks.rb#32
module ActiveModel::Validations::Callbacks::ClassMethods
  # source://activemodel//lib/active_model/validations/callbacks.rb#90
  def after_validation(*args, &block); end

  # source://activemodel//lib/active_model/validations/callbacks.rb#56
  def before_validation(*args, &block); end

  private

  # source://activemodel//lib/active_model/validations/callbacks.rb#101
  def set_options_for_callback(options); end
end

# source://activemodel//lib/active_model/validations.rb#55
module ActiveModel::Validations::ClassMethods
  # source://activemodel//lib/active_model/validations.rb#270
  def attribute_method?(attribute); end

  # source://activemodel//lib/active_model/validations.rb#234
  def clear_validators!; end

  # source://activemodel//lib/active_model/validations.rb#275
  def inherited(base); end

  # source://activemodel//lib/active_model/validations.rb#152
  def validate(*args, &block); end

  # source://activemodel//lib/active_model/validations/validates.rb#106
  def validates(*attributes); end

  # source://activemodel//lib/active_model/validations/validates.rb#148
  def validates!(*attributes); end

  # source://activemodel//lib/active_model/validations.rb#85
  def validates_each(*attr_names, &block); end

  # source://activemodel//lib/active_model/validations/with.rb#81
  def validates_with(*args, &block); end

  # source://activemodel//lib/active_model/validations.rb#192
  def validators; end

  # source://activemodel//lib/active_model/validations.rb#254
  def validators_on(*attributes); end

  private

  # source://activemodel//lib/active_model/validations/validates.rb#161
  def _parse_validates_options(options); end

  # source://activemodel//lib/active_model/validations/validates.rb#157
  def _validates_default_keys; end
end

# source://activemodel//lib/active_model/validations.rb#89
ActiveModel::Validations::ClassMethods::VALID_OPTIONS_FOR_VALIDATE = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/clusivity.rb#7
module ActiveModel::Validations::Clusivity
  # source://activemodel//lib/active_model/validations/clusivity.rb#11
  def check_validity!; end

  private

  # source://activemodel//lib/active_model/validations/clusivity.rb#34
  def delimiter; end

  # source://activemodel//lib/active_model/validations/clusivity.rb#18
  def include?(record, value); end

  # source://activemodel//lib/active_model/validations/clusivity.rb#43
  def inclusion_method(enumerable); end
end

# source://activemodel//lib/active_model/validations/clusivity.rb#8
ActiveModel::Validations::Clusivity::ERROR_MESSAGE = T.let(T.unsafe(nil), String)

# source://activemodel//lib/active_model/validations/confirmation.rb#5
class ActiveModel::Validations::ConfirmationValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/confirmation.rb#6
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#11
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/confirmation.rb#31
  def confirmation_value_equal?(record, attribute, value, confirmed); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#21
  def setup!(klass); end
end

# source://activemodel//lib/active_model/validations/exclusion.rb#7
class ActiveModel::Validations::ExclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel//lib/active_model/validations/exclusion.rb#10
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/validations/format.rb#5
class ActiveModel::Validations::FormatValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/format.rb#16
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/format.rb#6
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/format.rb#35
  def check_options_validity(name); end

  # source://activemodel//lib/active_model/validations/format.rb#26
  def option_call(record, name); end

  # source://activemodel//lib/active_model/validations/format.rb#31
  def record_error(record, attribute, name, value); end

  # source://activemodel//lib/active_model/validations/format.rb#49
  def regexp_using_multiline_anchors?(regexp); end
end

# source://activemodel//lib/active_model/validations/inclusion.rb#17
module ActiveModel::Validations::HelperMethods
  # source://activemodel//lib/active_model/validations/absence.rb#28
  def validates_absence_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/acceptance.rb#108
  def validates_acceptance_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/confirmation.rb#75
  def validates_confirmation_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/exclusion.rb#44
  def validates_exclusion_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/format.rb#108
  def validates_format_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/inclusion.rb#42
  def validates_inclusion_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/length.rb#122
  def validates_length_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/numericality.rb#198
  def validates_numericality_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/presence.rb#34
  def validates_presence_of(*attr_names); end

  # source://activemodel//lib/active_model/validations/length.rb#122
  def validates_size_of(*attr_names); end

  private

  # source://activemodel//lib/active_model/validations/helper_methods.rb#7
  def _merge_attributes(attr_names); end
end

# source://activemodel//lib/active_model/validations/inclusion.rb#7
class ActiveModel::Validations::InclusionValidator < ::ActiveModel::EachValidator
  include ::ActiveModel::Validations::Clusivity

  # source://activemodel//lib/active_model/validations/inclusion.rb#10
  def validate_each(record, attribute, value); end
end

# source://activemodel//lib/active_model/validations/length.rb#5
class ActiveModel::Validations::LengthValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/length.rb#11
  def initialize(options); end

  # source://activemodel//lib/active_model/validations/length.rb#24
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/length.rb#40
  def validate_each(record, attribute, value); end

  private

  # source://activemodel//lib/active_model/validations/length.rb#67
  def skip_nil_check?(key); end
end

# source://activemodel//lib/active_model/validations/length.rb#7
ActiveModel::Validations::LengthValidator::CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/length.rb#6
ActiveModel::Validations::LengthValidator::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/length.rb#9
ActiveModel::Validations::LengthValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/numericality.rb#7
class ActiveModel::Validations::NumericalityValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/numericality.rb#18
  def check_validity!; end

  # source://activemodel//lib/active_model/validations/numericality.rb#27
  def validate_each(record, attr_name, value, precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  private

  # source://activemodel//lib/active_model/validations/numericality.rb#106
  def allow_only_integer?(record); end

  # source://activemodel//lib/active_model/validations/numericality.rb#100
  def filtered_options(value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#96
  def is_hexadecimal_literal?(raw_value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#92
  def is_integer?(raw_value); end

  # source://activemodel//lib/active_model/validations/numericality.rb#86
  def is_number?(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#64
  def parse_as_number(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#78
  def parse_float(raw_value, precision, scale); end

  # source://activemodel//lib/active_model/validations/numericality.rb#117
  def prepare_value_for_validation(value, record, attr_name); end

  # source://activemodel//lib/active_model/validations/numericality.rb#138
  def record_attribute_changed_in_place?(record, attr_name); end

  # source://activemodel//lib/active_model/validations/numericality.rb#82
  def round(raw_value, scale); end
end

# source://activemodel//lib/active_model/validations/numericality.rb#8
ActiveModel::Validations::NumericalityValidator::CHECKS = T.let(T.unsafe(nil), Hash)

# source://activemodel//lib/active_model/validations/numericality.rb#16
ActiveModel::Validations::NumericalityValidator::HEXADECIMAL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/validations/numericality.rb#14
ActiveModel::Validations::NumericalityValidator::INTEGER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://activemodel//lib/active_model/validations/numericality.rb#12
ActiveModel::Validations::NumericalityValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://activemodel//lib/active_model/validations/presence.rb#5
class ActiveModel::Validations::PresenceValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/presence.rb#6
  def validate_each(record, attr_name, value); end
end

# source://activemodel//lib/active_model/validations/with.rb#7
class ActiveModel::Validations::WithValidator < ::ActiveModel::EachValidator
  # source://activemodel//lib/active_model/validations/with.rb#8
  def validate_each(record, attr, val); end
end

# source://activemodel//lib/active_model/validator.rb#96
class ActiveModel::Validator
  # source://activemodel//lib/active_model/validator.rb#108
  def initialize(options = T.unsafe(nil)); end

  # source://activemodel//lib/active_model/validator.rb#116
  def kind; end

  # source://activemodel//lib/active_model/validator.rb#97
  def options; end

  # source://activemodel//lib/active_model/validator.rb#122
  def validate(record); end

  class << self
    # source://activemodel//lib/active_model/validator.rb#103
    def kind; end
  end
end
