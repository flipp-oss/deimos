# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack` gem.
# Please instead update this file by running `bin/tapioca gem rack`.

# source://rack//lib/rack/version.rb#14
module Rack
  class << self
    # source://rack//lib/rack/version.rb#26
    def release; end

    # source://rack//lib/rack/version.rb#19
    def version; end
  end
end

# source://rack//lib/rack.rb#124
module Rack::Auth; end

# source://rack//lib/rack/auth/abstract/handler.rb#9
class Rack::Auth::AbstractHandler
  # source://rack//lib/rack/auth/abstract/handler.rb#13
  def initialize(app, realm = T.unsafe(nil), &authenticator); end

  # source://rack//lib/rack/auth/abstract/handler.rb#11
  def realm; end

  # source://rack//lib/rack/auth/abstract/handler.rb#11
  def realm=(_arg0); end

  private

  # source://rack//lib/rack/auth/abstract/handler.rb#29
  def bad_request; end

  # source://rack//lib/rack/auth/abstract/handler.rb#20
  def unauthorized(www_authenticate = T.unsafe(nil)); end
end

# source://rack//lib/rack/auth/abstract/request.rb#5
class Rack::Auth::AbstractRequest
  # source://rack//lib/rack/auth/abstract/request.rb#7
  def initialize(env); end

  # source://rack//lib/rack/auth/abstract/request.rb#31
  def params; end

  # source://rack//lib/rack/auth/abstract/request.rb#23
  def parts; end

  # source://rack//lib/rack/auth/abstract/request.rb#15
  def provided?; end

  # source://rack//lib/rack/auth/abstract/request.rb#11
  def request; end

  # source://rack//lib/rack/auth/abstract/request.rb#27
  def scheme; end

  # source://rack//lib/rack/auth/abstract/request.rb#19
  def valid?; end

  private

  # source://rack//lib/rack/auth/abstract/request.rb#40
  def authorization_key; end
end

# source://rack//lib/rack/auth/abstract/request.rb#38
Rack::Auth::AbstractRequest::AUTHORIZATION_KEYS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/auth/basic.rb#16
class Rack::Auth::Basic < ::Rack::Auth::AbstractHandler
  # source://rack//lib/rack/auth/basic.rb#18
  def call(env); end

  private

  # source://rack//lib/rack/auth/basic.rb#37
  def challenge; end

  # source://rack//lib/rack/auth/basic.rb#41
  def valid?(auth); end
end

# source://rack//lib/rack/auth/basic.rb#45
class Rack::Auth::Basic::Request < ::Rack::Auth::AbstractRequest
  # source://rack//lib/rack/auth/basic.rb#46
  def basic?; end

  # source://rack//lib/rack/auth/basic.rb#50
  def credentials; end

  # source://rack//lib/rack/auth/basic.rb#54
  def username; end
end

# source://rack//lib/rack.rb#128
module Rack::Auth::Digest; end

# source://rack//lib/rack/auth/digest/md5.rb#20
class Rack::Auth::Digest::MD5 < ::Rack::Auth::AbstractHandler
  # source://rack//lib/rack/auth/digest/md5.rb#26
  def initialize(app, realm = T.unsafe(nil), opaque = T.unsafe(nil), &authenticator); end

  # source://rack//lib/rack/auth/digest/md5.rb#39
  def call(env); end

  # source://rack//lib/rack/auth/digest/md5.rb#22
  def opaque; end

  # source://rack//lib/rack/auth/digest/md5.rb#22
  def opaque=(_arg0); end

  # source://rack//lib/rack/auth/digest/md5.rb#24
  def passwords_hashed=(_arg0); end

  # source://rack//lib/rack/auth/digest/md5.rb#35
  def passwords_hashed?; end

  private

  # source://rack//lib/rack/auth/digest/md5.rb#114
  def A1(auth, password); end

  # source://rack//lib/rack/auth/digest/md5.rb#118
  def A2(auth); end

  # source://rack//lib/rack/auth/digest/md5.rb#104
  def H(data); end

  # source://rack//lib/rack/auth/digest/md5.rb#110
  def KD(secret, data); end

  # source://rack//lib/rack/auth/digest/md5.rb#79
  def challenge(hash = T.unsafe(nil)); end

  # source://rack//lib/rack/auth/digest/md5.rb#122
  def digest(auth, password); end

  # source://rack//lib/rack/auth/digest/md5.rb#104
  def md5(data); end

  # source://rack//lib/rack/auth/digest/md5.rb#68
  def params(hash = T.unsafe(nil)); end

  # source://rack//lib/rack/auth/digest/md5.rb#83
  def valid?(auth); end

  # source://rack//lib/rack/auth/digest/md5.rb#99
  def valid_digest?(auth); end

  # source://rack//lib/rack/auth/digest/md5.rb#95
  def valid_nonce?(auth); end

  # source://rack//lib/rack/auth/digest/md5.rb#91
  def valid_opaque?(auth); end

  # source://rack//lib/rack/auth/digest/md5.rb#87
  def valid_qop?(auth); end
end

# source://rack//lib/rack/auth/digest/md5.rb#66
Rack::Auth::Digest::MD5::QOP = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/auth/digest/nonce.rb#17
class Rack::Auth::Digest::Nonce
  # source://rack//lib/rack/auth/digest/nonce.rb#27
  def initialize(timestamp = T.unsafe(nil), given_digest = T.unsafe(nil)); end

  # source://rack//lib/rack/auth/digest/nonce.rb#35
  def digest; end

  # source://rack//lib/rack/auth/digest/nonce.rb#47
  def fresh?; end

  # source://rack//lib/rack/auth/digest/nonce.rb#43
  def stale?; end

  # source://rack//lib/rack/auth/digest/nonce.rb#31
  def to_s; end

  # source://rack//lib/rack/auth/digest/nonce.rb#39
  def valid?; end

  class << self
    # source://rack//lib/rack/auth/digest/nonce.rb#23
    def parse(string); end

    # source://rack//lib/rack/auth/digest/nonce.rb#20
    def private_key; end

    # source://rack//lib/rack/auth/digest/nonce.rb#20
    def private_key=(_arg0); end

    # source://rack//lib/rack/auth/digest/nonce.rb#20
    def time_limit; end

    # source://rack//lib/rack/auth/digest/nonce.rb#20
    def time_limit=(_arg0); end
  end
end

# source://rack//lib/rack/auth/digest/params.rb#6
class Rack::Auth::Digest::Params < ::Hash
  # source://rack//lib/rack/auth/digest/params.rb#25
  def initialize; end

  # source://rack//lib/rack/auth/digest/params.rb#31
  def [](k); end

  # source://rack//lib/rack/auth/digest/params.rb#35
  def []=(k, v); end

  # source://rack//lib/rack/auth/digest/params.rb#47
  def quote(str); end

  # source://rack//lib/rack/auth/digest/params.rb#41
  def to_s; end

  class << self
    # source://rack//lib/rack/auth/digest/params.rb#15
    def dequote(str); end

    # source://rack//lib/rack/auth/digest/params.rb#8
    def parse(str); end

    # source://rack//lib/rack/auth/digest/params.rb#21
    def split_header_value(str); end
  end
end

# source://rack//lib/rack/auth/digest/params.rb#39
Rack::Auth::Digest::Params::UNQUOTED = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/auth/digest/request.rb#10
class Rack::Auth::Digest::Request < ::Rack::Auth::AbstractRequest
  # source://rack//lib/rack/auth/digest/request.rb#19
  def correct_uri?; end

  # source://rack//lib/rack/auth/digest/request.rb#15
  def digest?; end

  # source://rack//lib/rack/auth/digest/request.rb#11
  def method; end

  # source://rack//lib/rack/auth/digest/request.rb#35
  def method_missing(sym, *args); end

  # source://rack//lib/rack/auth/digest/request.rb#23
  def nonce; end

  # source://rack//lib/rack/auth/digest/request.rb#27
  def params; end

  # source://rack//lib/rack/auth/digest/request.rb#31
  def respond_to?(sym, *_arg1); end
end

# source://rack//lib/rack/body_proxy.rb#7
class Rack::BodyProxy
  # source://rack//lib/rack/body_proxy.rb#10
  def initialize(body, &block); end

  # source://rack//lib/rack/body_proxy.rb#23
  def close; end

  # source://rack//lib/rack/body_proxy.rb#35
  def closed?; end

  # source://rack//lib/rack/body_proxy.rb#40
  def method_missing(method_name, *args, &block); end

  private

  # source://rack//lib/rack/body_proxy.rb#17
  def respond_to_missing?(method_name, include_all = T.unsafe(nil)); end
end

# source://rack//lib/rack/builder.rb#33
class Rack::Builder
  # source://rack//lib/rack/builder.rb#123
  def initialize(default_app = T.unsafe(nil), &block); end

  # source://rack//lib/rack/builder.rb#243
  def call(env); end

  # source://rack//lib/rack/builder.rb#226
  def freeze_app; end

  # source://rack//lib/rack/builder.rb#219
  def map(path, &block); end

  # source://rack//lib/rack/builder.rb#176
  def run(app); end

  # source://rack//lib/rack/builder.rb#231
  def to_app; end

  # source://rack//lib/rack/builder.rb#153
  def use(middleware, *args, &block); end

  # source://rack//lib/rack/builder.rb#190
  def warmup(prc = T.unsafe(nil), &block); end

  private

  # source://rack//lib/rack/builder.rb#251
  def generate_map(default_app, mapping); end

  class << self
    # source://rack//lib/rack/builder.rb#130
    def app(default_app = T.unsafe(nil), &block); end

    # source://rack//lib/rack/builder.rb#93
    def load_file(path, opts = T.unsafe(nil)); end

    # source://rack//lib/rack/builder.rb#112
    def new_from_string(builder_script, file = T.unsafe(nil)); end

    # source://rack//lib/rack/builder.rb#64
    def parse_file(config, opts = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/builder.rb#36
Rack::Builder::UTF_8_BOM = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#29
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#31
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#32
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/cascade.rb#9
class Rack::Cascade
  # source://rack//lib/rack/cascade.rb#22
  def initialize(apps, cascade_for = T.unsafe(nil)); end

  # source://rack//lib/rack/cascade.rb#57
  def <<(app); end

  # source://rack//lib/rack/cascade.rb#57
  def add(app); end

  # source://rack//lib/rack/cascade.rb#14
  def apps; end

  # source://rack//lib/rack/cascade.rb#33
  def call(env); end

  # source://rack//lib/rack/cascade.rb#62
  def include?(app); end
end

# source://rack//lib/rack/cascade.rb#11
Rack::Cascade::NotFound = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/chunked.rb#21
class Rack::Chunked
  include ::Rack::Utils

  # source://rack//lib/rack/chunked.rb#78
  def initialize(app); end

  # source://rack//lib/rack/chunked.rb#97
  def call(env); end

  # source://rack//lib/rack/chunked.rb#83
  def chunkable_version?(ver); end
end

# source://rack//lib/rack/chunked.rb#25
class Rack::Chunked::Body
  # source://rack//lib/rack/chunked.rb#30
  def initialize(body); end

  # source://rack//lib/rack/chunked.rb#50
  def close; end

  # source://rack//lib/rack/chunked.rb#36
  def each(&block); end

  private

  # source://rack//lib/rack/chunked.rb#57
  def yield_trailers; end
end

# source://rack//lib/rack/chunked.rb#27
Rack::Chunked::Body::TAIL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/chunked.rb#26
Rack::Chunked::Body::TERM = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/chunked.rb#67
class Rack::Chunked::TrailerBody < ::Rack::Chunked::Body
  private

  # source://rack//lib/rack/chunked.rb#71
  def yield_trailers; end
end

# source://rack//lib/rack/common_logger.rb#8
class Rack::CommonLogger
  # source://rack//lib/rack/common_logger.rb#24
  def initialize(app, logger = T.unsafe(nil)); end

  # source://rack//lib/rack/common_logger.rb#36
  def call(env); end

  private

  # source://rack//lib/rack/common_logger.rb#78
  def extract_content_length(headers); end

  # source://rack//lib/rack/common_logger.rb#47
  def log(env, status, header, began_at); end
end

# source://rack//lib/rack/common_logger.rb#18
Rack::CommonLogger::FORMAT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/conditional_get.rb#17
class Rack::ConditionalGet
  # source://rack//lib/rack/conditional_get.rb#18
  def initialize(app); end

  # source://rack//lib/rack/conditional_get.rb#24
  def call(env); end

  private

  # source://rack//lib/rack/conditional_get.rb#59
  def etag_matches?(none_match, headers); end

  # source://rack//lib/rack/conditional_get.rb#48
  def fresh?(env, headers); end

  # source://rack//lib/rack/conditional_get.rb#65
  def modified_since?(modified_since, headers); end

  # source://rack//lib/rack/conditional_get.rb#72
  def to_rfc2822(since); end
end

# source://rack//lib/rack/config.rb#11
class Rack::Config
  # source://rack//lib/rack/config.rb#12
  def initialize(app, &block); end

  # source://rack//lib/rack/config.rb#17
  def call(env); end
end

# source://rack//lib/rack/content_length.rb#9
class Rack::ContentLength
  include ::Rack::Utils

  # source://rack//lib/rack/content_length.rb#12
  def initialize(app); end

  # source://rack//lib/rack/content_length.rb#16
  def call(env); end
end

# source://rack//lib/rack/content_type.rb#12
class Rack::ContentType
  include ::Rack::Utils

  # source://rack//lib/rack/content_type.rb#15
  def initialize(app, content_type = T.unsafe(nil)); end

  # source://rack//lib/rack/content_type.rb#19
  def call(env); end
end

# source://rack//lib/rack.rb#43
Rack::DELETE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/deflater.rb#23
class Rack::Deflater
  # source://rack//lib/rack/deflater.rb#36
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/deflater.rb#43
  def call(env); end

  private

  # source://rack//lib/rack/deflater.rb#122
  def should_deflate?(env, status, headers, body); end
end

# source://rack//lib/rack/deflater.rb#79
class Rack::Deflater::GzipStream
  # source://rack//lib/rack/deflater.rb#85
  def initialize(body, mtime, sync); end

  # source://rack//lib/rack/deflater.rb#114
  def close; end

  # source://rack//lib/rack/deflater.rb#92
  def each(&block); end

  # source://rack//lib/rack/deflater.rb#109
  def write(data); end
end

# source://rack//lib/rack/directory.rb#13
class Rack::Directory
  # source://rack//lib/rack/directory.rb#77
  def initialize(root, app = T.unsafe(nil)); end

  # source://rack//lib/rack/directory.rb#83
  def call(env); end

  # source://rack//lib/rack/directory.rb#103
  def check_bad_request(path_info); end

  # source://rack//lib/rack/directory.rb#113
  def check_forbidden(path_info); end

  # source://rack//lib/rack/directory.rb#175
  def entity_not_found(path_info); end

  # source://rack//lib/rack/directory.rb#191
  def filesize_format(int); end

  # source://rack//lib/rack/directory.rb#90
  def get(env); end

  # source://rack//lib/rack/directory.rb#124
  def list_directory(path_info, path, script_name); end

  # source://rack//lib/rack/directory.rb#165
  def list_path(env, path, path_info, script_name); end

  # source://rack//lib/rack/directory.rb#74
  def root; end

  # source://rack//lib/rack/directory.rb#157
  def stat(path); end
end

# source://rack//lib/rack/directory.rb#14
Rack::Directory::DIR_FILE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#37
Rack::Directory::DIR_PAGE_FOOTER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#15
Rack::Directory::DIR_PAGE_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/directory.rb#46
class Rack::Directory::DirectoryBody < ::Struct
  # source://rack//lib/rack/directory.rb#47
  def each; end

  private

  # source://rack//lib/rack/directory.rb#67
  def DIR_FILE_escape(htmls); end
end

# source://rack//lib/rack/directory.rb#183
Rack::Directory::FILESIZE_FORMAT = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack.rb#36
Rack::ETAG = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/etag.rb#16
class Rack::ETag
  # source://rack//lib/rack/etag.rb#20
  def initialize(app, no_cache_control = T.unsafe(nil), cache_control = T.unsafe(nil)); end

  # source://rack//lib/rack/etag.rb#26
  def call(env); end

  private

  # source://rack//lib/rack/etag.rb#65
  def digest_body(body); end

  # source://rack//lib/rack/etag.rb#57
  def etag_body?(body); end

  # source://rack//lib/rack/etag.rb#53
  def etag_status?(status); end

  # source://rack//lib/rack/etag.rb#61
  def skip_caching?(headers); end
end

# source://rack//lib/rack/etag.rb#18
Rack::ETag::DEFAULT_CACHE_CONTROL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/etag.rb#17
Rack::ETag::ETAG_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#30
Rack::EXPIRES = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/events.rb#57
class Rack::Events
  # source://rack//lib/rack/events.rb#102
  def initialize(app, handlers); end

  # source://rack//lib/rack/events.rb#107
  def call(env); end

  private

  # source://rack//lib/rack/events.rb#145
  def make_request(env); end

  # source://rack//lib/rack/events.rb#149
  def make_response(status, headers, body); end

  # source://rack//lib/rack/events.rb#133
  def on_commit(request, response); end

  # source://rack//lib/rack/events.rb#129
  def on_error(request, response, e); end

  # source://rack//lib/rack/events.rb#141
  def on_finish(request, response); end

  # source://rack//lib/rack/events.rb#137
  def on_start(request, response); end
end

# source://rack//lib/rack/events.rb#58
module Rack::Events::Abstract
  # source://rack//lib/rack/events.rb#62
  def on_commit(req, res); end

  # source://rack//lib/rack/events.rb#71
  def on_error(req, res, e); end

  # source://rack//lib/rack/events.rb#68
  def on_finish(req, res); end

  # source://rack//lib/rack/events.rb#65
  def on_send(req, res); end

  # source://rack//lib/rack/events.rb#59
  def on_start(req, res); end
end

# source://rack//lib/rack/events.rb#91
class Rack::Events::BufferedResponse < ::Rack::Response::Raw
  # source://rack//lib/rack/events.rb#94
  def initialize(status, headers, body); end

  # source://rack//lib/rack/events.rb#92
  def body; end

  # source://rack//lib/rack/events.rb#99
  def to_a; end
end

# source://rack//lib/rack/events.rb#75
class Rack::Events::EventedBodyProxy < ::Rack::BodyProxy
  # source://rack//lib/rack/events.rb#78
  def initialize(body, request, response, handlers, &block); end

  # source://rack//lib/rack/events.rb#85
  def each; end

  # source://rack//lib/rack/events.rb#76
  def request; end

  # source://rack//lib/rack/events.rb#76
  def response; end
end

# source://rack//lib/rack/files.rb#14
class Rack::Files
  # source://rack//lib/rack/files.rb#29
  def initialize(root, headers = T.unsafe(nil), default_mime = T.unsafe(nil)); end

  # source://rack//lib/rack/files.rb#36
  def call(env); end

  # source://rack//lib/rack/files.rb#41
  def get(env); end

  # source://rack//lib/rack/files.rb#27
  def root; end

  # source://rack//lib/rack/files.rb#70
  def serving(request, path); end

  private

  # source://rack//lib/rack/files.rb#192
  def fail(status, body, headers = T.unsafe(nil)); end

  # source://rack//lib/rack/files.rb#211
  def filesize(path); end

  # source://rack//lib/rack/files.rb#207
  def mime_type(path, default_mime); end

  class << self
    # source://rack//lib/rack/files.rb#20
    def method_added(name); end
  end
end

# source://rack//lib/rack/files.rb#15
Rack::Files::ALLOWED_VERBS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/files.rb#16
Rack::Files::ALLOW_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/files.rb#123
class Rack::Files::BaseIterator
  # source://rack//lib/rack/files.rb#126
  def initialize(path, ranges, options); end

  # source://rack//lib/rack/files.rb#146
  def bytesize; end

  # source://rack//lib/rack/files.rb#155
  def close; end

  # source://rack//lib/rack/files.rb#132
  def each; end

  # source://rack//lib/rack/files.rb#124
  def options; end

  # source://rack//lib/rack/files.rb#124
  def path; end

  # source://rack//lib/rack/files.rb#124
  def ranges; end

  private

  # source://rack//lib/rack/files.rb#173
  def each_range_part(file, range); end

  # source://rack//lib/rack/files.rb#159
  def multipart?; end

  # source://rack//lib/rack/files.rb#163
  def multipart_heading(range); end
end

# source://rack//lib/rack/files.rb#186
class Rack::Files::Iterator < ::Rack::Files::BaseIterator
  # source://rack//lib/rack/files.rb#124
  def to_path; end
end

# source://rack//lib/rack/files.rb#17
Rack::Files::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/recursive.rb#12
class Rack::ForwardRequest < ::Exception
  # source://rack//lib/rack/recursive.rb#15
  def initialize(url, env = T.unsafe(nil)); end

  # source://rack//lib/rack/recursive.rb#13
  def env; end

  # source://rack//lib/rack/recursive.rb#13
  def url; end
end

# source://rack//lib/rack.rb#39
Rack::GET = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#44
Rack::HEAD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#20
Rack::HTTPS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#35
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#17
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#18
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#19
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/handler.rb#12
module Rack::Handler
  class << self
    # source://rack//lib/rack/handler.rb#51
    def default; end

    # source://rack//lib/rack/handler.rb#13
    def get(server); end

    # source://rack//lib/rack/handler.rb#36
    def pick(server_names); end

    # source://rack//lib/rack/handler.rb#85
    def register(server, klass); end

    # source://rack//lib/rack/handler.rb#75
    def try_require(prefix, const_name); end
  end
end

# source://rack//lib/rack/handler/cgi.rb#5
class Rack::Handler::CGI
  class << self
    # source://rack//lib/rack/handler/cgi.rb#6
    def run(app, **options); end

    # source://rack//lib/rack/handler/cgi.rb#51
    def send_body(body); end

    # source://rack//lib/rack/handler/cgi.rb#40
    def send_headers(status, headers); end

    # source://rack//lib/rack/handler/cgi.rb#11
    def serve(app); end
  end
end

# source://rack//lib/rack/handler.rb#48
Rack::Handler::SERVER_NAMES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/handler/webrick.rb#25
class Rack::Handler::WEBrick < ::WEBrick::HTTPServlet::AbstractServlet
  # source://rack//lib/rack/handler/webrick.rb#61
  def initialize(server, app); end

  # source://rack//lib/rack/handler/webrick.rb#66
  def service(req, res); end

  class << self
    # source://rack//lib/rack/handler/webrick.rb#26
    def run(app, **options); end

    # source://rack//lib/rack/handler/webrick.rb#54
    def shutdown; end

    # source://rack//lib/rack/handler/webrick.rb#44
    def valid_options; end
  end
end

# source://rack//lib/rack/head.rb#6
class Rack::Head
  # source://rack//lib/rack/head.rb#7
  def initialize(app); end

  # source://rack//lib/rack/head.rb#11
  def call(env); end
end

# source://rack//lib/rack.rb#46
Rack::LINK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/lint.rb#9
class Rack::Lint
  include ::Rack::Lint::Assertion

  # source://rack//lib/rack/lint.rb#10
  def initialize(app); end

  # source://rack//lib/rack/lint.rb#41
  def _call(env); end

  # source://rack//lib/rack/lint.rb#37
  def call(env = T.unsafe(nil)); end

  # source://rack//lib/rack/lint.rb#719
  def check_content_length(status, headers); end

  # source://rack//lib/rack/lint.rb#705
  def check_content_type(status, headers); end

  # source://rack//lib/rack/lint.rb#77
  def check_env(env); end

  # source://rack//lib/rack/lint.rb#497
  def check_error(error); end

  # source://rack//lib/rack/lint.rb#668
  def check_headers(header); end

  # source://rack//lib/rack/lint.rb#562
  def check_hijack(env); end

  # source://rack//lib/rack/lint.rb#609
  def check_hijack_response(headers, env); end

  # source://rack//lib/rack/lint.rb#377
  def check_input(input); end

  # source://rack//lib/rack/lint.rb#661
  def check_status(status); end

  # source://rack//lib/rack/lint.rb#792
  def close; end

  # source://rack//lib/rack/lint.rb#745
  def each; end

  # source://rack//lib/rack/lint.rb#732
  def verify_content_length(bytes); end
end

# source://rack//lib/rack/lint.rb#18
module Rack::Lint::Assertion
  # source://rack//lib/rack/lint.rb#19
  def assert(message); end
end

# source://rack//lib/rack/lint.rb#506
class Rack::Lint::ErrorWrapper
  include ::Rack::Lint::Assertion

  # source://rack//lib/rack/lint.rb#509
  def initialize(error); end

  # source://rack//lib/rack/lint.rb#531
  def close(*args); end

  # source://rack//lib/rack/lint.rb#526
  def flush; end

  # source://rack//lib/rack/lint.rb#514
  def puts(str); end

  # source://rack//lib/rack/lint.rb#519
  def write(str); end
end

# source://rack//lib/rack/lint.rb#536
class Rack::Lint::HijackWrapper
  include ::Rack::Lint::Assertion
  extend ::Forwardable

  # source://rack//lib/rack/lint.rb#547
  def initialize(io); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def close(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def close_read(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def close_write(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def closed?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def flush(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def read(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def read_nonblock(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def write(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def write_nonblock(*args, &block); end
end

# source://rack//lib/rack/lint.rb#540
Rack::Lint::HijackWrapper::REQUIRED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/lint.rb#395
class Rack::Lint::InputWrapper
  include ::Rack::Lint::Assertion

  # source://rack//lib/rack/lint.rb#398
  def initialize(input); end

  # source://rack//lib/rack/lint.rb#491
  def close(*args); end

  # source://rack//lib/rack/lint.rb#463
  def each(*args); end

  # source://rack//lib/rack/lint.rb#404
  def gets(*args); end

  # source://rack//lib/rack/lint.rb#430
  def read(*args); end

  # source://rack//lib/rack/lint.rb#478
  def rewind(*args); end
end

# source://rack//lib/rack/lint.rb#17
class Rack::Lint::LintError < ::RuntimeError; end

# source://rack//lib/rack/lock.rb#8
class Rack::Lock
  # source://rack//lib/rack/lock.rb#9
  def initialize(app, mutex = T.unsafe(nil)); end

  # source://rack//lib/rack/lock.rb#13
  def call(env); end

  private

  # source://rack//lib/rack/lock.rb#27
  def unlock; end
end

# source://rack//lib/rack/logger.rb#7
class Rack::Logger
  # source://rack//lib/rack/logger.rb#8
  def initialize(app, level = T.unsafe(nil)); end

  # source://rack//lib/rack/logger.rb#12
  def call(env); end
end

# source://rack//lib/rack/media_type.rb#6
class Rack::MediaType
  class << self
    # source://rack//lib/rack/media_type.rb#26
    def params(content_type); end

    # source://rack//lib/rack/media_type.rb#16
    def type(content_type); end

    private

    # source://rack//lib/rack/media_type.rb#38
    def strip_doublequotes(str); end
  end
end

# source://rack//lib/rack/media_type.rb#7
Rack::MediaType::SPLIT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/method_override.rb#4
class Rack::MethodOverride
  # source://rack//lib/rack/method_override.rb#11
  def initialize(app); end

  # source://rack//lib/rack/method_override.rb#15
  def call(env); end

  # source://rack//lib/rack/method_override.rb#27
  def method_override(env); end

  private

  # source://rack//lib/rack/method_override.rb#40
  def allowed_methods; end

  # source://rack//lib/rack/method_override.rb#44
  def method_override_param(req); end
end

# source://rack//lib/rack/method_override.rb#9
Rack::MethodOverride::ALLOWED_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/method_override.rb#5
Rack::MethodOverride::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/method_override.rb#8
Rack::MethodOverride::HTTP_METHOD_OVERRIDE_HEADER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/method_override.rb#7
Rack::MethodOverride::METHOD_OVERRIDE_PARAM_KEY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/mime.rb#4
module Rack::Mime
  private

  # source://rack//lib/rack/mime.rb#30
  def match?(value, matcher); end

  # source://rack//lib/rack/mime.rb#18
  def mime_type(ext, fallback = T.unsafe(nil)); end

  class << self
    # source://rack//lib/rack/mime.rb#30
    def match?(value, matcher); end

    # source://rack//lib/rack/mime.rb#18
    def mime_type(ext, fallback = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/mime.rb#51
Rack::Mime::MIME_TYPES = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/mock.rb#22
class Rack::MockRequest
  # source://rack//lib/rack/mock.rb#52
  def initialize(app); end

  # source://rack//lib/rack/mock.rb#65
  def delete(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#57
  def get(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#67
  def head(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#69
  def options(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#63
  def patch(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#59
  def post(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#61
  def put(uri, opts = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#74
  def request(method = T.unsafe(nil), uri = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://rack//lib/rack/mock.rb#105
    def env_for(uri = T.unsafe(nil), opts = T.unsafe(nil)); end

    # source://rack//lib/rack/mock.rb#92
    def parse_uri_rfc2396(uri); end
  end
end

# source://rack//lib/rack/mock.rb#43
Rack::MockRequest::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/mock.rb#26
class Rack::MockRequest::FatalWarner
  # source://rack//lib/rack/mock.rb#35
  def flush; end

  # source://rack//lib/rack/mock.rb#27
  def puts(warning); end

  # source://rack//lib/rack/mock.rb#38
  def string; end

  # source://rack//lib/rack/mock.rb#31
  def write(warning); end
end

# source://rack//lib/rack/mock.rb#23
class Rack::MockRequest::FatalWarning < ::RuntimeError; end

# source://rack//lib/rack/mock.rb#173
class Rack::MockResponse < ::Rack::Response
  # source://rack//lib/rack/mock.rb#184
  def initialize(status, headers, body, errors = T.unsafe(nil)); end

  # source://rack//lib/rack/mock.rb#194
  def =~(other); end

  # source://rack//lib/rack/mock.rb#202
  def body; end

  # source://rack//lib/rack/mock.rb#226
  def cookie(name); end

  # source://rack//lib/rack/mock.rb#179
  def cookies; end

  # source://rack//lib/rack/mock.rb#222
  def empty?; end

  # source://rack//lib/rack/mock.rb#182
  def errors; end

  # source://rack//lib/rack/mock.rb#182
  def errors=(_arg0); end

  # source://rack//lib/rack/mock.rb#198
  def match(other); end

  # source://rack//lib/rack/mock.rb#179
  def original_headers; end

  private

  # source://rack//lib/rack/mock.rb#253
  def identify_cookie_attributes(cookie_filling); end

  # source://rack//lib/rack/mock.rb#232
  def parse_cookies_from_header; end

  class << self
    def [](*_arg0); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#6
module Rack::Multipart
  class << self
    # source://rack//lib/rack/multipart.rb#58
    def build_multipart(params, first = T.unsafe(nil)); end

    # source://rack//lib/rack/multipart.rb#44
    def extract_multipart(req, params = T.unsafe(nil)); end

    # source://rack//lib/rack/multipart.rb#40
    def parse_multipart(env, params = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/multipart.rb#25
Rack::Multipart::ATTRIBUTE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#24
Rack::Multipart::ATTRIBUTE_CHAR = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#19
Rack::Multipart::BROKEN = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#17
Rack::Multipart::CONDISP = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#36
Rack::Multipart::DISPPARM = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#13
Rack::Multipart::EOL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart.rb#32
Rack::Multipart::EXTENDED_INITIAL_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#34
Rack::Multipart::EXTENDED_INITIAL_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#33
Rack::Multipart::EXTENDED_INITIAL_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#29
Rack::Multipart::EXTENDED_OTHER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#31
Rack::Multipart::EXTENDED_OTHER_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#30
Rack::Multipart::EXTENDED_OTHER_VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#35
Rack::Multipart::EXTENDED_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/generator.rb#5
class Rack::Multipart::Generator
  # source://rack//lib/rack/multipart/generator.rb#6
  def initialize(params, first = T.unsafe(nil)); end

  # source://rack//lib/rack/multipart/generator.rb#14
  def dump; end

  private

  # source://rack//lib/rack/multipart/generator.rb#87
  def content_for_other(file, name); end

  # source://rack//lib/rack/multipart/generator.rb#75
  def content_for_tempfile(io, file, name); end

  # source://rack//lib/rack/multipart/generator.rb#50
  def flattened_params; end

  # source://rack//lib/rack/multipart/generator.rb#35
  def multipart?; end
end

# source://rack//lib/rack/multipart.rb#15
Rack::Multipart::MULTIPART = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#14
Rack::Multipart::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart.rb#21
Rack::Multipart::MULTIPART_CONTENT_DISPOSITION = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#22
Rack::Multipart::MULTIPART_CONTENT_ID = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#20
Rack::Multipart::MULTIPART_CONTENT_TYPE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/parser.rb#7
class Rack::Multipart::MultipartPartLimitError < ::Errno::EMFILE; end

# source://rack//lib/rack/multipart/parser.rb#8
class Rack::Multipart::MultipartTotalPartLimitError < ::StandardError; end

# source://rack//lib/rack/multipart/parser.rb#10
class Rack::Multipart::Parser
  # source://rack//lib/rack/multipart/parser.rb#178
  def initialize(boundary, tempfile, bufsize, query_parser); end

  # source://rack//lib/rack/multipart/parser.rb#196
  def on_read(content); end

  # source://rack//lib/rack/multipart/parser.rb#202
  def result; end

  # source://rack//lib/rack/multipart/parser.rb#176
  def state; end

  private

  # source://rack//lib/rack/multipart/parser.rb#294
  def consume_boundary; end

  # source://rack//lib/rack/multipart/parser.rb#292
  def full_boundary; end

  # source://rack//lib/rack/multipart/parser.rb#304
  def get_filename(head); end

  # source://rack//lib/rack/multipart/parser.rb#240
  def handle_consume_token; end

  # source://rack//lib/rack/multipart/parser.rb#369
  def handle_empty_content!(content); end

  # source://rack//lib/rack/multipart/parser.rb#231
  def handle_fast_forward; end

  # source://rack//lib/rack/multipart/parser.rb#273
  def handle_mime_body; end

  # source://rack//lib/rack/multipart/parser.rb#250
  def handle_mime_head; end

  # source://rack//lib/rack/multipart/parser.rb#214
  def run_parser; end

  # source://rack//lib/rack/multipart/parser.rb#341
  def tag_multipart_encoding(filename, content_type, name, body); end

  class << self
    # source://rack//lib/rack/multipart/parser.rb#64
    def parse(io, content_length, content_type, tmpfile, bufsize, qp); end

    # source://rack//lib/rack/multipart/parser.rb#57
    def parse_boundary(content_type); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#19
Rack::Multipart::Parser::BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/parser.rb#13
Rack::Multipart::Parser::BUFSIZE = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/multipart/parser.rb#21
class Rack::Multipart::Parser::BoundedIO
  # source://rack//lib/rack/multipart/parser.rb#22
  def initialize(io, content_length); end

  # source://rack//lib/rack/multipart/parser.rb#28
  def read(size, outbuf = T.unsafe(nil)); end

  # source://rack//lib/rack/multipart/parser.rb#49
  def rewind; end
end

# source://rack//lib/rack/multipart/parser.rb#339
Rack::Multipart::Parser::CHARSET = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart/parser.rb#85
class Rack::Multipart::Parser::Collector
  include ::Enumerable

  # source://rack//lib/rack/multipart/parser.rb#121
  def initialize(tempfile); end

  # source://rack//lib/rack/multipart/parser.rb#127
  def each; end

  # source://rack//lib/rack/multipart/parser.rb#147
  def on_mime_body(mime_index, content); end

  # source://rack//lib/rack/multipart/parser.rb#151
  def on_mime_finish(mime_index); end

  # source://rack//lib/rack/multipart/parser.rb#131
  def on_mime_head(mime_index, head, filename, content_type, name); end

  private

  # source://rack//lib/rack/multipart/parser.rb#156
  def check_part_limits; end
end

# source://rack//lib/rack/multipart/parser.rb#109
class Rack::Multipart::Parser::Collector::BufferPart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack//lib/rack/multipart/parser.rb#111
  def close; end

  # source://rack//lib/rack/multipart/parser.rb#110
  def file?; end
end

# source://rack//lib/rack/multipart/parser.rb#86
class Rack::Multipart::Parser::Collector::MimePart < ::Struct
  # source://rack//lib/rack/multipart/parser.rb#87
  def get_data; end
end

# source://rack//lib/rack/multipart/parser.rb#114
class Rack::Multipart::Parser::Collector::TempfilePart < ::Rack::Multipart::Parser::Collector::MimePart
  # source://rack//lib/rack/multipart/parser.rb#116
  def close; end

  # source://rack//lib/rack/multipart/parser.rb#115
  def file?; end
end

# source://rack//lib/rack/multipart/parser.rb#55
Rack::Multipart::Parser::EMPTY = T.let(T.unsafe(nil), Rack::Multipart::Parser::MultipartInfo)

# source://rack//lib/rack/multipart/parser.rb#54
class Rack::Multipart::Parser::MultipartInfo < ::Struct
  def params; end

  # source://rack//lib/rack/multipart/parser.rb#54
  def params=(_); end

  def tmp_files; end

  # source://rack//lib/rack/multipart/parser.rb#54
  def tmp_files=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://rack//lib/rack/multipart/parser.rb#15
Rack::Multipart::Parser::TEMPFILE_FACTORY = T.let(T.unsafe(nil), Proc)

# source://rack//lib/rack/multipart/parser.rb#14
Rack::Multipart::Parser::TEXT_PLAIN = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/multipart.rb#28
Rack::Multipart::REGULAR_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#27
Rack::Multipart::REGULAR_PARAMETER_NAME = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#37
Rack::Multipart::RFC2183 = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#26
Rack::Multipart::SECTION = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart.rb#16
Rack::Multipart::TOKEN = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/multipart/uploaded_file.rb#5
class Rack::Multipart::UploadedFile
  # source://rack//lib/rack/multipart/uploaded_file.rb#12
  def initialize(filepath = T.unsafe(nil), ct = T.unsafe(nil), bin = T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#10
  def content_type; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#10
  def content_type=(_arg0); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#27
  def local_path; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#36
  def method_missing(method_name, *args, &block); end

  # source://rack//lib/rack/multipart/uploaded_file.rb#7
  def original_filename; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#27
  def path; end

  # source://rack//lib/rack/multipart/uploaded_file.rb#32
  def respond_to?(*args); end
end

# source://rack//lib/rack/multipart.rb#18
Rack::Multipart::VALUE = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/null_logger.rb#4
class Rack::NullLogger
  # source://rack//lib/rack/null_logger.rb#5
  def initialize(app); end

  # source://rack//lib/rack/null_logger.rb#37
  def <<(msg); end

  # source://rack//lib/rack/null_logger.rb#36
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#9
  def call(env); end

  # source://rack//lib/rack/null_logger.rb#35
  def close; end

  # source://rack//lib/rack/null_logger.rb#27
  def datetime_format; end

  # source://rack//lib/rack/null_logger.rb#32
  def datetime_format=(datetime_format); end

  # source://rack//lib/rack/null_logger.rb#15
  def debug(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#21
  def debug?; end

  # source://rack//lib/rack/null_logger.rb#17
  def error(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#23
  def error?; end

  # source://rack//lib/rack/null_logger.rb#18
  def fatal(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#24
  def fatal?; end

  # source://rack//lib/rack/null_logger.rb#28
  def formatter; end

  # source://rack//lib/rack/null_logger.rb#33
  def formatter=(formatter); end

  # source://rack//lib/rack/null_logger.rb#14
  def info(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#20
  def info?; end

  # source://rack//lib/rack/null_logger.rb#25
  def level; end

  # source://rack//lib/rack/null_logger.rb#30
  def level=(level); end

  # source://rack//lib/rack/null_logger.rb#26
  def progname; end

  # source://rack//lib/rack/null_logger.rb#31
  def progname=(progname); end

  # source://rack//lib/rack/null_logger.rb#29
  def sev_threshold; end

  # source://rack//lib/rack/null_logger.rb#34
  def sev_threshold=(sev_threshold); end

  # source://rack//lib/rack/null_logger.rb#19
  def unknown(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#16
  def warn(progname = T.unsafe(nil), &block); end

  # source://rack//lib/rack/null_logger.rb#22
  def warn?; end
end

# source://rack//lib/rack.rb#45
Rack::OPTIONS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#42
Rack::PATCH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#21
Rack::PATH_INFO = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#40
Rack::POST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#41
Rack::PUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#25
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/query_parser.rb#4
class Rack::QueryParser
  # source://rack//lib/rack/query_parser.rb#29
  def initialize(params_class, key_space_limit, param_depth_limit); end

  # source://rack//lib/rack/query_parser.rb#27
  def key_space_limit; end

  # source://rack//lib/rack/query_parser.rb#128
  def make_params; end

  # source://rack//lib/rack/query_parser.rb#136
  def new_depth_limit(param_depth_limit); end

  # source://rack//lib/rack/query_parser.rb#132
  def new_space_limit(key_space_limit); end

  # source://rack//lib/rack/query_parser.rb#87
  def normalize_params(params, name, v, depth); end

  # source://rack//lib/rack/query_parser.rb#27
  def param_depth_limit; end

  # source://rack//lib/rack/query_parser.rb#68
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack//lib/rack/query_parser.rb#40
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  private

  # source://rack//lib/rack/query_parser.rb#146
  def params_hash_has_key?(hash, key); end

  # source://rack//lib/rack/query_parser.rb#142
  def params_hash_type?(obj); end

  # source://rack//lib/rack/query_parser.rb#158
  def unescape(s); end

  class << self
    # source://rack//lib/rack/query_parser.rb#23
    def make_default(key_space_limit, param_depth_limit); end
  end
end

# source://rack//lib/rack/query_parser.rb#8
Rack::QueryParser::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/query_parser.rb#7
Rack::QueryParser::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/query_parser.rb#17
class Rack::QueryParser::InvalidParameterError < ::ArgumentError; end

# source://rack//lib/rack/query_parser.rb#12
class Rack::QueryParser::ParameterTypeError < ::TypeError; end

# source://rack//lib/rack/query_parser.rb#162
class Rack::QueryParser::Params
  # source://rack//lib/rack/query_parser.rb#163
  def initialize(limit); end

  # source://rack//lib/rack/query_parser.rb#169
  def [](key); end

  # source://rack//lib/rack/query_parser.rb#173
  def []=(key, value); end

  # source://rack//lib/rack/query_parser.rb#179
  def key?(key); end

  # source://rack//lib/rack/query_parser.rb#201
  def to_h; end

  # source://rack//lib/rack/query_parser.rb#201
  def to_params_hash; end
end

# source://rack//lib/rack/query_parser.rb#21
class Rack::QueryParser::ParamsTooDeepError < ::RangeError; end

# source://rack//lib/rack.rb#53
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#63
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#65
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#55
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#64
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#54
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#76
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#67
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#68
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#60
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#59
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#66
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#72
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#73
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#70
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#69
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#71
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#74
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#75
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#61
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#56
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#57
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#77
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#58
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#52
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#62
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#51
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/version.rb#23
Rack::RELEASE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#22
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#23
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/recursive.rb#34
class Rack::Recursive
  # source://rack//lib/rack/recursive.rb#35
  def initialize(app); end

  # source://rack//lib/rack/recursive.rb#43
  def _call(env); end

  # source://rack//lib/rack/recursive.rb#39
  def call(env); end

  # source://rack//lib/rack/recursive.rb#50
  def include(env, path); end
end

# source://rack//lib/rack/reloader.rb#24
class Rack::Reloader
  # source://rack//lib/rack/reloader.rb#27
  def initialize(app, cooldown = T.unsafe(nil), backend = T.unsafe(nil)); end

  # source://rack//lib/rack/reloader.rb#38
  def call(env); end

  # source://rack//lib/rack/reloader.rb#52
  def reload!(stderr = T.unsafe(nil)); end

  # source://rack//lib/rack/reloader.rb#60
  def safe_load(file, mtime, stderr = T.unsafe(nil)); end
end

# source://rack//lib/rack/reloader.rb#70
module Rack::Reloader::Stat
  # source://rack//lib/rack/reloader.rb#90
  def figure_path(file, paths); end

  # source://rack//lib/rack/reloader.rb#71
  def rotation; end

  # source://rack//lib/rack/reloader.rb#105
  def safe_stat(file); end
end

# source://rack//lib/rack/request.rb#12
class Rack::Request
  include ::Rack::Request::Env
  include ::Rack::Request::Helpers

  # source://rack//lib/rack/request.rb#26
  def initialize(env); end

  # source://rack//lib/rack/request.rb#40
  def delete_param(k); end

  # source://rack//lib/rack/request.rb#31
  def params; end

  # source://rack//lib/rack/request.rb#31
  def query; end

  # source://rack//lib/rack/request.rb#35
  def update_param(k, v); end

  # source://yard/0.9.34/lib/yard/server/rack_adapter.rb#94
  def version_supplied; end

  # source://yard/0.9.34/lib/yard/server/rack_adapter.rb#94
  def version_supplied=(_arg0); end

  # source://yard/0.9.34/lib/yard/server/rack_adapter.rb#96
  def xhr?; end

  class << self
    # source://rack//lib/rack/request.rb#16
    def ip_filter; end

    # source://rack//lib/rack/request.rb#16
    def ip_filter=(_arg0); end
  end
end

# source://rack//lib/rack/request.rb#20
Rack::Request::ALLOWED_SCHEMES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/request.rb#46
module Rack::Request::Env
  # source://rack//lib/rack/request.rb#50
  def initialize(env); end

  # source://rack//lib/rack/request.rb#91
  def add_header(key, v); end

  # source://rack//lib/rack/request.rb#102
  def delete_header(name); end

  # source://rack//lib/rack/request.rb#73
  def each_header(&block); end

  # source://rack//lib/rack/request.rb#48
  def env; end

  # source://rack//lib/rack/request.rb#68
  def fetch_header(name, &block); end

  # source://rack//lib/rack/request.rb#62
  def get_header(name); end

  # source://rack//lib/rack/request.rb#57
  def has_header?(name); end

  # source://rack//lib/rack/request.rb#78
  def set_header(name, v); end

  private

  # source://rack//lib/rack/request.rb#106
  def initialize_copy(other); end
end

# source://rack//lib/rack/request.rb#111
module Rack::Request::Helpers
  # source://rack//lib/rack/request.rb#426
  def GET; end

  # source://rack//lib/rack/request.rb#440
  def POST; end

  # source://rack//lib/rack/request.rb#532
  def [](key); end

  # source://rack//lib/rack/request.rb#543
  def []=(key, value); end

  # source://rack//lib/rack/request.rb#519
  def accept_encoding; end

  # source://rack//lib/rack/request.rb#523
  def accept_language; end

  # source://rack//lib/rack/request.rb#227
  def authority; end

  # source://rack//lib/rack/request.rb#502
  def base_url; end

  # source://rack//lib/rack/request.rb#150
  def body; end

  # source://rack//lib/rack/request.rb#400
  def content_charset; end

  # source://rack//lib/rack/request.rb#159
  def content_length; end

  # source://rack//lib/rack/request.rb#271
  def content_type; end

  # source://rack//lib/rack/request.rb#256
  def cookies; end

  # source://rack//lib/rack/request.rb#181
  def delete?; end

  # source://rack//lib/rack/request.rb#497
  def delete_param(k); end

  # source://rack//lib/rack/request.rb#412
  def form_data?; end

  # source://rack//lib/rack/request.rb#344
  def forwarded_authority; end

  # source://rack//lib/rack/request.rb#330
  def forwarded_for; end

  # source://rack//lib/rack/request.rb#338
  def forwarded_port; end

  # source://rack//lib/rack/request.rb#515
  def fullpath; end

  # source://rack//lib/rack/request.rb#184
  def get?; end

  # source://rack//lib/rack/request.rb#187
  def head?; end

  # source://rack//lib/rack/request.rb#296
  def host; end

  # source://rack//lib/rack/request.rb#281
  def host_authority; end

  # source://rack//lib/rack/request.rb#285
  def host_with_port(authority = T.unsafe(nil)); end

  # source://rack//lib/rack/request.rb#304
  def hostname; end

  # source://rack//lib/rack/request.rb#354
  def ip; end

  # source://rack//lib/rack/request.rb#193
  def link?; end

  # source://rack//lib/rack/request.rb#160
  def logger; end

  # source://rack//lib/rack/request.rb#383
  def media_type; end

  # source://rack//lib/rack/request.rb#392
  def media_type_params; end

  # source://rack//lib/rack/request.rb#162
  def multithread?; end

  # source://rack//lib/rack/request.rb#190
  def options?; end

  # source://rack//lib/rack/request.rb#468
  def params; end

  # source://rack//lib/rack/request.rb#421
  def parseable_data?; end

  # source://rack//lib/rack/request.rb#196
  def patch?; end

  # source://rack//lib/rack/request.rb#511
  def path; end

  # source://rack//lib/rack/request.rb#154
  def path_info; end

  # source://rack//lib/rack/request.rb#155
  def path_info=(s); end

  # source://rack//lib/rack/request.rb#308
  def port; end

  # source://rack//lib/rack/request.rb#199
  def post?; end

  # source://rack//lib/rack/request.rb#202
  def put?; end

  # source://rack//lib/rack/request.rb#158
  def query_string; end

  # source://rack//lib/rack/request.rb#165
  def referer; end

  # source://rack//lib/rack/request.rb#165
  def referrer; end

  # source://rack//lib/rack/request.rb#157
  def request_method; end

  # source://rack//lib/rack/request.rb#210
  def scheme; end

  # source://rack//lib/rack/request.rb#151
  def script_name; end

  # source://rack//lib/rack/request.rb#152
  def script_name=(s); end

  # source://rack//lib/rack/request.rb#233
  def server_authority; end

  # source://rack//lib/rack/request.rb#246
  def server_name; end

  # source://rack//lib/rack/request.rb#250
  def server_port; end

  # source://rack//lib/rack/request.rb#168
  def session; end

  # source://rack//lib/rack/request.rb#174
  def session_options; end

  # source://rack//lib/rack/request.rb#350
  def ssl?; end

  # source://rack//lib/rack/request.rb#205
  def trace?; end

  # source://rack//lib/rack/request.rb#527
  def trusted_proxy?(ip); end

  # source://rack//lib/rack/request.rb#208
  def unlink?; end

  # source://rack//lib/rack/request.rb#477
  def update_param(k, v); end

  # source://rack//lib/rack/request.rb#507
  def url; end

  # source://rack//lib/rack/request.rb#161
  def user_agent; end

  # source://rack//lib/rack/request.rb#552
  def values_at(*keys); end

  # source://rack//lib/rack/request.rb#276
  def xhr?; end

  private

  # source://rack//lib/rack/request.rb#641
  def allowed_scheme(header); end

  # source://rack//lib/rack/request.rb#558
  def default_session; end

  # source://rack//lib/rack/request.rb#645
  def extract_proto_header(header); end

  # source://rack//lib/rack/request.rb#636
  def forwarded_scheme; end

  # source://rack//lib/rack/request.rb#574
  def parse_http_accept_header(header); end

  # source://rack//lib/rack/request.rb#593
  def parse_multipart; end

  # source://rack//lib/rack/request.rb#589
  def parse_query(qs, d = T.unsafe(nil)); end

  # source://rack//lib/rack/request.rb#585
  def query_parser; end

  # source://rack//lib/rack/request.rb#632
  def reject_trusted_ip_addresses(ip_addresses); end

  # source://rack//lib/rack/request.rb#619
  def split_authority(authority); end

  # source://rack//lib/rack/request.rb#597
  def split_header(value); end

  # source://rack//lib/rack/request.rb#561
  def wrap_ipv6(host); end
end

# source://rack//lib/rack/request.rb#601
Rack::Request::Helpers::AUTHORITY = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/request.rb#130
Rack::Request::Helpers::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/request.rb#115
Rack::Request::Helpers::FORM_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/request.rb#133
Rack::Request::Helpers::HTTP_X_FORWARDED_FOR = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#136
Rack::Request::Helpers::HTTP_X_FORWARDED_HOST = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#145
Rack::Request::Helpers::HTTP_X_FORWARDED_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#142
Rack::Request::Helpers::HTTP_X_FORWARDED_PROTO = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#139
Rack::Request::Helpers::HTTP_X_FORWARDED_SCHEME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#148
Rack::Request::Helpers::HTTP_X_FORWARDED_SSL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/request.rb#123
Rack::Request::Helpers::PARSEABLE_DATA_MEDIA_TYPES = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/request.rb#21
Rack::Request::SCHEME_WHITELIST = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/response.rb#18
class Rack::Response
  include ::Rack::Response::Helpers

  # source://rack//lib/rack/response.rb#42
  def initialize(body = T.unsafe(nil), status = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#127
  def [](key); end

  # source://rack//lib/rack/response.rb#128
  def []=(key, v); end

  # source://rack//lib/rack/response.rb#26
  def body; end

  # source://rack//lib/rack/response.rb#26
  def body=(_arg0); end

  # source://rack//lib/rack/response.rb#73
  def chunked?; end

  # source://rack//lib/rack/response.rb#118
  def close; end

  # source://rack//lib/rack/response.rb#129
  def delete_header(key); end

  # source://rack//lib/rack/response.rb#98
  def each(&callback); end

  # source://rack//lib/rack/response.rb#122
  def empty?; end

  # source://rack//lib/rack/response.rb#80
  def finish(&block); end

  # source://rack//lib/rack/response.rb#127
  def get_header(key); end

  # source://rack//lib/rack/response.rb#126
  def has_header?(key); end

  # source://rack//lib/rack/response.rb#27
  def header; end

  # source://rack//lib/rack/response.rb#27
  def headers; end

  # source://rack//lib/rack/response.rb#26
  def length; end

  # source://rack//lib/rack/response.rb#26
  def length=(_arg0); end

  # source://rack//lib/rack/response.rb#68
  def redirect(target, status = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#128
  def set_header(key, v); end

  # source://rack//lib/rack/response.rb#26
  def status; end

  # source://rack//lib/rack/response.rb#26
  def status=(_arg0); end

  # source://rack//lib/rack/response.rb#80
  def to_a(&block); end

  # source://rack//lib/rack/response.rb#112
  def write(chunk); end

  class << self
    # source://rack//lib/rack/response.rb#19
    def [](status, headers, body); end
  end
end

# source://rack//lib/rack/response.rb#23
Rack::Response::CHUNKED = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/response.rb#134
module Rack::Response::Helpers
  # source://rack//lib/rack/response.rb#145
  def accepted?; end

  # source://rack//lib/rack/response.rb#171
  def add_header(key, v); end

  # source://rack//lib/rack/response.rb#148
  def bad_request?; end

  # source://rack//lib/rack/response.rb#246
  def cache!(duration = T.unsafe(nil), directive: T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#229
  def cache_control; end

  # source://rack//lib/rack/response.rb#233
  def cache_control=(v); end

  # source://rack//lib/rack/response.rb#140
  def client_error?; end

  # source://rack//lib/rack/response.rb#199
  def content_length; end

  # source://rack//lib/rack/response.rb#182
  def content_type; end

  # source://rack//lib/rack/response.rb#187
  def content_type=(content_type); end

  # source://rack//lib/rack/response.rb#144
  def created?; end

  # source://rack//lib/rack/response.rb#217
  def delete_cookie(key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/response.rb#238
  def do_not_cache!; end

  # source://rack//lib/rack/response.rb#253
  def etag; end

  # source://rack//lib/rack/response.rb#257
  def etag=(v); end

  # source://rack//lib/rack/response.rb#150
  def forbidden?; end

  # source://rack//lib/rack/response.rb#158
  def include?(header); end

  # source://rack//lib/rack/response.rb#137
  def informational?; end

  # source://rack//lib/rack/response.rb#135
  def invalid?; end

  # source://rack//lib/rack/response.rb#204
  def location; end

  # source://rack//lib/rack/response.rb#208
  def location=(location); end

  # source://rack//lib/rack/response.rb#191
  def media_type; end

  # source://rack//lib/rack/response.rb#195
  def media_type_params; end

  # source://rack//lib/rack/response.rb#152
  def method_not_allowed?; end

  # source://rack//lib/rack/response.rb#147
  def moved_permanently?; end

  # source://rack//lib/rack/response.rb#146
  def no_content?; end

  # source://rack//lib/rack/response.rb#151
  def not_found?; end

  # source://rack//lib/rack/response.rb#143
  def ok?; end

  # source://rack//lib/rack/response.rb#153
  def precondition_failed?; end

  # source://rack//lib/rack/response.rb#156
  def redirect?; end

  # source://rack//lib/rack/response.rb#139
  def redirection?; end

  # source://rack//lib/rack/response.rb#141
  def server_error?; end

  # source://rack//lib/rack/response.rb#212
  def set_cookie(key, value); end

  # source://rack//lib/rack/response.rb#221
  def set_cookie_header; end

  # source://rack//lib/rack/response.rb#225
  def set_cookie_header=(v); end

  # source://rack//lib/rack/response.rb#138
  def successful?; end

  # source://rack//lib/rack/response.rb#149
  def unauthorized?; end

  # source://rack//lib/rack/response.rb#154
  def unprocessable?; end

  protected

  # source://rack//lib/rack/response.rb#287
  def append(chunk); end

  # source://rack//lib/rack/response.rb#263
  def buffered_body!; end
end

# source://rack//lib/rack/response.rb#301
class Rack::Response::Raw
  include ::Rack::Response::Helpers

  # source://rack//lib/rack/response.rb#307
  def initialize(status, headers); end

  # source://rack//lib/rack/response.rb#315
  def delete_header(key); end

  # source://rack//lib/rack/response.rb#313
  def get_header(key); end

  # source://rack//lib/rack/response.rb#312
  def has_header?(key); end

  # source://rack//lib/rack/response.rb#304
  def headers; end

  # source://rack//lib/rack/response.rb#314
  def set_header(key, v); end

  # source://rack//lib/rack/response.rb#305
  def status; end

  # source://rack//lib/rack/response.rb#305
  def status=(_arg0); end
end

# source://rack//lib/rack/response.rb#24
Rack::Response::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/rewindable_input.rb#16
class Rack::RewindableInput
  # source://rack//lib/rack/rewindable_input.rb#17
  def initialize(io); end

  # source://rack//lib/rack/rewindable_input.rb#48
  def close; end

  # source://rack//lib/rack/rewindable_input.rb#33
  def each(&block); end

  # source://rack//lib/rack/rewindable_input.rb#23
  def gets; end

  # source://rack//lib/rack/rewindable_input.rb#28
  def read(*args); end

  # source://rack//lib/rack/rewindable_input.rb#38
  def rewind; end

  private

  # source://rack//lib/rack/rewindable_input.rb#90
  def filesystem_has_posix_semantics?; end

  # source://rack//lib/rack/rewindable_input.rb#61
  def make_rewindable; end
end

# source://rack//lib/rack/runtime.rb#10
class Rack::Runtime
  # source://rack//lib/rack/runtime.rb#14
  def initialize(app, name = T.unsafe(nil)); end

  # source://rack//lib/rack/runtime.rb#20
  def call(env); end
end

# source://rack//lib/rack/runtime.rb#11
Rack::Runtime::FORMAT_STRING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/runtime.rb#12
Rack::Runtime::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#24
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#27
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#28
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#26
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#33
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/sendfile.rb#100
class Rack::Sendfile
  # source://rack//lib/rack/sendfile.rb#101
  def initialize(app, variation = T.unsafe(nil), mappings = T.unsafe(nil)); end

  # source://rack//lib/rack/sendfile.rb#109
  def call(env); end

  private

  # source://rack//lib/rack/sendfile.rb#149
  def map_accel_path(env, path); end

  # source://rack//lib/rack/sendfile.rb#143
  def variation(env); end
end

# source://rack//lib/rack/server.rb#8
class Rack::Server
  # source://rack//lib/rack/server.rb#215
  def initialize(options = T.unsafe(nil)); end

  # source://rack//lib/rack/server.rb#248
  def app; end

  # source://rack//lib/rack/server.rb#234
  def default_options; end

  # source://rack//lib/rack/server.rb#282
  def middleware; end

  # source://rack//lib/rack/server.rb#229
  def options; end

  # source://rack//lib/rack/server.rb#171
  def options=(_arg0); end

  # source://rack//lib/rack/server.rb#330
  def server; end

  # source://rack//lib/rack/server.rb#286
  def start(&block); end

  private

  # source://rack//lib/rack/server.rb#411
  def build_app(app); end

  # source://rack//lib/rack/server.rb#344
  def build_app_and_options_from_config; end

  # source://rack//lib/rack/server.rb#392
  def build_app_from_string; end

  # source://rack//lib/rack/server.rb#440
  def check_pid!; end

  # source://rack//lib/rack/server.rb#425
  def daemonize_app; end

  # source://rack//lib/rack/server.rb#354
  def handle_profiling(heapfile, profile_mode, filename); end

  # source://rack//lib/rack/server.rb#382
  def make_profile_name(filename); end

  # source://rack//lib/rack/server.rb#407
  def opt_parser; end

  # source://rack//lib/rack/server.rb#396
  def parse_options(args); end

  # source://rack//lib/rack/server.rb#450
  def pidfile_process_status; end

  # source://rack//lib/rack/server.rb#421
  def wrapped_app; end

  # source://rack//lib/rack/server.rb#432
  def write_pid; end

  class << self
    # source://rack//lib/rack/server.rb#259
    def default_middleware_by_environment; end

    # source://rack//lib/rack/server.rb#253
    def logging_middleware; end

    # source://rack//lib/rack/server.rb#277
    def middleware; end

    # source://rack//lib/rack/server.rb#167
    def start(options = T.unsafe(nil)); end
  end
end

# source://rack//lib/rack/server.rb#11
class Rack::Server::Options
  # source://rack//lib/rack/server.rb#127
  def handler_opts(options); end

  # source://rack//lib/rack/server.rb#12
  def parse!(args); end
end

# source://rack//lib/rack.rb#136
module Rack::Session; end

# source://rack//lib/rack/session/abstract/id.rb#41
module Rack::Session::Abstract; end

# source://rack//lib/rack/session/abstract/id.rb#487
class Rack::Session::Abstract::ID < ::Rack::Session::Abstract::Persisted
  # source://rack//lib/rack/session/abstract/id.rb#517
  def delete_session(req, sid, options); end

  # source://rack//lib/rack/session/abstract/id.rb#502
  def find_session(req, sid); end

  # source://rack//lib/rack/session/abstract/id.rb#510
  def write_session(req, sid, session, options); end

  class << self
    # source://rack//lib/rack/session/abstract/id.rb#488
    def inherited(klass); end
  end
end

# source://rack//lib/rack/session/abstract/id.rb#233
class Rack::Session::Abstract::Persisted
  # source://rack//lib/rack/session/abstract/id.rb#250
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/session/abstract/id.rb#259
  def call(env); end

  # source://rack//lib/rack/session/abstract/id.rb#373
  def commit_session(req, res); end

  # source://rack//lib/rack/session/abstract/id.rb#263
  def context(env, app = T.unsafe(nil)); end

  # source://rack//lib/rack/session/abstract/id.rb#248
  def default_options; end

  # source://rack//lib/rack/session/abstract/id.rb#248
  def key; end

  # source://rack//lib/rack/session/abstract/id.rb#248
  def sid_secure; end

  private

  # source://rack//lib/rack/session/abstract/id.rb#342
  def commit_session?(req, session, options); end

  # source://rack//lib/rack/session/abstract/id.rb#408
  def cookie_value(data); end

  # source://rack//lib/rack/session/abstract/id.rb#328
  def current_session_id(req); end

  # source://rack//lib/rack/session/abstract/id.rb#448
  def delete_session(req, sid, options); end

  # source://rack//lib/rack/session/abstract/id.rb#320
  def extract_session_id(request); end

  # source://rack//lib/rack/session/abstract/id.rb#433
  def find_session(env, sid); end

  # source://rack//lib/rack/session/abstract/id.rb#359
  def force_options?(options); end

  # source://rack//lib/rack/session/abstract/id.rb#355
  def forced_session_update?(session, options); end

  # source://rack//lib/rack/session/abstract/id.rb#288
  def generate_sid(secure = T.unsafe(nil)); end

  # source://rack//lib/rack/session/abstract/id.rb#278
  def initialize_sid; end

  # source://rack//lib/rack/session/abstract/id.rb#312
  def load_session(req); end

  # source://rack//lib/rack/session/abstract/id.rb#351
  def loaded_session?(session); end

  # source://rack//lib/rack/session/abstract/id.rb#274
  def make_request(env); end

  # source://rack//lib/rack/session/abstract/id.rb#301
  def prepare_session(req); end

  # source://rack//lib/rack/session/abstract/id.rb#363
  def security_matches?(request, options); end

  # source://rack//lib/rack/session/abstract/id.rb#424
  def session_class; end

  # source://rack//lib/rack/session/abstract/id.rb#334
  def session_exists?(req); end

  # source://rack//lib/rack/session/abstract/id.rb#415
  def set_cookie(request, res, cookie); end

  # source://rack//lib/rack/session/abstract/id.rb#441
  def write_session(req, sid, session, options); end
end

# source://rack//lib/rack/session/abstract/id.rb#234
Rack::Session::Abstract::Persisted::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/session/abstract/id.rb#453
class Rack::Session::Abstract::PersistedSecure < ::Rack::Session::Abstract::Persisted
  # source://rack//lib/rack/session/abstract/id.rb#471
  def extract_session_id(*_arg0); end

  # source://rack//lib/rack/session/abstract/id.rb#465
  def generate_sid(*_arg0); end

  private

  # source://rack//lib/rack/session/abstract/id.rb#482
  def cookie_value(data); end

  # source://rack//lib/rack/session/abstract/id.rb#478
  def session_class; end
end

# source://rack//lib/rack/session/abstract/id.rb#454
class Rack::Session::Abstract::PersistedSecure::SecureSessionHash < ::Rack::Session::Abstract::SessionHash
  # source://rack//lib/rack/session/abstract/id.rb#455
  def [](key); end
end

# source://rack//lib/rack/session/abstract/id.rb#44
class Rack::Session::Abstract::SessionHash
  include ::Enumerable

  # source://rack//lib/rack/session/abstract/id.rb#62
  def initialize(store, req); end

  # source://rack//lib/rack/session/abstract/id.rb#82
  def [](key); end

  # source://rack//lib/rack/session/abstract/id.rb#108
  def []=(key, value); end

  # source://rack//lib/rack/session/abstract/id.rb#114
  def clear; end

  # source://rack//lib/rack/session/abstract/id.rb#140
  def delete(key); end

  # source://rack//lib/rack/session/abstract/id.rb#119
  def destroy; end

  # source://rack//lib/rack/session/abstract/id.rb#87
  def dig(key, *keys); end

  # source://rack//lib/rack/session/abstract/id.rb#77
  def each(&block); end

  # source://rack//lib/rack/session/abstract/id.rb#163
  def empty?; end

  # source://rack//lib/rack/session/abstract/id.rb#153
  def exists?; end

  # source://rack//lib/rack/session/abstract/id.rb#92
  def fetch(key, default = T.unsafe(nil), &block); end

  # source://rack//lib/rack/session/abstract/id.rb#101
  def has_key?(key); end

  # source://rack//lib/rack/session/abstract/id.rb#68
  def id; end

  # source://rack//lib/rack/session/abstract/id.rb#46
  def id=(_arg0); end

  # source://rack//lib/rack/session/abstract/id.rb#101
  def include?(key); end

  # source://rack//lib/rack/session/abstract/id.rb#145
  def inspect; end

  # source://rack//lib/rack/session/abstract/id.rb#101
  def key?(key); end

  # source://rack//lib/rack/session/abstract/id.rb#168
  def keys; end

  # source://rack//lib/rack/session/abstract/id.rb#159
  def loaded?; end

  # source://rack//lib/rack/session/abstract/id.rb#129
  def merge!(hash); end

  # source://rack//lib/rack/session/abstract/id.rb#73
  def options; end

  # source://rack//lib/rack/session/abstract/id.rb#135
  def replace(hash); end

  # source://rack//lib/rack/session/abstract/id.rb#108
  def store(key, value); end

  # source://rack//lib/rack/session/abstract/id.rb#124
  def to_hash; end

  # source://rack//lib/rack/session/abstract/id.rb#129
  def update(hash); end

  # source://rack//lib/rack/session/abstract/id.rb#173
  def values; end

  private

  # source://rack//lib/rack/session/abstract/id.rb#188
  def load!; end

  # source://rack//lib/rack/session/abstract/id.rb#180
  def load_for_read!; end

  # source://rack//lib/rack/session/abstract/id.rb#184
  def load_for_write!; end

  # source://rack//lib/rack/session/abstract/id.rb#194
  def stringify_keys(other); end

  class << self
    # source://rack//lib/rack/session/abstract/id.rb#50
    def find(req); end

    # source://rack//lib/rack/session/abstract/id.rb#54
    def set(req, session); end

    # source://rack//lib/rack/session/abstract/id.rb#58
    def set_options(req, options); end
  end
end

# source://rack//lib/rack/session/abstract/id.rb#48
Rack::Session::Abstract::SessionHash::Unspecified = T.let(T.unsafe(nil), Object)

# source://rack//lib/rack/session/cookie.rb#50
class Rack::Session::Cookie < ::Rack::Session::Abstract::PersistedSecure
  # source://rack//lib/rack/session/cookie.rb#107
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/session/cookie.rb#105
  def coder; end

  private

  # source://rack//lib/rack/session/cookie.rb#180
  def delete_session(req, session_id, options); end

  # source://rack//lib/rack/session/cookie.rb#185
  def digest_match?(data, digest); end

  # source://rack//lib/rack/session/cookie.rb#132
  def extract_session_id(request); end

  # source://rack//lib/rack/session/cookie.rb#126
  def find_session(req, sid); end

  # source://rack//lib/rack/session/cookie.rb#192
  def generate_hmac(data, secret); end

  # source://rack//lib/rack/session/cookie.rb#149
  def persistent_session_id!(data, sid = T.unsafe(nil)); end

  # source://rack//lib/rack/session/cookie.rb#196
  def secure?(options); end

  # source://rack//lib/rack/session/cookie.rb#136
  def unpacked_cookie_data(request); end

  # source://rack//lib/rack/session/cookie.rb#164
  def write_session(req, session_id, session, options); end
end

# source://rack//lib/rack/session/cookie.rb#51
class Rack::Session::Cookie::Base64
  # source://rack//lib/rack/session/cookie.rb#56
  def decode(str); end

  # source://rack//lib/rack/session/cookie.rb#52
  def encode(str); end
end

# source://rack//lib/rack/session/cookie.rb#74
class Rack::Session::Cookie::Base64::JSON < ::Rack::Session::Cookie::Base64
  # source://rack//lib/rack/session/cookie.rb#79
  def decode(str); end

  # source://rack//lib/rack/session/cookie.rb#75
  def encode(obj); end
end

# source://rack//lib/rack/session/cookie.rb#61
class Rack::Session::Cookie::Base64::Marshal < ::Rack::Session::Cookie::Base64
  # source://rack//lib/rack/session/cookie.rb#66
  def decode(str); end

  # source://rack//lib/rack/session/cookie.rb#62
  def encode(str); end
end

# source://rack//lib/rack/session/cookie.rb#85
class Rack::Session::Cookie::Base64::ZipJSON < ::Rack::Session::Cookie::Base64
  # source://rack//lib/rack/session/cookie.rb#90
  def decode(str); end

  # source://rack//lib/rack/session/cookie.rb#86
  def encode(obj); end
end

# source://rack//lib/rack/session/cookie.rb#100
class Rack::Session::Cookie::Identity
  # source://rack//lib/rack/session/cookie.rb#102
  def decode(str); end

  # source://rack//lib/rack/session/cookie.rb#101
  def encode(str); end
end

# source://rack//lib/rack/session/cookie.rb#155
class Rack::Session::Cookie::SessionId
  # source://rack//lib/rack/session/cookie.rb#158
  def initialize(session_id, cookie_value); end

  # source://rack//lib/rack/session/cookie.rb#156
  def cookie_value; end
end

# source://rack//lib/rack/session/pool.rb#29
class Rack::Session::Pool < ::Rack::Session::Abstract::PersistedSecure
  # source://rack//lib/rack/session/pool.rb#33
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/session/pool.rb#63
  def delete_session(req, session_id, options); end

  # source://rack//lib/rack/session/pool.rb#46
  def find_session(req, sid); end

  # source://rack//lib/rack/session/pool.rb#39
  def generate_sid; end

  # source://rack//lib/rack/session/pool.rb#30
  def mutex; end

  # source://rack//lib/rack/session/pool.rb#30
  def pool; end

  # source://rack//lib/rack/session/pool.rb#71
  def with_lock(req); end

  # source://rack//lib/rack/session/pool.rb#56
  def write_session(req, session_id, new_session, options); end

  private

  # source://rack//lib/rack/session/pool.rb#80
  def get_session_with_fallback(sid); end
end

# source://rack//lib/rack/session/pool.rb#31
Rack::Session::Pool::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/session/abstract/id.rb#15
class Rack::Session::SessionId
  # source://rack//lib/rack/session/abstract/id.rb#20
  def initialize(public_id); end

  # source://rack//lib/rack/session/abstract/id.rb#18
  def cookie_value; end

  # source://rack//lib/rack/session/abstract/id.rb#31
  def empty?; end

  # source://rack//lib/rack/session/abstract/id.rb#32
  def inspect; end

  # source://rack//lib/rack/session/abstract/id.rb#24
  def private_id; end

  # source://rack//lib/rack/session/abstract/id.rb#18
  def public_id; end

  # source://rack//lib/rack/session/abstract/id.rb#18
  def to_s; end

  private

  # source://rack//lib/rack/session/abstract/id.rb#36
  def hash_sid(sid); end
end

# source://rack//lib/rack/session/abstract/id.rb#16
Rack::Session::SessionId::ID_VERSION = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/show_exceptions.rb#15
class Rack::ShowExceptions
  # source://rack//lib/rack/show_exceptions.rb#18
  def initialize(app); end

  # source://rack//lib/rack/show_exceptions.rb#22
  def call(env); end

  # source://rack//lib/rack/show_exceptions.rb#57
  def dump_exception(exception); end

  # source://rack//lib/rack/show_exceptions.rb#103
  def h(obj); end

  # source://rack//lib/rack/show_exceptions.rb#48
  def prefers_plaintext?(env); end

  # source://rack//lib/rack/show_exceptions.rb#63
  def pretty(env, exception); end

  # source://rack//lib/rack/show_exceptions.rb#99
  def template; end

  private

  # source://rack//lib/rack/show_exceptions.rb#52
  def accepts_html?(env); end
end

# source://rack//lib/rack/show_exceptions.rb#16
Rack::ShowExceptions::CONTEXT = T.let(T.unsafe(nil), Integer)

# source://rack//lib/rack/show_exceptions.rb#118
Rack::ShowExceptions::TEMPLATE = T.let(T.unsafe(nil), ERB)

# source://rack//lib/rack/show_status.rb#13
class Rack::ShowStatus
  # source://rack//lib/rack/show_status.rb#14
  def initialize(app); end

  # source://rack//lib/rack/show_status.rb#19
  def call(env); end

  # source://rack//lib/rack/show_status.rb#44
  def h(obj); end
end

# source://rack//lib/rack/show_status.rb#59
Rack::ShowStatus::TEMPLATE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/static.rb#88
class Rack::Static
  # source://rack//lib/rack/static.rb#91
  def initialize(app, options = T.unsafe(nil)); end

  # source://rack//lib/rack/static.rb#107
  def add_index_root?(path); end

  # source://rack//lib/rack/static.rb#166
  def applicable_rules(path); end

  # source://rack//lib/rack/static.rb#123
  def call(env); end

  # source://rack//lib/rack/static.rb#119
  def can_serve(path); end

  # source://rack//lib/rack/static.rb#111
  def overwrite_file_path(path); end

  # source://rack//lib/rack/static.rb#115
  def route_file(path); end
end

# source://rack//lib/rack.rb#48
Rack::TRACE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack.rb#34
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/tempfile_reaper.rb#8
class Rack::TempfileReaper
  # source://rack//lib/rack/tempfile_reaper.rb#9
  def initialize(app); end

  # source://rack//lib/rack/tempfile_reaper.rb#13
  def call(env); end
end

# source://rack//lib/rack.rb#47
Rack::UNLINK = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/urlmap.rb#18
class Rack::URLMap
  # source://rack//lib/rack/urlmap.rb#19
  def initialize(map = T.unsafe(nil)); end

  # source://rack//lib/rack/urlmap.rb#46
  def call(env); end

  # source://rack//lib/rack/urlmap.rb#23
  def remap(map); end

  private

  # source://rack//lib/rack/urlmap.rb#85
  def casecmp?(v1, v2); end
end

# source://rack//lib/rack/utils.rb#16
module Rack::Utils
  private

  # source://rack//lib/rack/utils.rb#237
  def add_cookie_to_header(header, key, value); end

  # source://rack//lib/rack/utils.rb#320
  def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#159
  def best_q_match(q_value_header, available_mimes); end

  # source://rack//lib/rack/utils.rb#126
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#116
  def build_query(params); end

  # source://rack//lib/rack/utils.rb#352
  def byte_ranges(env, size); end

  # source://rack//lib/rack/utils.rb#606
  def clean_path_info(path_info); end

  # source://rack//lib/rack/utils.rb#97
  def clock_time; end

  # source://rack//lib/rack/utils.rb#313
  def delete_cookie_header!(header, key, value = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#38
  def escape(s); end

  # source://rack//lib/rack/utils.rb#184
  def escape_html(string); end

  # source://rack//lib/rack/utils.rb#44
  def escape_path(s); end

  # source://rack//lib/rack/utils.rb#357
  def get_byte_ranges(http_range, size); end

  # source://rack//lib/rack/utils.rb#283
  def make_delete_cookie_header(header, key, value); end

  # source://rack//lib/rack/utils.rb#220
  def parse_cookies(env); end

  # source://rack//lib/rack/utils.rb#224
  def parse_cookies_header(header); end

  # source://rack//lib/rack/utils.rb#112
  def parse_nested_query(qs, d = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#108
  def parse_query(qs, d = T.unsafe(nil), &unescaper); end

  # source://rack//lib/rack/utils.rb#144
  def q_values(q_value_header); end

  # source://rack//lib/rack/utils.rb#343
  def rfc2109(time); end

  # source://rack//lib/rack/utils.rb#330
  def rfc2822(time); end

  # source://rack//lib/rack/utils.rb#392
  def secure_compare(a, b); end

  # source://rack//lib/rack/utils.rb#188
  def select_best_encoding(available_encodings, accept_encoding); end

  # source://rack//lib/rack/utils.rb#278
  def set_cookie_header!(header, key, value); end

  # source://rack//lib/rack/utils.rb#596
  def status_code(status); end

  # source://rack//lib/rack/utils.rb#56
  def unescape(s, encoding = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#50
  def unescape_path(s); end

  # source://rack//lib/rack/utils.rb#623
  def valid_path?(path); end

  class << self
    # source://rack//lib/rack/utils.rb#237
    def add_cookie_to_header(header, key, value); end

    # source://rack//lib/rack/utils.rb#320
    def add_remove_cookie_to_header(header, key, value = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#159
    def best_q_match(q_value_header, available_mimes); end

    # source://rack//lib/rack/utils.rb#126
    def build_nested_query(value, prefix = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#116
    def build_query(params); end

    # source://rack//lib/rack/utils.rb#352
    def byte_ranges(env, size); end

    # source://rack//lib/rack/utils.rb#606
    def clean_path_info(path_info); end

    # source://rack//lib/rack/utils.rb#97
    def clock_time; end

    # source://rack//lib/rack/utils.rb#29
    def default_query_parser; end

    # source://rack//lib/rack/utils.rb#29
    def default_query_parser=(_arg0); end

    # source://rack//lib/rack/utils.rb#313
    def delete_cookie_header!(header, key, value = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#38
    def escape(s); end

    # source://rack//lib/rack/utils.rb#184
    def escape_html(string); end

    # source://rack//lib/rack/utils.rb#44
    def escape_path(s); end

    # source://rack//lib/rack/utils.rb#357
    def get_byte_ranges(http_range, size); end

    # source://rack//lib/rack/utils.rb#88
    def key_space_limit; end

    # source://rack//lib/rack/utils.rb#92
    def key_space_limit=(v); end

    # source://rack//lib/rack/utils.rb#283
    def make_delete_cookie_header(header, key, value); end

    # source://rack//lib/rack/utils.rb#63
    def multipart_file_limit; end

    # source://rack//lib/rack/utils.rb#63
    def multipart_file_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#63
    def multipart_part_limit; end

    # source://rack//lib/rack/utils.rb#63
    def multipart_part_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#61
    def multipart_total_part_limit; end

    # source://rack//lib/rack/utils.rb#61
    def multipart_total_part_limit=(_arg0); end

    # source://rack//lib/rack/utils.rb#80
    def param_depth_limit; end

    # source://rack//lib/rack/utils.rb#84
    def param_depth_limit=(v); end

    # source://rack//lib/rack/utils.rb#220
    def parse_cookies(env); end

    # source://rack//lib/rack/utils.rb#224
    def parse_cookies_header(header); end

    # source://rack//lib/rack/utils.rb#112
    def parse_nested_query(qs, d = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#108
    def parse_query(qs, d = T.unsafe(nil), &unescaper); end

    # source://rack//lib/rack/utils.rb#144
    def q_values(q_value_header); end

    # source://rack//lib/rack/utils.rb#343
    def rfc2109(time); end

    # source://rack//lib/rack/utils.rb#330
    def rfc2822(time); end

    # source://rack//lib/rack/utils.rb#392
    def secure_compare(a, b); end

    # source://rack//lib/rack/utils.rb#188
    def select_best_encoding(available_encodings, accept_encoding); end

    # source://rack//lib/rack/utils.rb#278
    def set_cookie_header!(header, key, value); end

    # source://rack//lib/rack/utils.rb#596
    def status_code(status); end

    # source://rack//lib/rack/utils.rb#56
    def unescape(s, encoding = T.unsafe(nil)); end

    # source://rack//lib/rack/utils.rb#50
    def unescape_path(s); end

    # source://rack//lib/rack/utils.rb#623
    def valid_path?(path); end
  end
end

# source://rack//lib/rack/utils.rb#22
Rack::Utils::COMMON_SEP = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#407
class Rack::Utils::Context
  # source://rack//lib/rack/utils.rb#410
  def initialize(app_f, app_r); end

  # source://rack//lib/rack/utils.rb#408
  def app; end

  # source://rack//lib/rack/utils.rb#415
  def call(env); end

  # source://rack//lib/rack/utils.rb#423
  def context(env, app = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#408
  def for; end

  # source://rack//lib/rack/utils.rb#419
  def recontext(app); end
end

# source://rack//lib/rack/utils.rb#21
Rack::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/utils.rb#172
Rack::Utils::ESCAPE_HTML = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#181
Rack::Utils::ESCAPE_HTML_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/utils.rb#523
Rack::Utils::HTTP_STATUS_CODES = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#432
class Rack::Utils::HeaderHash < ::Hash
  # source://rack//lib/rack/utils.rb#441
  def initialize(hash = T.unsafe(nil)); end

  # source://rack//lib/rack/utils.rb#471
  def [](k); end

  # source://rack//lib/rack/utils.rb#475
  def []=(k, v); end

  # source://rack//lib/rack/utils.rb#454
  def clear; end

  # source://rack//lib/rack/utils.rb#482
  def delete(k); end

  # source://rack//lib/rack/utils.rb#459
  def each; end

  # source://rack//lib/rack/utils.rb#488
  def has_key?(k); end

  # source://rack//lib/rack/utils.rb#488
  def include?(k); end

  # source://rack//lib/rack/utils.rb#488
  def key?(k); end

  # source://rack//lib/rack/utils.rb#488
  def member?(k); end

  # source://rack//lib/rack/utils.rb#501
  def merge(other); end

  # source://rack//lib/rack/utils.rb#496
  def merge!(other); end

  # source://rack//lib/rack/utils.rb#506
  def replace(other); end

  # source://rack//lib/rack/utils.rb#465
  def to_hash; end

  protected

  # source://rack//lib/rack/utils.rb#513
  def names; end

  private

  # source://rack//lib/rack/utils.rb#448
  def initialize_copy(other); end

  class << self
    # source://rack//lib/rack/utils.rb#433
    def [](headers); end
  end
end

# source://rack//lib/rack/utils.rb#20
Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

# source://rack//lib/rack/utils.rb#23
Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

# source://rack//lib/rack/utils.rb#621
Rack::Utils::NULL_BYTE = T.let(T.unsafe(nil), String)

# source://rack//lib/rack/utils.rb#604
Rack::Utils::PATH_SEPS = T.let(T.unsafe(nil), Regexp)

# source://rack//lib/rack/utils.rb#19
Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

# source://rack//lib/rack/utils.rb#25
Rack::Utils::RFC2822_DAY_NAME = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/utils.rb#26
Rack::Utils::RFC2822_MONTH_NAME = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/utils.rb#590
Rack::Utils::STATUS_WITH_NO_ENTITY_BODY = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/utils.rb#592
Rack::Utils::SYMBOL_TO_STATUS_CODE = T.let(T.unsafe(nil), Hash)

# source://rack//lib/rack/version.rb#16
Rack::VERSION = T.let(T.unsafe(nil), Array)

# source://rack//lib/rack/handler/webrick.rb#8
class WEBrick::HTTPResponse
  # source://rack//lib/rack/handler/webrick.rb#9
  def rack; end

  # source://rack//lib/rack/handler/webrick.rb#9
  def rack=(_arg0); end

  # source://rack//lib/rack/handler/webrick.rb#12
  def setup_header; end
end
