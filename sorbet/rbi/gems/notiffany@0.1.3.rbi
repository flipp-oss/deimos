# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `notiffany` gem.
# Please instead update this file by running `bin/tapioca gem notiffany`.

# source://notiffany//lib/notiffany/notifier/base.rb#3
module Notiffany
  class << self
    # source://notiffany//lib/notiffany/notifier.rb#41
    def connect(options = T.unsafe(nil)); end
  end
end

# source://notiffany//lib/notiffany/notifier/base.rb#4
class Notiffany::Notifier
  # source://notiffany//lib/notiffany/notifier.rb#82
  def initialize(opts); end

  # source://notiffany//lib/notiffany/notifier.rb#138
  def active?; end

  # source://notiffany//lib/notiffany/notifier.rb#160
  def available; end

  # source://notiffany//lib/notiffany/notifier.rb#80
  def config; end

  # source://notiffany//lib/notiffany/notifier.rb#92
  def disconnect; end

  # source://notiffany//lib/notiffany/notifier.rb#133
  def enabled?; end

  # source://notiffany//lib/notiffany/notifier.rb#148
  def notify(message, message_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier.rb#120
  def turn_off; end

  # source://notiffany//lib/notiffany/notifier.rb#109
  def turn_on(options = T.unsafe(nil)); end

  private

  # source://notiffany//lib/notiffany/notifier.rb#191
  def _activate; end

  # source://notiffany//lib/notiffany/notifier.rb#170
  def _check_server!; end

  # source://notiffany//lib/notiffany/notifier.rb#174
  def _client?; end

  # source://notiffany//lib/notiffany/notifier.rb#178
  def _detect_or_add_notifiers; end

  # source://notiffany//lib/notiffany/notifier.rb#166
  def _env; end

  # source://notiffany//lib/notiffany/notifier.rb#187
  def _notification_wanted?; end

  # source://notiffany//lib/notiffany/notifier.rb#202
  def _turn_on_notifiers(options); end
end

# source://notiffany//lib/notiffany/notifier/base.rb#5
class Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/base.rb#47
  def initialize(opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/base.rb#75
  def _image_path(image); end

  # source://notiffany//lib/notiffany/notifier/base.rb#66
  def name; end

  # source://notiffany//lib/notiffany/notifier/base.rb#70
  def notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/base.rb#45
  def options; end

  # source://notiffany//lib/notiffany/notifier/base.rb#62
  def title; end

  private

  # source://notiffany//lib/notiffany/notifier/base.rb#93
  def _check_available(_options); end

  # source://notiffany//lib/notiffany/notifier/base.rb#114
  def _check_host_supported; end

  # source://notiffany//lib/notiffany/notifier/base.rb#83
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/base.rb#102
  def _notification_type(image); end

  # source://notiffany//lib/notiffany/notifier/base.rb#106
  def _notify_options(overrides = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/base.rb#98
  def _perform_notify(_message, _opts); end

  # source://notiffany//lib/notiffany/notifier/base.rb#120
  def _require_gem; end

  # source://notiffany//lib/notiffany/notifier/base.rb#88
  def _supported_hosts; end
end

# source://notiffany//lib/notiffany/notifier/base.rb#19
Notiffany::Notifier::Base::ERROR_ADD_GEM_AND_RUN_BUNDLE = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/base.rb#6
Notiffany::Notifier::Base::HOSTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/base.rb#33
class Notiffany::Notifier::Base::RequireFailed < ::Notiffany::Notifier::Base::UnavailableError
  # source://notiffany//lib/notiffany/notifier/base.rb#34
  def initialize(gem_name); end
end

# source://notiffany//lib/notiffany/notifier/base.rb#22
class Notiffany::Notifier::Base::UnavailableError < ::RuntimeError
  # source://notiffany//lib/notiffany/notifier/base.rb#23
  def initialize(reason); end

  # source://notiffany//lib/notiffany/notifier/base.rb#28
  def message; end
end

# source://notiffany//lib/notiffany/notifier/base.rb#39
class Notiffany::Notifier::Base::UnsupportedPlatform < ::Notiffany::Notifier::Base::UnavailableError
  # source://notiffany//lib/notiffany/notifier/base.rb#40
  def initialize; end
end

# source://notiffany//lib/notiffany/notifier/config.rb#6
class Notiffany::Notifier::Config
  # source://notiffany//lib/notiffany/notifier/config.rb#13
  def initialize(opts); end

  # source://notiffany//lib/notiffany/notifier/config.rb#9
  def env_namespace; end

  # source://notiffany//lib/notiffany/notifier/config.rb#10
  def logger; end

  # source://notiffany//lib/notiffany/notifier/config.rb#11
  def notifiers; end

  # source://notiffany//lib/notiffany/notifier/config.rb#21
  def notify?; end

  private

  # source://notiffany//lib/notiffany/notifier/config.rb#27
  def _setup_logger(opts); end
end

# source://notiffany//lib/notiffany/notifier/config.rb#7
Notiffany::Notifier::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/detected.rb#27
class Notiffany::Notifier::Detected
  # source://notiffany//lib/notiffany/notifier/detected.rb#47
  def initialize(supported, env_namespace, logger); end

  # source://notiffany//lib/notiffany/notifier/detected.rb#82
  def add(name, opts); end

  # source://notiffany//lib/notiffany/notifier/detected.rb#74
  def available; end

  # source://notiffany//lib/notiffany/notifier/detected.rb#57
  def detect; end

  # source://notiffany//lib/notiffany/notifier/detected.rb#53
  def reset; end

  private

  # source://notiffany//lib/notiffany/notifier/detected.rb#90
  def _add(name, opts); end

  # source://notiffany//lib/notiffany/notifier/detected.rb#117
  def _notifiers; end

  # source://notiffany//lib/notiffany/notifier/detected.rb#109
  def _to_module(name); end
end

# source://notiffany//lib/notiffany/notifier/detected.rb#28
Notiffany::Notifier::Detected::NO_SUPPORTED_NOTIFIERS = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/detected.rb#31
class Notiffany::Notifier::Detected::NoneAvailableError < ::RuntimeError; end

# source://notiffany//lib/notiffany/notifier/detected.rb#34
class Notiffany::Notifier::Detected::UnknownNotifier < ::RuntimeError
  # source://notiffany//lib/notiffany/notifier/detected.rb#35
  def initialize(name); end

  # source://notiffany//lib/notiffany/notifier/detected.rb#42
  def message; end

  # source://notiffany//lib/notiffany/notifier/detected.rb#40
  def name; end
end

# source://notiffany//lib/notiffany/notifier/emacs/client.rb#5
class Notiffany::Notifier::Emacs < ::Notiffany::Notifier::Base
  private

  # source://notiffany//lib/notiffany/notifier/emacs.rb#32
  def _check_available(options); end

  # source://notiffany//lib/notiffany/notifier/emacs.rb#86
  def _emacs_color(type, options = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/emacs.rb#91
  def _erb_for(filename); end

  # source://notiffany//lib/notiffany/notifier/emacs.rb#28
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/emacs.rb#58
  def _perform_notify(message, opts = T.unsafe(nil)); end
end

# source://notiffany//lib/notiffany/notifier/emacs/client.rb#6
class Notiffany::Notifier::Emacs::Client
  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#28
  def initialize(options); end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#34
  def available?; end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#7
  def elisp_erb; end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#39
  def notify(color, bgcolor, message = T.unsafe(nil)); end

  private

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#46
  def _emacs_eval(env, code); end
end

# source://notiffany//lib/notiffany/notifier/emacs/client.rb#10
class Notiffany::Notifier::Emacs::Client::Elisp < ::ERB
  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#15
  def initialize(code, color, bgcolor, message); end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#12
  def bgcolor; end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#11
  def color; end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#13
  def message; end

  # source://notiffany//lib/notiffany/notifier/emacs/client.rb#23
  def result; end
end

# source://notiffany//lib/notiffany/notifier/emacs.rb#12
Notiffany::Notifier::Emacs::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/emacs.rb#20
Notiffany::Notifier::Emacs::DEFAULT_ELISP_ERB = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier.rb#0
class Notiffany::Notifier::Env < ::Nenv::Environment
  # source://nenv/0.3.0/lib/nenv/environment.rb#69
  def notify?; end

  # source://nenv/0.3.0/lib/nenv/environment.rb#59
  def notify_active=(raw_value); end

  # source://nenv/0.3.0/lib/nenv/environment.rb#69
  def notify_active?; end

  # source://nenv/0.3.0/lib/nenv/environment.rb#69
  def notify_pid; end

  # source://nenv/0.3.0/lib/nenv/environment.rb#59
  def notify_pid=(raw_value); end
end

# source://notiffany//lib/notiffany/notifier/file.rb#7
class Notiffany::Notifier::File < ::Notiffany::Notifier::Base
  private

  # source://notiffany//lib/notiffany/notifier/file.rb#16
  def _check_available(opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/file.rb#39
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/file.rb#32
  def _perform_notify(message, opts = T.unsafe(nil)); end
end

# source://notiffany//lib/notiffany/notifier/file.rb#8
Notiffany::Notifier::File::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/gntp.rb#18
class Notiffany::Notifier::GNTP < ::Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/gntp.rb#39
  def _check_available(_opts); end

  # source://notiffany//lib/notiffany/notifier/gntp.rb#35
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/gntp.rb#57
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/gntp.rb#30
  def _supported_hosts; end

  private

  # source://notiffany//lib/notiffany/notifier/gntp.rb#69
  def _gntp_client(opts = T.unsafe(nil)); end
end

# source://notiffany//lib/notiffany/notifier/gntp.rb#24
Notiffany::Notifier::GNTP::CLIENT_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/gntp.rb#19
Notiffany::Notifier::GNTP::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/growl.rb#34
class Notiffany::Notifier::Growl < ::Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/growl.rb#48
  def _check_available(_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/growl.rb#75
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/growl.rb#44
  def _supported_hosts; end
end

# source://notiffany//lib/notiffany/notifier/growl.rb#39
Notiffany::Notifier::Growl::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/growl.rb#35
Notiffany::Notifier::Growl::INSTALL_GROWLNOTIFY = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/libnotify.rb#12
class Notiffany::Notifier::Libnotify < ::Notiffany::Notifier::Base
  private

  # source://notiffany//lib/notiffany/notifier/libnotify.rb#25
  def _check_available(_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/libnotify.rb#42
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/libnotify.rb#21
  def _supported_hosts; end
end

# source://notiffany//lib/notiffany/notifier/libnotify.rb#13
Notiffany::Notifier::Libnotify::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier.rb#46
Notiffany::Notifier::NOTIFICATIONS_DISABLED = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier.rb#77
class Notiffany::Notifier::NotServer < ::RuntimeError; end

# source://notiffany//lib/notiffany/notifier/rb_notifu.rb#17
class Notiffany::Notifier::Notifu < ::Notiffany::Notifier::Base
  private

  # source://notiffany//lib/notiffany/notifier/rb_notifu.rb#37
  def _check_available(_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/rb_notifu.rb#33
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/rb_notifu.rb#77
  def _notifu_type(type); end

  # source://notiffany//lib/notiffany/notifier/rb_notifu.rb#61
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/rb_notifu.rb#29
  def _supported_hosts; end
end

# source://notiffany//lib/notiffany/notifier/rb_notifu.rb#18
Notiffany::Notifier::Notifu::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/notifysend.rb#14
class Notiffany::Notifier::NotifySend < ::Notiffany::Notifier::Base
  private

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#34
  def _check_available(_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#26
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#71
  def _notifysend_urgency(type); end

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#54
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#30
  def _supported_hosts; end

  # source://notiffany//lib/notiffany/notifier/notifysend.rb#84
  def _to_arguments(command, supported, opts = T.unsafe(nil)); end
end

# source://notiffany//lib/notiffany/notifier/notifysend.rb#15
Notiffany::Notifier::NotifySend::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/notifysend.rb#21
Notiffany::Notifier::NotifySend::SUPPORTED = T.let(T.unsafe(nil), Array)

# source://notiffany//lib/notiffany/notifier.rb#51
Notiffany::Notifier::ONLY_NOTIFY = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier.rb#54
Notiffany::Notifier::SUPPORTED = T.let(T.unsafe(nil), Array)

# source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#13
class Notiffany::Notifier::TerminalNotifier < ::Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#27
  def _check_available(_opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#23
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#45
  def _perform_notify(message, opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#19
  def _supported_hosts; end
end

# source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#14
Notiffany::Notifier::TerminalNotifier::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/terminal_notifier.rb#16
Notiffany::Notifier::TerminalNotifier::ERROR_ONLY_OSX10 = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/terminal_title.rb#7
class Notiffany::Notifier::TerminalTitle < ::Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/terminal_title.rb#11
  def turn_off; end

  private

  # source://notiffany//lib/notiffany/notifier/terminal_title.rb#21
  def _check_available(_options); end

  # source://notiffany//lib/notiffany/notifier/terminal_title.rb#17
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/terminal_title.rb#32
  def _perform_notify(message, opts = T.unsafe(nil)); end
end

# source://notiffany//lib/notiffany/notifier/terminal_title.rb#8
Notiffany::Notifier::TerminalTitle::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/tmux/client.rb#6
class Notiffany::Notifier::Tmux < ::Notiffany::Notifier::Base
  # source://notiffany//lib/notiffany/notifier/tmux.rb#52
  def turn_off; end

  # source://notiffany//lib/notiffany/notifier/tmux.rb#44
  def turn_on; end

  private

  # source://notiffany//lib/notiffany/notifier/tmux.rb#62
  def _check_available(opts = T.unsafe(nil)); end

  # source://notiffany//lib/notiffany/notifier/tmux.rb#58
  def _gem_name; end

  # source://notiffany//lib/notiffany/notifier/tmux.rb#103
  def _perform_notify(message, options = T.unsafe(nil)); end

  class << self
    # source://notiffany//lib/notiffany/notifier/tmux.rb#120
    def _end_session; end

    # source://notiffany//lib/notiffany/notifier/tmux.rb#126
    def _session; end

    # source://notiffany//lib/notiffany/notifier/tmux.rb#115
    def _start_session; end
  end
end

# source://notiffany//lib/notiffany/notifier/tmux/client.rb#7
class Notiffany::Notifier::Tmux::Client
  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#28
  def initialize(client); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#32
  def clients; end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#49
  def display_message(message); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#76
  def display_time=(time); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#72
  def message_bg=(color); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#68
  def message_fg=(color); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#63
  def parse_options; end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#42
  def set(key, value); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#80
  def title=(string); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#57
  def unset(key, value); end

  private

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#99
  def _all_args_for(key, value, client); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#91
  def _capture(*args); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#95
  def _parse_option(line); end

  # source://notiffany//lib/notiffany/notifier/tmux/client.rb#87
  def _run(*args); end

  class << self
    # source://notiffany//lib/notiffany/notifier/tmux/client.rb#19
    def _capture(*args); end

    # source://notiffany//lib/notiffany/notifier/tmux/client.rb#23
    def _run(*args); end

    # source://notiffany//lib/notiffany/notifier/tmux/client.rb#11
    def version; end
  end
end

# source://notiffany//lib/notiffany/notifier/tmux/client.rb#8
Notiffany::Notifier::Tmux::Client::CLIENT = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/tmux.rb#15
Notiffany::Notifier::Tmux::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://notiffany//lib/notiffany/notifier/tmux.rb#39
Notiffany::Notifier::Tmux::ERROR_ANCIENT_TMUX = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/tmux.rb#36
Notiffany::Notifier::Tmux::ERROR_NOT_INSIDE_TMUX = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/tmux.rb#33
class Notiffany::Notifier::Tmux::Error < ::RuntimeError; end

# source://notiffany//lib/notiffany/notifier/tmux/notification.rb#5
class Notiffany::Notifier::Tmux::Notification
  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#6
  def initialize(type, options); end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#33
  def colorize(locations); end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#24
  def display_message(title, message); end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#15
  def display_title(title, message); end

  private

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#54
  def _message_for(title, message); end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#48
  def _value_for(field); end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#45
  def client; end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#43
  def color; end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#44
  def message_color; end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#42
  def options; end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#46
  def separator; end

  # source://notiffany//lib/notiffany/notifier/tmux/notification.rb#41
  def type; end
end

# source://notiffany//lib/notiffany/notifier/tmux/session.rb#5
class Notiffany::Notifier::Tmux::Session
  # source://notiffany//lib/notiffany/notifier/tmux/session.rb#6
  def initialize; end

  # source://notiffany//lib/notiffany/notifier/tmux/session.rb#29
  def close; end
end

# source://notiffany//lib/notiffany/notifier.rb#49
Notiffany::Notifier::USING_NOTIFIER = T.let(T.unsafe(nil), String)

# source://notiffany//lib/notiffany/notifier/detected.rb#0
class Notiffany::Notifier::YamlEnvStorage < ::Nenv::Environment
  # source://nenv/0.3.0/lib/nenv/environment.rb#69
  def notifiers; end

  # source://nenv/0.3.0/lib/nenv/environment.rb#59
  def notifiers=(raw_value); end
end
