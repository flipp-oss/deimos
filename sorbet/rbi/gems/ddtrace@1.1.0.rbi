# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ddtrace` gem.
# Please instead update this file by running `bin/tapioca gem ddtrace`.

# source://ddtrace//lib/ddtrace/version.rb#3
module DDTrace; end

# source://ddtrace//lib/ddtrace/version.rb#4
module DDTrace::VERSION; end

# source://ddtrace//lib/ddtrace/version.rb#5
DDTrace::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/version.rb#25
DDTrace::VERSION::MAXIMUM_RUBY_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/version.rb#12
DDTrace::VERSION::MINIMUM_RUBY_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/version.rb#6
DDTrace::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/version.rb#7
DDTrace::VERSION::PATCH = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/version.rb#8
DDTrace::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://ddtrace//lib/ddtrace/version.rb#10
DDTrace::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#3
module Datadog
  extend ::Datadog::Core::Extensions
  extend ::Datadog::Core::Configuration
  extend ::Datadog::Tracing::Contrib::Extensions::Helpers
  extend ::Datadog::Tracing::Contrib::Extensions::Configuration
end

# source://ddtrace//lib/datadog/ci.rb#10
module Datadog::CI; end

# source://ddtrace//lib/datadog/ci/configuration/settings.rb#7
module Datadog::CI::Configuration; end

# source://ddtrace//lib/datadog/ci/configuration/components.rb#9
module Datadog::CI::Configuration::Components
  # source://ddtrace//lib/datadog/ci/configuration/components.rb#10
  def initialize(settings); end

  # source://ddtrace//lib/datadog/ci/configuration/components.rb#18
  def activate_ci!(settings); end
end

# source://ddtrace//lib/datadog/ci/configuration/settings.rb#9
module Datadog::CI::Configuration::Settings
  class << self
    # source://ddtrace//lib/datadog/ci/configuration/settings.rb#15
    def add_settings!(base); end

    # source://ddtrace//lib/datadog/ci/configuration/settings.rb#10
    def extended(base); end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#5
module Datadog::CI::Contrib; end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#6
module Datadog::CI::Contrib::Cucumber; end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/configuration/settings.rb#10
module Datadog::CI::Contrib::Cucumber::Configuration; end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/configuration/settings.rb#13
class Datadog::CI::Contrib::Cucumber::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def operation_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def operation_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#9
module Datadog::CI::Contrib::Cucumber::Ext; end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#10
Datadog::CI::Contrib::Cucumber::Ext::APP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#11
Datadog::CI::Contrib::Cucumber::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#12
Datadog::CI::Contrib::Cucumber::Ext::ENV_OPERATION_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#13
Datadog::CI::Contrib::Cucumber::Ext::FRAMEWORK = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#14
Datadog::CI::Contrib::Cucumber::Ext::OPERATION_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#15
Datadog::CI::Contrib::Cucumber::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#16
Datadog::CI::Contrib::Cucumber::Ext::STEP_SPAN_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/ext.rb#17
Datadog::CI::Contrib::Cucumber::Ext::TEST_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#14
class Datadog::CI::Contrib::Cucumber::Formatter
  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#19
  def initialize(config); end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#25
  def bind_events(config); end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#49
  def on_test_case_finished(event); end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#32
  def on_test_case_started(event); end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#71
  def on_test_step_finished(event); end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#63
  def on_test_step_started(event); end

  private

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#15
  def config; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#87
  def configuration; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#15
  def current_feature_span; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/formatter.rb#15
  def current_step_span; end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/instrumentation.rb#10
module Datadog::CI::Contrib::Cucumber::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/ci/contrib/cucumber/instrumentation.rb#11
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/instrumentation.rb#16
module Datadog::CI::Contrib::Cucumber::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/ci/contrib/cucumber/instrumentation.rb#17
  def datadog_formatter; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/instrumentation.rb#19
  def formatters; end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#13
class Datadog::CI::Contrib::Cucumber::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#34
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#38
  def default_configuration; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#42
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/cucumber/integration.rb#16
Datadog::CI::Contrib::Cucumber::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/ci/contrib/cucumber/patcher.rb#11
module Datadog::CI::Contrib::Cucumber::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/ci/contrib/cucumber/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/ci/contrib/cucumber/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#6
module Datadog::CI::Contrib::RSpec; end

# source://ddtrace//lib/datadog/ci/contrib/rspec/configuration/settings.rb#10
module Datadog::CI::Contrib::RSpec::Configuration; end

# source://ddtrace//lib/datadog/ci/contrib/rspec/configuration/settings.rb#13
class Datadog::CI::Contrib::RSpec::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def operation_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def operation_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/ci/contrib/rspec/example.rb#15
module Datadog::CI::Contrib::RSpec::Example
  class << self
    # source://ddtrace//lib/datadog/ci/contrib/rspec/example.rb#16
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/rspec/example.rb#21
module Datadog::CI::Contrib::RSpec::Example::InstanceMethods
  # source://ddtrace//lib/datadog/ci/contrib/rspec/example.rb#22
  def run(example_group_instance, reporter); end

  private

  # source://ddtrace//lib/datadog/ci/contrib/rspec/example.rb#62
  def configuration; end
end

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#9
module Datadog::CI::Contrib::RSpec::Ext; end

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#10
Datadog::CI::Contrib::RSpec::Ext::APP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#11
Datadog::CI::Contrib::RSpec::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#12
Datadog::CI::Contrib::RSpec::Ext::ENV_OPERATION_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#13
Datadog::CI::Contrib::RSpec::Ext::FRAMEWORK = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#14
Datadog::CI::Contrib::RSpec::Ext::OPERATION_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#15
Datadog::CI::Contrib::RSpec::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/ext.rb#16
Datadog::CI::Contrib::RSpec::Ext::TEST_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#13
class Datadog::CI::Contrib::RSpec::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#39
  def default_configuration; end

  # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#30
    def compatible?; end

    # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/ci/contrib/rspec/integration.rb#16
Datadog::CI::Contrib::RSpec::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/ci/contrib/rspec/patcher.rb#11
module Datadog::CI::Contrib::RSpec::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/ci/contrib/rspec/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/ci/contrib/rspec/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/ci/contrib/rspec/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/ci/ext/app_types.rb#5
module Datadog::CI::Ext; end

# source://ddtrace//lib/datadog/ci/ext/app_types.rb#6
module Datadog::CI::Ext::AppTypes; end

# source://ddtrace//lib/datadog/ci/ext/app_types.rb#7
Datadog::CI::Ext::AppTypes::TYPE_TEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#14
module Datadog::CI::Ext::Environment
  include ::Kernel

  private

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#478
  def branch_or_tag(branch_or_tag); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#442
  def exec_git_command(cmd); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#90
  def extract_appveyor(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#118
  def extract_azure_pipelines(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#156
  def extract_bitbucket(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#324
  def extract_bitrise(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#177
  def extract_buildkite(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#196
  def extract_circle_ci(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#215
  def extract_github_actions(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#241
  def extract_gitlab(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#266
  def extract_jenkins(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#454
  def extract_local_git; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#489
  def extract_name_email(name_and_email); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#290
  def extract_teamcity(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#307
  def extract_travis(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#346
  def extract_user_defined_git(env); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#84
  def filter_sensitive_info(url); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#433
  def git_base_directory; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#406
  def git_branch; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#397
  def git_commit_message; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#415
  def git_commit_sha; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#362
  def git_commit_users; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#388
  def git_repository_url; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#424
  def git_tag; end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#77
  def normalize_ref(name); end

  # source://ddtrace//lib/datadog/ci/ext/environment.rb#43
  def tags(env); end

  class << self
    # source://ddtrace//lib/datadog/ci/ext/environment.rb#478
    def branch_or_tag(branch_or_tag); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#442
    def exec_git_command(cmd); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#90
    def extract_appveyor(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#118
    def extract_azure_pipelines(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#156
    def extract_bitbucket(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#324
    def extract_bitrise(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#177
    def extract_buildkite(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#196
    def extract_circle_ci(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#215
    def extract_github_actions(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#241
    def extract_gitlab(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#266
    def extract_jenkins(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#454
    def extract_local_git; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#489
    def extract_name_email(name_and_email); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#290
    def extract_teamcity(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#307
    def extract_travis(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#346
    def extract_user_defined_git(env); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#84
    def filter_sensitive_info(url); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#433
    def git_base_directory; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#406
    def git_branch; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#397
    def git_commit_message; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#415
    def git_commit_sha; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#362
    def git_commit_users; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#388
    def git_repository_url; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#424
    def git_tag; end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#77
    def normalize_ref(name); end

    # source://ddtrace//lib/datadog/ci/ext/environment.rb#43
    def tags(env); end
  end
end

# source://ddtrace//lib/datadog/ci/ext/environment.rb#27
Datadog::CI::Ext::Environment::PROVIDERS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#17
Datadog::CI::Ext::Environment::TAG_JOB_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#18
Datadog::CI::Ext::Environment::TAG_JOB_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#19
Datadog::CI::Ext::Environment::TAG_PIPELINE_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#20
Datadog::CI::Ext::Environment::TAG_PIPELINE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#21
Datadog::CI::Ext::Environment::TAG_PIPELINE_NUMBER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#22
Datadog::CI::Ext::Environment::TAG_PIPELINE_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#23
Datadog::CI::Ext::Environment::TAG_PROVIDER_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#24
Datadog::CI::Ext::Environment::TAG_STAGE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/environment.rb#25
Datadog::CI::Ext::Environment::TAG_WORKSPACE_PATH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/settings.rb#7
module Datadog::CI::Ext::Settings; end

# source://ddtrace//lib/datadog/ci/ext/settings.rb#8
Datadog::CI::Ext::Settings::ENV_MODE_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#7
module Datadog::CI::Ext::Test; end

# source://ddtrace//lib/datadog/ci/ext/test.rb#8
Datadog::CI::Ext::Test::CONTEXT_ORIGIN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#29
module Datadog::CI::Ext::Test::Status; end

# source://ddtrace//lib/datadog/ci/ext/test.rb#31
Datadog::CI::Ext::Test::Status::FAIL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#30
Datadog::CI::Ext::Test::Status::PASS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#32
Datadog::CI::Ext::Test::Status::SKIP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#10
Datadog::CI::Ext::Test::TAG_ARGUMENTS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#11
Datadog::CI::Ext::Test::TAG_FRAMEWORK = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#12
Datadog::CI::Ext::Test::TAG_FRAMEWORK_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#13
Datadog::CI::Ext::Test::TAG_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#21
Datadog::CI::Ext::Test::TAG_OS_ARCHITECTURE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#22
Datadog::CI::Ext::Test::TAG_OS_PLATFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#23
Datadog::CI::Ext::Test::TAG_RUNTIME_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#24
Datadog::CI::Ext::Test::TAG_RUNTIME_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#14
Datadog::CI::Ext::Test::TAG_SKIP_REASON = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#27
Datadog::CI::Ext::Test::TAG_SPAN_KIND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#15
Datadog::CI::Ext::Test::TAG_STATUS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#16
Datadog::CI::Ext::Test::TAG_SUITE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#17
Datadog::CI::Ext::Test::TAG_TRAITS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/ext/test.rb#18
Datadog::CI::Ext::Test::TAG_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/ci/extensions.rb#12
module Datadog::CI::Extensions
  class << self
    # source://ddtrace//lib/datadog/ci/extensions.rb#13
    def activate!; end
  end
end

# source://ddtrace//lib/datadog/ci/flush.rb#8
module Datadog::CI::Flush; end

# source://ddtrace//lib/datadog/ci/flush.rb#28
class Datadog::CI::Flush::Finished < ::Datadog::Tracing::Flush::Finished
  include ::Datadog::CI::Flush::Tagging
end

# source://ddtrace//lib/datadog/ci/flush.rb#33
class Datadog::CI::Flush::Partial < ::Datadog::Tracing::Flush::Partial
  include ::Datadog::CI::Flush::Tagging
end

# source://ddtrace//lib/datadog/ci/flush.rb#10
module Datadog::CI::Flush::Tagging
  # source://ddtrace//lib/datadog/ci/flush.rb#12
  def get_trace(trace_op); end
end

# source://ddtrace//lib/datadog/ci/test.rb#15
module Datadog::CI::Test
  class << self
    # source://ddtrace//lib/datadog/ci/test.rb#64
    def failed!(span, exception = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/ci/test.rb#60
    def passed!(span); end

    # source://ddtrace//lib/datadog/ci/test.rb#36
    def set_tags!(trace, span, tags = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/ci/test.rb#70
    def skipped!(span, exception = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/ci/test.rb#17
    def trace(span_name, options = T.unsafe(nil)); end

    private

    # source://ddtrace//lib/datadog/ci/test.rb#75
    def set_environment_runtime_tags!(span); end
  end
end

# source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#4
module Datadog::Core; end

# source://ddtrace//lib/datadog/core/buffer/random.rb#5
module Datadog::Core::Buffer; end

# source://ddtrace//lib/datadog/core/buffer/cruby.rb#27
class Datadog::Core::Buffer::CRuby < ::Datadog::Core::Buffer::Random
  # source://ddtrace//lib/datadog/core/buffer/cruby.rb#32
  def replace!(item); end
end

# source://ddtrace//lib/datadog/core/buffer/cruby.rb#28
Datadog::Core::Buffer::CRuby::FIXNUM_MAX = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/buffer/random.rb#11
class Datadog::Core::Buffer::Random
  # source://ddtrace//lib/datadog/core/buffer/random.rb#12
  def initialize(max_size); end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#63
  def close; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#67
  def closed?; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#33
  def concat(items); end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#57
  def empty?; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#52
  def length; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#47
  def pop; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#24
  def push(item); end

  protected

  # source://ddtrace//lib/datadog/core/buffer/random.rb#110
  def add!(item); end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#106
  def add_all!(items); end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#126
  def drain!; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#102
  def full?; end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#77
  def overflow_segments(items); end

  # source://ddtrace//lib/datadog/core/buffer/random.rb#114
  def replace!(item); end
end

# source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#16
class Datadog::Core::Buffer::ThreadSafe < ::Datadog::Core::Buffer::Random
  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#17
  def initialize(max_size); end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#48
  def close; end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#29
  def concat(items); end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#39
  def empty?; end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#34
  def length; end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#44
  def pop; end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#25
  def push(item); end

  # source://ddtrace//lib/datadog/core/buffer/thread_safe.rb#52
  def synchronize(&block); end
end

# source://ddtrace//lib/datadog/core/chunker.rb#6
module Datadog::Core::Chunker
  private

  # source://ddtrace//lib/datadog/core/chunker.rb#18
  def chunk_by_size(list, max_chunk_size); end

  class << self
    # source://ddtrace//lib/datadog/core/chunker.rb#18
    def chunk_by_size(list, max_chunk_size); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/option_set.rb#5
module Datadog::Core::Configuration
  include ::Kernel

  # source://ddtrace//lib/datadog/core/configuration.rb#52
  def configuration; end

  # source://ddtrace//lib/datadog/core/configuration.rb#41
  def configuration=(_arg0); end

  # source://ddtrace//lib/datadog/core/configuration.rb#148
  def configuration_for(target, option = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration.rb#83
  def configure; end

  # source://ddtrace//lib/datadog/core/configuration.rb#130
  def configure_onto(target, **opts); end

  # source://ddtrace//lib/datadog/core/configuration.rb#159
  def health_metrics; end

  # source://ddtrace//lib/datadog/core/configuration.rb#163
  def logger; end

  # source://ddtrace//lib/datadog/core/configuration.rb#184
  def shutdown!; end

  protected

  # source://ddtrace//lib/datadog/core/configuration.rb#192
  def components(allow_initialization: T.unsafe(nil)); end

  private

  # source://ddtrace//lib/datadog/core/configuration.rb#244
  def build_components(settings); end

  # source://ddtrace//lib/datadog/core/configuration.rb#239
  def components?; end

  # source://ddtrace//lib/datadog/core/configuration.rb#270
  def handle_interrupt_shutdown!; end

  # source://ddtrace//lib/datadog/core/configuration.rb#258
  def logger_without_components; end

  # source://ddtrace//lib/datadog/core/configuration.rb#250
  def replace_components!(settings, old); end

  # source://ddtrace//lib/datadog/core/configuration.rb#210
  def reset!; end

  # source://ddtrace//lib/datadog/core/configuration.rb#218
  def safely_synchronize; end
end

# source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#23
class Datadog::Core::Configuration::AgentSettingsResolver
  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#81
  def initialize(settings, logger: T.unsafe(nil)); end

  private

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#116
  def adapter; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#86
  def call; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#126
  def configured_hostname; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#149
  def configured_port; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#211
  def deprecated_for_removal_transport_configuration_proc; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#190
  def hostname; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#284
  def log_warning(message); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#77
  def logger; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#236
  def parsed_url; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#261
  def pick_from(*configurations_in_priority_order); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#194
  def port; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#77
  def settings; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#232
  def should_use_uds_fallback?; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#185
  def ssl?; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#205
  def timeout_seconds; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#292
  def transport_options; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#172
  def try_parsing_as_integer(value:, friendly_name:); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#219
  def uds_fallback; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#199
  def uds_path; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#273
  def warn_if_configuration_mismatch(detected_configurations_in_priority_order); end

  class << self
    # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#71
    def call(settings, logger: T.unsafe(nil)); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
class Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings < ::Struct
  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#34
  def initialize(adapter:, ssl:, hostname:, port:, uds_path:, timeout_seconds:, deprecated_for_removal_transport_configuration_proc:); end

  def adapter; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def adapter=(_); end

  def deprecated_for_removal_transport_configuration_proc; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def deprecated_for_removal_transport_configuration_proc=(_); end

  def hostname; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def hostname=(_); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#60
  def merge(**member_values); end

  def port; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def port=(_); end

  def ssl; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def ssl=(_); end

  def timeout_seconds; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def timeout_seconds=(_); end

  def uds_path; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#25
  def uds_path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#320
class Datadog::Core::Configuration::AgentSettingsResolver::DetectedConfiguration
  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#323
  def initialize(friendly_name:, value:); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#321
  def friendly_name; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#321
  def value; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#329
  def value?; end
end

# source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
class Datadog::Core::Configuration::AgentSettingsResolver::TransportOptions < ::Struct
  def adapter; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def adapter=(_); end

  def hostname; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def hostname=(_); end

  def port; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def port=(_); end

  def ssl; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def ssl=(_); end

  def timeout_seconds; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def timeout_seconds=(_); end

  def uds_path; end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#336
  def uds_path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#340
class Datadog::Core::Configuration::AgentSettingsResolver::TransportOptionsResolver
  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#341
  def initialize(transport_options); end

  # source://ddtrace//lib/datadog/core/configuration/agent_settings_resolver.rb#345
  def adapter(kind_or_custom_adapter, *args, **kwargs); end
end

# source://ddtrace//lib/datadog/core/configuration/base.rb#11
module Datadog::Core::Configuration::Base
  include ::Datadog::Core::Environment::VariableHelpers
  include ::Datadog::Core::Configuration::Options::InstanceMethods
  include ::Datadog::Core::Configuration::Options
  include ::Datadog::Core::Configuration::Base::InstanceMethods

  mixes_in_class_methods ::Datadog::Core::Environment::VariableHelpers
  mixes_in_class_methods ::Datadog::Core::Configuration::Options::ClassMethods
  mixes_in_class_methods ::Datadog::Core::Configuration::Base::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/core/configuration/base.rb#12
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/base.rb#23
module Datadog::Core::Configuration::Base::ClassMethods
  protected

  # source://ddtrace//lib/datadog/core/configuration/base.rb#29
  def settings(name, &block); end

  private

  # source://ddtrace//lib/datadog/core/configuration/base.rb#44
  def new_settings_class(&block); end
end

# source://ddtrace//lib/datadog/core/configuration/base.rb#53
module Datadog::Core::Configuration::Base::InstanceMethods
  # source://ddtrace//lib/datadog/core/configuration/base.rb#54
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/base.rb#58
  def configure(opts = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/base.rb#82
  def reset!; end

  # source://ddtrace//lib/datadog/core/configuration/base.rb#78
  def to_h; end
end

# source://ddtrace//lib/datadog/core/configuration.rb#38
Datadog::Core::Configuration::COMPONENTS_READ_LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://ddtrace//lib/datadog/core/configuration.rb#24
Datadog::Core::Configuration::COMPONENTS_WRITE_LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://ddtrace//lib/datadog/core/configuration/components.rb#19
class Datadog::Core::Configuration::Components
  include ::Datadog::CI::Configuration::Components

  # source://ddtrace//lib/datadog/ci/configuration/components.rb#10
  def initialize(settings); end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#326
  def health_metrics; end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#326
  def logger; end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#326
  def profiler; end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#326
  def runtime_metrics; end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#371
  def shutdown!(replacement = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#353
  def startup!(settings); end

  # source://ddtrace//lib/datadog/core/configuration/components.rb#326
  def tracer; end

  class << self
    # source://ddtrace//lib/datadog/core/configuration/components.rb#21
    def build_health_metrics(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#29
    def build_logger(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#181
    def build_profiler(settings, agent_settings, tracer); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#36
    def build_runtime_metrics(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#44
    def build_runtime_metrics_worker(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#98
    def build_sampler(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#83
    def build_trace_flush(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#54
    def build_tracer(settings, agent_settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#140
    def build_writer(settings, agent_settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#121
    def ensure_priority_sampling(sampler, settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#148
    def subscribe_to_writer_events!(writer, sampler, test_mode); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#171
    def writer_update_priority_sampler_rates_callback(sampler); end

    private

    # source://ddtrace//lib/datadog/core/configuration/components.rb#297
    def build_profiler_collectors(settings, recorder, trace_identifiers_helper); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#309
    def build_profiler_exporters(settings, agent_settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#287
    def build_profiler_recorder(settings, code_provenance_collector); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#321
    def build_profiler_scheduler(settings, recorder, exporters); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#272
    def build_test_mode_sampler; end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#267
    def build_test_mode_trace_flush(settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#281
    def build_test_mode_writer(settings, agent_settings); end

    # source://ddtrace//lib/datadog/core/configuration/components.rb#260
    def build_tracer_tags(settings); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/dependency_resolver.rb#9
class Datadog::Core::Configuration::DependencyResolver
  include ::TSort

  # source://ddtrace//lib/datadog/core/configuration/dependency_resolver.rb#12
  def initialize(dependency_graph = T.unsafe(nil)); end

  def call; end

  # source://ddtrace//lib/datadog/core/configuration/dependency_resolver.rb#20
  def tsort_each_child(node, &blk); end

  # source://ddtrace//lib/datadog/core/configuration/dependency_resolver.rb#16
  def tsort_each_node(&blk); end
end

# source://ddtrace//lib/datadog/core/configuration/option.rb#8
class Datadog::Core::Configuration::Option
  # source://ddtrace//lib/datadog/core/configuration/option.rb#12
  def initialize(definition, context); end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#49
  def default_value; end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#9
  def definition; end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#27
  def get; end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#37
  def reset; end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#19
  def set(value); end

  private

  # source://ddtrace//lib/datadog/core/configuration/option.rb#63
  def context_eval(&block); end

  # source://ddtrace//lib/datadog/core/configuration/option.rb#59
  def context_exec(*args, &block); end
end

# source://ddtrace//lib/datadog/core/configuration/option_definition.rb#9
class Datadog::Core::Configuration::OptionDefinition
  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#22
  def initialize(name, meta = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#34
  def build(context); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def default; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def delegate_to; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def depends_on; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def lazy; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def name; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def on_set; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def resetter; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#12
  def setter; end
end

# source://ddtrace//lib/datadog/core/configuration/option_definition.rb#40
class Datadog::Core::Configuration::OptionDefinition::Builder
  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#44
  def initialize(name, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#95
  def apply_options!(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#66
  def default(value = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#70
  def delegate_to(&block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#62
  def depends_on(*values); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#74
  def helper(name, *_args, &block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#41
  def helpers; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#78
  def lazy(value = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#111
  def meta; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#82
  def on_set(&block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#86
  def resetter(&block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#90
  def setter(&block); end

  # source://ddtrace//lib/datadog/core/configuration/option_definition.rb#107
  def to_definition; end
end

# source://ddtrace//lib/datadog/core/configuration/option_definition.rb#10
Datadog::Core::Configuration::OptionDefinition::IDENTITY = T.let(T.unsafe(nil), Proc)

# source://ddtrace//lib/datadog/core/configuration/option_definition_set.rb#9
class Datadog::Core::Configuration::OptionDefinitionSet < ::Hash
  # source://ddtrace//lib/datadog/core/configuration/option_definition_set.rb#14
  def dependency_graph; end

  # source://ddtrace//lib/datadog/core/configuration/option_definition_set.rb#10
  def dependency_order; end
end

# source://ddtrace//lib/datadog/core/configuration/option_set.rb#6
class Datadog::Core::Configuration::OptionSet < ::Hash; end

# source://ddtrace//lib/datadog/core/configuration/options.rb#12
module Datadog::Core::Configuration::Options
  include ::Datadog::Core::Configuration::Options::InstanceMethods

  mixes_in_class_methods ::Datadog::Core::Configuration::Options::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/core/configuration/options.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/configuration/options.rb#20
module Datadog::Core::Configuration::Options::ClassMethods
  # source://ddtrace//lib/datadog/core/configuration/options.rb#21
  def options; end

  protected

  # source://ddtrace//lib/datadog/core/configuration/options.rb#28
  def option(name, meta = T.unsafe(nil), &block); end

  private

  # source://ddtrace//lib/datadog/core/configuration/options.rb#41
  def default_helpers(name); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#54
  def define_helpers(helpers); end
end

# source://ddtrace//lib/datadog/core/configuration/options.rb#65
module Datadog::Core::Configuration::Options::InstanceMethods
  # source://ddtrace//lib/datadog/core/configuration/options.rb#75
  def get_option(name); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#85
  def option_defined?(name); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#66
  def options; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#89
  def options_hash; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#80
  def reset_option(name); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#95
  def reset_options!; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#70
  def set_option(name, value); end

  private

  # source://ddtrace//lib/datadog/core/configuration/options.rb#101
  def add_option(name); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#109
  def assert_valid_option!(name); end
end

# source://ddtrace//lib/datadog/core/configuration/options.rb#114
class Datadog::Core::Configuration::Options::InvalidOptionError < ::StandardError; end

# source://ddtrace//lib/datadog/core/configuration/settings.rb#19
class Datadog::Core::Configuration::Settings
  include ::Datadog::Core::Configuration::Base
  include ::Datadog::Core::Environment::VariableHelpers
  include ::Datadog::Core::Configuration::Options
  include ::Datadog::Core::Configuration::Options::InstanceMethods
  include ::Datadog::Core::Configuration::Base::InstanceMethods
  extend ::Datadog::Core::Environment::VariableHelpers
  extend ::Datadog::Core::Configuration::Options::ClassMethods
  extend ::Datadog::Core::Configuration::Base::ClassMethods
  extend ::Datadog::CI::Configuration::Settings

  # source://ddtrace//lib/datadog/core/configuration/settings.rb#23
  def initialize(*_); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def agent; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def agent=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def api_key; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def api_key=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def ci; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def ci=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def diagnostics; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def diagnostics=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def env; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def env=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def logger; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def logger=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def profiling; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def profiling=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def runtime_metrics; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def runtime_metrics=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service=(value); end

  # source://ddtrace//lib/datadog/core/configuration/settings.rb#276
  def service_without_fallback; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def site; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def site=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tags; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tags=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def time_now_provider; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def time_now_provider=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def version; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def version=(value); end
end

# source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#9
module Datadog::Core::Diagnostics; end

# source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#60
class Datadog::Core::Diagnostics::EnvironmentCollector
  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#119
  def agent_error(transport_responses); end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#110
  def agent_url; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#133
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#229
  def collect!(transport_responses); end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#62
  def date; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#105
  def dd_version; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#128
  def debug; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#95
  def enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#90
  def env; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#216
  def health_metrics_enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#184
  def integrations_loaded; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#78
  def lang; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#85
  def lang_version; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#68
  def os_name; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#206
  def partial_flushing_enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#211
  def priority_sampling_enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#176
  def runtime_metrics_enabled; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#138
  def sample_rate; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#151
  def sampling_rules; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#100
  def service; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#168
  def tags; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#73
  def version; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#194
  def vm; end

  private

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#277
  def hash_serializer(h); end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#259
  def instrumented_integrations; end

  # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#264
  def instrumented_integrations_settings; end
end

# source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#13
module Datadog::Core::Diagnostics::EnvironmentLogger
  class << self
    # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#17
    def log!(transport_responses); end

    private

    # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#42
    def log?; end

    # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#33
    def log_environment!(line); end

    # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#37
    def log_error!(type, error); end

    # source://ddtrace//lib/datadog/core/diagnostics/environment_logger.rb#53
    def repl?; end
  end
end

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#7
module Datadog::Core::Diagnostics::Ext; end

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#9
Datadog::Core::Diagnostics::Ext::DD_TRACE_DEBUG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#10
Datadog::Core::Diagnostics::Ext::DD_TRACE_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#8
Datadog::Core::Diagnostics::Ext::DD_TRACE_STARTUP_LOGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#12
module Datadog::Core::Diagnostics::Ext::Health; end

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#14
module Datadog::Core::Diagnostics::Ext::Health::Metrics; end

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#15
Datadog::Core::Diagnostics::Ext::Health::Metrics::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#17
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_API_ERRORS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#18
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_API_REQUESTS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#19
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_API_RESPONSES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#20
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_ERROR_CONTEXT_OVERFLOW = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#21
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_ERROR_INSTRUMENTATION_PATCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#22
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_ERROR_SPAN_FINISH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#23
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_ERROR_UNFINISHED_SPANS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#24
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_INSTRUMENTATION_PATCHED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#25
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_ACCEPTED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#26
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_ACCEPTED_LENGTHS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#27
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_DROPPED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#28
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_LENGTH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#29
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_MAX_LENGTH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#30
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_QUEUE_SPANS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#31
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_SAMPLING_SERVICE_CACHE_LENGTH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#32
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_TRACES_FILTERED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#33
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_TRANSPORT_CHUNKED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#34
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_TRANSPORT_TRACE_TOO_LARGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/ext.rb#35
Datadog::Core::Diagnostics::Ext::Health::Metrics::METRIC_WRITER_CPU_TIME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/diagnostics/health.rb#10
module Datadog::Core::Diagnostics::Health; end

# source://ddtrace//lib/datadog/core/diagnostics/health.rb#12
class Datadog::Core::Diagnostics::Health::Metrics < ::Datadog::Core::Metrics::Client
  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def api_errors(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def api_requests(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def api_responses(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def error_context_overflow(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def error_instrumentation_patch(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def error_span_finish(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def error_unfinished_spans(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def instrumentation_patched(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_accepted(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_accepted_lengths(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_dropped(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_length(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_max_length(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def queue_spans(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def sampling_service_cache_length(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def traces_filtered(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def transport_chunked(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def transport_trace_too_large(*args, &block); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#17
  def writer_cpu_time(*args, &block); end
end

# source://ddtrace//lib/datadog/core/encoding.rb#9
module Datadog::Core::Encoding; end

# source://ddtrace//lib/datadog/core/encoding.rb#12
module Datadog::Core::Encoding::Encoder
  include ::Kernel

  # source://ddtrace//lib/datadog/core/encoding.rb#15
  def content_type; end

  # source://ddtrace//lib/datadog/core/encoding.rb#25
  def encode(_); end

  # source://ddtrace//lib/datadog/core/encoding.rb#20
  def join(encoded_elements); end
end

# source://ddtrace//lib/datadog/core/encoding.rb#31
module Datadog::Core::Encoding::JSONEncoder
  extend ::Datadog::Core::Encoding::Encoder

  private

  # source://ddtrace//lib/datadog/core/encoding.rb#38
  def content_type; end

  # source://ddtrace//lib/datadog/core/encoding.rb#42
  def encode(obj); end

  # source://ddtrace//lib/datadog/core/encoding.rb#46
  def join(encoded_data); end

  class << self
    # source://ddtrace//lib/datadog/core/encoding.rb#38
    def content_type; end

    # source://ddtrace//lib/datadog/core/encoding.rb#42
    def encode(obj); end

    # source://ddtrace//lib/datadog/core/encoding.rb#46
    def join(encoded_data); end
  end
end

# source://ddtrace//lib/datadog/core/encoding.rb#34
Datadog::Core::Encoding::JSONEncoder::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/encoding.rb#52
module Datadog::Core::Encoding::MsgpackEncoder
  extend ::Datadog::Core::Encoding::Encoder

  private

  # source://ddtrace//lib/datadog/core/encoding.rb#59
  def content_type; end

  # source://ddtrace//lib/datadog/core/encoding.rb#63
  def encode(obj); end

  # source://ddtrace//lib/datadog/core/encoding.rb#67
  def join(encoded_data); end

  class << self
    # source://ddtrace//lib/datadog/core/encoding.rb#59
    def content_type; end

    # source://ddtrace//lib/datadog/core/encoding.rb#63
    def encode(obj); end

    # source://ddtrace//lib/datadog/core/encoding.rb#67
    def join(encoded_data); end
  end
end

# source://ddtrace//lib/datadog/core/encoding.rb#57
Datadog::Core::Encoding::MsgpackEncoder::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#6
module Datadog::Core::Environment; end

# source://ddtrace//lib/datadog/core/environment/cgroup.rb#12
module Datadog::Core::Environment::Cgroup
  include ::Kernel

  private

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#26
  def descriptors(process = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#45
  def parse(line); end

  class << self
    # source://ddtrace//lib/datadog/core/environment/cgroup.rb#26
    def descriptors(process = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/core/environment/cgroup.rb#45
    def parse(line); end
  end
end

# source://ddtrace//lib/datadog/core/environment/cgroup.rb#17
class Datadog::Core::Environment::Cgroup::Descriptor < ::Struct
  def controllers; end

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#17
  def controllers=(_); end

  def groups; end

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#17
  def groups=(_); end

  def id; end

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#17
  def id=(_); end

  def path; end

  # source://ddtrace//lib/datadog/core/environment/cgroup.rb#17
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/core/environment/cgroup.rb#15
Datadog::Core::Environment::Cgroup::LINE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/core/environment/class_count.rb#7
module Datadog::Core::Environment::ClassCount
  private

  # source://ddtrace//lib/datadog/core/environment/class_count.rb#14
  def available?; end

  # source://ddtrace//lib/datadog/core/environment/class_count.rb#10
  def value; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/class_count.rb#14
    def available?; end

    # source://ddtrace//lib/datadog/core/environment/class_count.rb#10
    def value; end
  end
end

# source://ddtrace//lib/datadog/core/environment/container.rb#9
module Datadog::Core::Environment::Container
  include ::Kernel

  private

  # source://ddtrace//lib/datadog/core/environment/container.rb#32
  def container_id; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#40
  def descriptor; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#28
  def platform; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#36
  def task_uid; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/container.rb#32
    def container_id; end

    # source://ddtrace//lib/datadog/core/environment/container.rb#40
    def descriptor; end

    # source://ddtrace//lib/datadog/core/environment/container.rb#28
    def platform; end

    # source://ddtrace//lib/datadog/core/environment/container.rb#36
    def task_uid; end
  end
end

# source://ddtrace//lib/datadog/core/environment/container.rb#13
Datadog::Core::Environment::Container::CONTAINER_PATTERN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/container.rb#17
Datadog::Core::Environment::Container::CONTAINER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/core/environment/container.rb#20
class Datadog::Core::Environment::Container::Descriptor < ::Struct
  def container_id; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#20
  def container_id=(_); end

  def platform; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#20
  def platform=(_); end

  def task_uid; end

  # source://ddtrace//lib/datadog/core/environment/container.rb#20
  def task_uid=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/core/environment/container.rb#18
Datadog::Core::Environment::Container::FARGATE_14_CONTAINER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/core/environment/container.rb#15
Datadog::Core::Environment::Container::PLATFORM_REGEX = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/core/environment/container.rb#16
Datadog::Core::Environment::Container::POD_REGEX = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/core/environment/container.rb#12
Datadog::Core::Environment::Container::UUID_PATTERN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#9
module Datadog::Core::Environment::Ext; end

# source://ddtrace//lib/datadog/core/environment/ext.rb#11
Datadog::Core::Environment::Ext::ENGINE_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#18
Datadog::Core::Environment::Ext::ENV_API_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#19
Datadog::Core::Environment::Ext::ENV_ENVIRONMENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#20
Datadog::Core::Environment::Ext::ENV_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#21
Datadog::Core::Environment::Ext::ENV_SITE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#22
Datadog::Core::Environment::Ext::ENV_TAGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#23
Datadog::Core::Environment::Ext::ENV_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#24
Datadog::Core::Environment::Ext::FALLBACK_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#31
Datadog::Core::Environment::Ext::LANG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#32
Datadog::Core::Environment::Ext::LANG_ENGINE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#33
Datadog::Core::Environment::Ext::LANG_INTERPRETER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#34
Datadog::Core::Environment::Ext::LANG_PLATFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#35
Datadog::Core::Environment::Ext::LANG_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#36
Datadog::Core::Environment::Ext::RUBY_ENGINE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#37
Datadog::Core::Environment::Ext::TAG_ENV = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#38
Datadog::Core::Environment::Ext::TAG_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#39
Datadog::Core::Environment::Ext::TAG_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/ext.rb#42
Datadog::Core::Environment::Ext::TRACER_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/environment/gc.rb#7
module Datadog::Core::Environment::GC
  private

  # source://ddtrace//lib/datadog/core/environment/gc.rb#14
  def available?; end

  # source://ddtrace//lib/datadog/core/environment/gc.rb#10
  def stat; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/gc.rb#14
    def available?; end

    # source://ddtrace//lib/datadog/core/environment/gc.rb#10
    def stat; end
  end
end

# source://ddtrace//lib/datadog/core/environment/identity.rb#13
module Datadog::Core::Environment::Identity
  extend ::Datadog::Core::Utils::Forking

  private

  # source://ddtrace//lib/datadog/core/environment/identity.rb#19
  def id; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#32
  def lang; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#36
  def lang_engine; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#40
  def lang_interpreter; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#44
  def lang_platform; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#48
  def lang_version; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#28
  def pid; end

  # source://ddtrace//lib/datadog/core/environment/identity.rb#52
  def tracer_version; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/identity.rb#19
    def id; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#32
    def lang; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#36
    def lang_engine; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#40
    def lang_interpreter; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#44
    def lang_platform; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#48
    def lang_version; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#28
    def pid; end

    # source://ddtrace//lib/datadog/core/environment/identity.rb#52
    def tracer_version; end
  end
end

# source://ddtrace//lib/datadog/core/environment/socket.rb#10
module Datadog::Core::Environment::Socket
  extend ::Datadog::Core::Utils::Forking

  private

  # source://ddtrace//lib/datadog/core/environment/socket.rb#15
  def hostname; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/socket.rb#15
    def hostname; end
  end
end

# source://ddtrace//lib/datadog/core/environment/thread_count.rb#7
module Datadog::Core::Environment::ThreadCount
  private

  # source://ddtrace//lib/datadog/core/environment/thread_count.rb#14
  def available?; end

  # source://ddtrace//lib/datadog/core/environment/thread_count.rb#10
  def value; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/thread_count.rb#14
    def available?; end

    # source://ddtrace//lib/datadog/core/environment/thread_count.rb#10
    def value; end
  end
end

# source://ddtrace//lib/datadog/core/environment/vm_cache.rb#15
module Datadog::Core::Environment::VMCache
  private

  # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#41
  def available?; end

  # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#23
  def global_constant_state; end

  # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#37
  def global_method_state; end

  class << self
    # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#41
    def available?; end

    # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#23
    def global_constant_state; end

    # source://ddtrace//lib/datadog/core/environment/vm_cache.rb#37
    def global_method_state; end
  end
end

# source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#9
module Datadog::Core::Environment::VariableHelpers
  extend ::Datadog::Core::Environment::VariableHelpers

  # source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#12
  def env_to_bool(var, default = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#22
  def env_to_float(var, default = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#17
  def env_to_int(var, default = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#36
  def env_to_list(var, default = T.unsafe(nil), comma_separated_only:); end

  private

  # source://ddtrace//lib/datadog/core/environment/variable_helpers.rb#62
  def decode_array(var); end
end

# source://ddtrace//lib/datadog/core/error.rb#10
class Datadog::Core::Error
  # source://ddtrace//lib/datadog/core/error.rb#89
  def initialize(type = T.unsafe(nil), message = T.unsafe(nil), backtrace = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/error.rb#11
  def backtrace; end

  # source://ddtrace//lib/datadog/core/error.rb#11
  def message; end

  # source://ddtrace//lib/datadog/core/error.rb#11
  def type; end

  class << self
    # source://ddtrace//lib/datadog/core/error.rb#14
    def build_from(value); end

    private

    # source://ddtrace//lib/datadog/core/error.rb#62
    def backtrace_for(ex, backtrace); end

    # source://ddtrace//lib/datadog/core/error.rb#37
    def full_backtrace(ex); end
  end
end

# source://ddtrace//lib/datadog/core/error.rb#97
Datadog::Core::Error::BlankError = T.let(T.unsafe(nil), Datadog::Core::Error)

# source://ddtrace//lib/datadog/core/error.rb#98
Datadog::Core::Error::ContainsMessage = T.let(T.unsafe(nil), Proc)

# source://ddtrace//lib/datadog/core/extensions.rb#10
module Datadog::Core::Extensions
  class << self
    # source://ddtrace//lib/datadog/core/extensions.rb#11
    def extended(base); end
  end
end

# source://ddtrace//lib/datadog/core/git/ext.rb#5
module Datadog::Core::Git; end

# source://ddtrace//lib/datadog/core/git/ext.rb#7
module Datadog::Core::Git::Ext; end

# source://ddtrace//lib/datadog/core/git/ext.rb#23
Datadog::Core::Git::Ext::ENV_BRANCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#28
Datadog::Core::Git::Ext::ENV_COMMIT_AUTHOR_DATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#27
Datadog::Core::Git::Ext::ENV_COMMIT_AUTHOR_EMAIL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#26
Datadog::Core::Git::Ext::ENV_COMMIT_AUTHOR_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#31
Datadog::Core::Git::Ext::ENV_COMMIT_COMMITTER_DATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#30
Datadog::Core::Git::Ext::ENV_COMMIT_COMMITTER_EMAIL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#29
Datadog::Core::Git::Ext::ENV_COMMIT_COMMITTER_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#25
Datadog::Core::Git::Ext::ENV_COMMIT_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#22
Datadog::Core::Git::Ext::ENV_COMMIT_SHA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#21
Datadog::Core::Git::Ext::ENV_REPOSITORY_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#24
Datadog::Core::Git::Ext::ENV_TAG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#8
Datadog::Core::Git::Ext::TAG_BRANCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#12
Datadog::Core::Git::Ext::TAG_COMMIT_AUTHOR_DATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#13
Datadog::Core::Git::Ext::TAG_COMMIT_AUTHOR_EMAIL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#14
Datadog::Core::Git::Ext::TAG_COMMIT_AUTHOR_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#15
Datadog::Core::Git::Ext::TAG_COMMIT_COMMITTER_DATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#16
Datadog::Core::Git::Ext::TAG_COMMIT_COMMITTER_EMAIL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#17
Datadog::Core::Git::Ext::TAG_COMMIT_COMMITTER_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#18
Datadog::Core::Git::Ext::TAG_COMMIT_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#19
Datadog::Core::Git::Ext::TAG_COMMIT_SHA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#9
Datadog::Core::Git::Ext::TAG_REPOSITORY_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/git/ext.rb#10
Datadog::Core::Git::Ext::TAG_TAG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/logger.rb#12
class Datadog::Core::Logger < ::Logger
  # source://ddtrace//lib/datadog/core/logger.rb#15
  def initialize(*args, &block); end

  # source://ddtrace//lib/datadog/core/logger.rb#21
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/logger.rb#21
  def log(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end
end

# source://ddtrace//lib/datadog/core/logger.rb#13
Datadog::Core::Logger::PREFIX = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/logging/ext.rb#3
module Datadog::Core::Logging; end

# source://ddtrace//lib/datadog/core/logging/ext.rb#4
module Datadog::Core::Logging::Ext; end

# source://ddtrace//lib/datadog/core/logging/ext.rb#7
Datadog::Core::Logging::Ext::DD_SOURCE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#5
module Datadog::Core::Metrics; end

# source://ddtrace//lib/datadog/core/metrics/client.rb#17
class Datadog::Core::Metrics::Client
  include ::Datadog::Core::Metrics::Options
  extend ::Datadog::Core::Metrics::Options
  extend ::Datadog::Core::Metrics::Helpers

  # source://ddtrace//lib/datadog/core/metrics/client.rb#24
  def initialize(statsd: T.unsafe(nil), enabled: T.unsafe(nil), **_); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#165
  def close; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#82
  def configure(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#91
  def count(stat, value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#52
  def default_hostname; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#56
  def default_port; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#60
  def default_statsd_client; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#104
  def distribution(stat, value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#48
  def enabled=(enabled); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#44
  def enabled?; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#129
  def gauge(stat, value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#117
  def increment(stat, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#161
  def send_metrics(metrics); end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#87
  def send_stats?; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#22
  def statsd; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#35
  def supported?; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#142
  def time(stat, options = T.unsafe(nil)); end

  private

  # source://ddtrace//lib/datadog/core/metrics/client.rb#171
  def dogstatsd_version; end

  # source://ddtrace//lib/datadog/core/metrics/client.rb#187
  def ignored_statsd_warning; end
end

# source://ddtrace//lib/datadog/core/metrics/client.rb#184
Datadog::Core::Metrics::Client::IGNORED_STATSD_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#7
module Datadog::Core::Metrics::Ext; end

# source://ddtrace//lib/datadog/core/metrics/ext.rb#8
Datadog::Core::Metrics::Ext::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#9
Datadog::Core::Metrics::Ext::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#10
Datadog::Core::Metrics::Ext::ENV_DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#11
Datadog::Core::Metrics::Ext::ENV_DEFAULT_PORT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#13
Datadog::Core::Metrics::Ext::TAG_LANG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#14
Datadog::Core::Metrics::Ext::TAG_LANG_INTERPRETER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#15
Datadog::Core::Metrics::Ext::TAG_LANG_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/ext.rb#16
Datadog::Core::Metrics::Ext::TAG_TRACER_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/metrics/helpers.rb#7
module Datadog::Core::Metrics::Helpers
  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#15
  def count(name, stat); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#15
  def distribution(name, stat); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#15
  def gauge(name, stat); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#15
  def increment(name, stat); end

  # source://ddtrace//lib/datadog/core/metrics/helpers.rb#15
  def time(name, stat); end
end

# source://ddtrace//lib/datadog/core/metrics/logging.rb#9
module Datadog::Core::Metrics::Logging; end

# source://ddtrace//lib/datadog/core/metrics/logging.rb#11
class Datadog::Core::Metrics::Logging::Adapter
  # source://ddtrace//lib/datadog/core/metrics/logging.rb#14
  def initialize(logger = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#25
  def count(stat, value, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#29
  def distribution(stat, value, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#37
  def gauge(stat, value, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#33
  def increment(stat, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#12
  def logger; end

  # source://ddtrace//lib/datadog/core/metrics/logging.rb#12
  def logger=(_arg0); end
end

# source://ddtrace//lib/datadog/core/metrics/metric.rb#6
class Datadog::Core::Metrics::Metric < ::Struct
  # source://ddtrace//lib/datadog/core/metrics/metric.rb#7
  def initialize(*args); end

  def name; end

  # source://ddtrace//lib/datadog/core/metrics/metric.rb#6
  def name=(_); end

  def options; end

  # source://ddtrace//lib/datadog/core/metrics/metric.rb#6
  def options=(_); end

  def type; end

  # source://ddtrace//lib/datadog/core/metrics/metric.rb#6
  def type=(_); end

  def value; end

  # source://ddtrace//lib/datadog/core/metrics/metric.rb#6
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/core/metrics/options.rb#11
module Datadog::Core::Metrics::Options
  # source://ddtrace//lib/datadog/core/metrics/options.rb#34
  def default_metric_options; end

  # source://ddtrace//lib/datadog/core/metrics/options.rb#21
  def metric_options(options = T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/core/metrics/options.rb#12
Datadog::Core::Metrics::Options::DEFAULT = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/core/metrics/options.rb#13
Datadog::Core::Metrics::Options::DEFAULT_TAGS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/core/pin.rb#9
class Datadog::Core::Pin
  # source://ddtrace//lib/datadog/core/pin.rb#27
  def initialize(**options); end

  # source://ddtrace//lib/datadog/core/pin.rb#31
  def [](name); end

  # source://ddtrace//lib/datadog/core/pin.rb#35
  def []=(name, value); end

  # source://ddtrace//lib/datadog/core/pin.rb#39
  def key?(name); end

  # source://ddtrace//lib/datadog/core/pin.rb#44
  def onto(obj); end

  # source://ddtrace//lib/datadog/core/pin.rb#65
  def to_s; end

  private

  # source://ddtrace//lib/datadog/core/pin.rb#72
  def options; end

  # source://ddtrace//lib/datadog/core/pin.rb#72
  def options=(_arg0); end

  class << self
    # source://ddtrace//lib/datadog/core/pin.rb#10
    def get_from(obj); end

    # source://ddtrace//lib/datadog/core/pin.rb#16
    def set_on(obj, **options); end
  end
end

# source://ddtrace//lib/datadog/core/runtime/ext.rb#5
module Datadog::Core::Runtime; end

# source://ddtrace//lib/datadog/core/runtime/ext.rb#7
module Datadog::Core::Runtime::Ext; end

# source://ddtrace//lib/datadog/core/runtime/ext.rb#14
module Datadog::Core::Runtime::Ext::Metrics; end

# source://ddtrace//lib/datadog/core/runtime/ext.rb#15
Datadog::Core::Runtime::Ext::Metrics::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#17
Datadog::Core::Runtime::Ext::Metrics::METRIC_CLASS_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#18
Datadog::Core::Runtime::Ext::Metrics::METRIC_GC_PREFIX = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#20
Datadog::Core::Runtime::Ext::Metrics::METRIC_GLOBAL_CONSTANT_STATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#21
Datadog::Core::Runtime::Ext::Metrics::METRIC_GLOBAL_METHOD_STATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#19
Datadog::Core::Runtime::Ext::Metrics::METRIC_THREAD_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#23
Datadog::Core::Runtime::Ext::Metrics::TAG_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#8
Datadog::Core::Runtime::Ext::TAG_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#9
Datadog::Core::Runtime::Ext::TAG_LANG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/ext.rb#10
Datadog::Core::Runtime::Ext::TAG_PID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/runtime/metrics.rb#15
class Datadog::Core::Runtime::Metrics < ::Datadog::Core::Metrics::Client
  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#16
  def initialize(**options); end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#85
  def default_metric_options; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#41
  def flush; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#73
  def gc_metrics; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#26
  def register_service(service); end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#79
  def try_flush; end

  private

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#102
  def compile_service_tags!; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#108
  def nested_gc_metric(prefix, k, v); end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#98
  def service_tags; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#98
  def services; end

  # source://ddtrace//lib/datadog/core/runtime/metrics.rb#120
  def to_metric_name(str); end
end

# source://ddtrace//lib/datadog/core/utils/time.rb#5
module Datadog::Core::Utils
  extend ::Datadog::Core::Utils::Forking

  class << self
    # source://ddtrace//lib/datadog/core/utils.rb#107
    def extract_host_port(host_port); end

    # source://ddtrace//lib/datadog/core/utils.rb#20
    def next_id; end

    # source://ddtrace//lib/datadog/core/utils.rb#44
    def truncate(value, size, omission = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/core/utils.rb#68
    def utf8_encode(str, binary: T.unsafe(nil), placeholder: T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/core/utils.rb#91
    def without_warnings; end

    private

    # source://ddtrace//lib/datadog/core/utils.rb#25
    def id_rng; end

    # source://ddtrace//lib/datadog/core/utils.rb#29
    def reset!; end
  end
end

# source://ddtrace//lib/datadog/core/utils.rb#13
Datadog::Core::Utils::EMPTY_STRING = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/core/utils/forking.rb#7
module Datadog::Core::Utils::Forking
  # source://ddtrace//lib/datadog/core/utils/forking.rb#20
  def after_fork!; end

  # source://ddtrace//lib/datadog/core/utils/forking.rb#38
  def fork_pid; end

  # source://ddtrace//lib/datadog/core/utils/forking.rb#30
  def forked?; end

  # source://ddtrace//lib/datadog/core/utils/forking.rb#34
  def update_fork_pid!; end

  class << self
    # source://ddtrace//lib/datadog/core/utils/forking.rb#12
    def extended(base); end

    # source://ddtrace//lib/datadog/core/utils/forking.rb#8
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/utils/forking.rb#43
module Datadog::Core::Utils::Forking::ClassExtensions
  # source://ddtrace//lib/datadog/core/utils/forking.rb#54
  def initialize(*args, &block); end
end

# source://ddtrace//lib/datadog/core/utils/only_once.rb#16
class Datadog::Core::Utils::OnlyOnce
  # source://ddtrace//lib/datadog/core/utils/only_once.rb#17
  def initialize; end

  # source://ddtrace//lib/datadog/core/utils/only_once.rb#32
  def ran?; end

  # source://ddtrace//lib/datadog/core/utils/only_once.rb#22
  def run; end

  private

  # source://ddtrace//lib/datadog/core/utils/only_once.rb#38
  def reset_ran_once_state_for_tests; end
end

# source://ddtrace//lib/datadog/core/utils/safe_dup.rb#7
module Datadog::Core::Utils::SafeDup
  class << self
    # source://ddtrace//lib/datadog/core/utils/safe_dup.rb#21
    def frozen_or_dup(v); end
  end
end

# source://ddtrace//lib/datadog/core/utils/time.rb#7
module Datadog::Core::Utils::Time
  include ::Kernel

  private

  # source://ddtrace//lib/datadog/core/utils/time.rb#46
  def as_utc_epoch_ns(time); end

  # source://ddtrace//lib/datadog/core/utils/time.rb#16
  def get_time(unit = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/utils/time.rb#39
  def measure; end

  # source://ddtrace//lib/datadog/core/utils/time.rb#23
  def now; end

  # source://ddtrace//lib/datadog/core/utils/time.rb#35
  def now_provider=(block); end

  class << self
    # source://ddtrace//lib/datadog/core/utils/time.rb#46
    def as_utc_epoch_ns(time); end

    # source://ddtrace//lib/datadog/core/utils/time.rb#16
    def get_time(unit = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/core/utils/time.rb#39
    def measure; end

    # source://ddtrace//lib/datadog/core/utils/time.rb#23
    def now; end

    # source://ddtrace//lib/datadog/core/utils/time.rb#35
    def now_provider=(block); end
  end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#11
module Datadog::Core::Vendor; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#12
module Datadog::Core::Vendor::Multipart; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#13
module Datadog::Core::Vendor::Multipart::Post; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#22
class Datadog::Core::Vendor::Multipart::Post::CompositeReadIO
  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#25
  def initialize(*ios); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#31
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#48
  def rewind; end

  private

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#59
  def advance_io; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#55
  def current_io; end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/multipartable.rb#18
module Datadog::Core::Vendor::Multipart::Post::Multipartable
  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/multipartable.rb#33
  def initialize(path, params, headers = T.unsafe(nil), boundary = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/multipartable.rb#55
  def boundary; end

  class << self
    # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/multipartable.rb#19
    def secure_boundary; end
  end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#14
module Datadog::Core::Vendor::Multipart::Post::Parts; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#126
class Datadog::Core::Vendor::Multipart::Post::Parts::EpiloguePart
  include ::Datadog::Core::Vendor::Multipart::Post::Parts::Part

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#129
  def initialize(boundary); end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#71
class Datadog::Core::Vendor::Multipart::Post::Parts::FilePart
  include ::Datadog::Core::Vendor::Multipart::Post::Parts::Part

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#80
  def initialize(boundary, name, io, headers = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#95
  def build_head(boundary, name, filename, type, content_len, opts = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#74
  def length; end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#39
class Datadog::Core::Vendor::Multipart::Post::Parts::ParamPart
  include ::Datadog::Core::Vendor::Multipart::Post::Parts::Part

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#46
  def initialize(boundary, name, value, headers = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#59
  def build_part(boundary, name, value, headers = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#51
  def length; end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#15
module Datadog::Core::Vendor::Multipart::Post::Parts::Part
  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#29
  def length; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#33
  def to_io; end

  class << self
    # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#25
    def file?(value); end

    # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/parts.rb#16
    def new(boundary, name, value, headers = T.unsafe(nil)); end
  end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#65
class Datadog::Core::Vendor::Multipart::Post::UploadIO
  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#82
  def initialize(filename_or_io, content_type, filename = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#66
  def content_type; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#66
  def io; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#66
  def local_path; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#108
  def method_missing(*args); end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#66
  def opts; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#66
  def original_filename; end

  # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#112
  def respond_to?(meth, include_all = T.unsafe(nil)); end

  class << self
    # source://ddtrace//lib/datadog/core/vendor/multipart-post/multipart/post/composite_read_io.rb#102
    def convert!(io, content_type, original_filename, local_path); end
  end
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#19
module Datadog::Core::Vendor::Net; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#20
class Datadog::Core::Vendor::Net::HTTP; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#27
class Datadog::Core::Vendor::Net::HTTP::Post; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#28
class Datadog::Core::Vendor::Net::HTTP::Post::Multipart < ::Net::HTTP::Post
  include ::Datadog::Core::Vendor::Multipart::Post::Multipartable
end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#21
class Datadog::Core::Vendor::Net::HTTP::Put; end

# source://ddtrace//lib/datadog/core/vendor/multipart-post/net/http/post/multipart.rb#22
class Datadog::Core::Vendor::Net::HTTP::Put::Multipart < ::Net::HTTP::Put
  include ::Datadog::Core::Vendor::Multipart::Post::Multipartable
end

# source://ddtrace//lib/datadog/core/worker.rb#6
class Datadog::Core::Worker
  # source://ddtrace//lib/datadog/core/worker.rb#10
  def initialize(&block); end

  # source://ddtrace//lib/datadog/core/worker.rb#14
  def perform(*args); end

  # source://ddtrace//lib/datadog/core/worker.rb#7
  def task; end

  protected

  # source://ddtrace//lib/datadog/core/worker.rb#20
  def task=(_arg0); end
end

# source://ddtrace//lib/datadog/core/workers/async.rb#7
module Datadog::Core::Workers; end

# source://ddtrace//lib/datadog/core/workers/async.rb#8
module Datadog::Core::Workers::Async; end

# source://ddtrace//lib/datadog/core/workers/async.rb#12
module Datadog::Core::Workers::Async::Thread
  # source://ddtrace//lib/datadog/core/workers/async.rb#70
  def completed?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#28
  def error; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#64
  def error?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#74
  def failed?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#82
  def fork_policy; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#32
  def fork_policy=(_arg0); end

  # source://ddtrace//lib/datadog/core/workers/async.rb#78
  def forked?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#35
  def join(timeout = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/workers/async.rb#28
  def result; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#50
  def run_async?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#60
  def running?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#56
  def started?; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#41
  def terminate; end

  protected

  # source://ddtrace//lib/datadog/core/workers/async.rb#95
  def after_fork; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#91
  def mutex; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#88
  def result=(_arg0); end

  private

  # source://ddtrace//lib/datadog/core/workers/async.rb#104
  def mutex_after_fork; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#101
  def pid; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#166
  def restart_after_fork(&block); end

  # source://ddtrace//lib/datadog/core/workers/async.rb#112
  def start_async(&block); end

  # source://ddtrace//lib/datadog/core/workers/async.rb#129
  def start_worker; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#153
  def stop_fork; end

  # source://ddtrace//lib/datadog/core/workers/async.rb#108
  def worker; end

  class << self
    # source://ddtrace//lib/datadog/core/workers/async.rb#17
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/workers/async.rb#14
Datadog::Core::Workers::Async::Thread::FORK_POLICY_RESTART = T.let(T.unsafe(nil), Symbol)

# source://ddtrace//lib/datadog/core/workers/async.rb#13
Datadog::Core::Workers::Async::Thread::FORK_POLICY_STOP = T.let(T.unsafe(nil), Symbol)

# source://ddtrace//lib/datadog/core/workers/async.rb#22
module Datadog::Core::Workers::Async::Thread::PrependedMethods
  # source://ddtrace//lib/datadog/core/workers/async.rb#23
  def perform(*args); end
end

# source://ddtrace//lib/datadog/core/workers/async.rb#15
Datadog::Core::Workers::Async::Thread::SHUTDOWN_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/workers/interval_loop.rb#8
module Datadog::Core::Workers::IntervalLoop
  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#65
  def loop_back_off!; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#53
  def loop_back_off_max; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#49
  def loop_back_off_ratio; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#45
  def loop_base_interval; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#73
  def loop_wait_before_first_iteration?; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#57
  def loop_wait_time; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#61
  def loop_wait_time=(value); end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#39
  def run_loop?; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#24
  def stop_loop; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#35
  def work_pending?; end

  protected

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#79
  def loop_back_off_max=(_arg0); end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#79
  def loop_back_off_ratio=(_arg0); end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#79
  def loop_base_interval=(_arg0); end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#84
  def mutex; end

  private

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#90
  def perform_loop; end

  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#113
  def shutdown; end

  class << self
    # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/workers/interval_loop.rb#10
Datadog::Core::Workers::IntervalLoop::BACK_OFF_MAX = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/workers/interval_loop.rb#9
Datadog::Core::Workers::IntervalLoop::BACK_OFF_RATIO = T.let(T.unsafe(nil), Float)

# source://ddtrace//lib/datadog/core/workers/interval_loop.rb#11
Datadog::Core::Workers::IntervalLoop::BASE_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/workers/interval_loop.rb#18
module Datadog::Core::Workers::IntervalLoop::PrependedMethods
  # source://ddtrace//lib/datadog/core/workers/interval_loop.rb#19
  def perform(*args); end
end

# source://ddtrace//lib/datadog/core/workers/polling.rb#10
module Datadog::Core::Workers::Polling
  include ::Datadog::Core::Workers::IntervalLoop
  include ::Datadog::Core::Workers::Async::Thread

  # source://ddtrace//lib/datadog/core/workers/polling.rb#52
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/workers/polling.rb#45
  def enabled?; end

  # source://ddtrace//lib/datadog/core/workers/polling.rb#26
  def stop(force_stop = T.unsafe(nil), timeout = T.unsafe(nil)); end

  class << self
    # source://ddtrace//lib/datadog/core/workers/polling.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/core/workers/polling.rb#20
module Datadog::Core::Workers::Polling::PrependedMethods
  # source://ddtrace//lib/datadog/core/workers/polling.rb#21
  def perform(*args); end
end

# source://ddtrace//lib/datadog/core/workers/polling.rb#11
Datadog::Core::Workers::Polling::SHUTDOWN_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#13
class Datadog::Core::Workers::RuntimeMetrics < ::Datadog::Core::Worker
  include ::Datadog::Core::Workers::IntervalLoop::PrependedMethods
  include ::Datadog::Core::Workers::Async::Thread::PrependedMethods
  include ::Datadog::Core::Workers::Polling::PrependedMethods
  include ::Datadog::Core::Workers::Polling
  include ::Datadog::Core::Workers::IntervalLoop
  include ::Datadog::Core::Workers::Async::Thread

  # source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#23
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#20
  def metrics; end

  # source://ddtrace//lib/datadog/core/workers/polling.rb#21
  def perform(*args); end

  # source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#42
  def register_service(service); end

  # source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#53
  def stop(*args, close_metrics: T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#18
Datadog::Core::Workers::RuntimeMetrics::DEFAULT_BACK_OFF_MAX = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/core/workers/runtime_metrics.rb#17
Datadog::Core::Workers::RuntimeMetrics::DEFAULT_FLUSH_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/kit.rb#7
module Datadog::Kit; end

# source://ddtrace//lib/datadog/kit/identity.rb#6
module Datadog::Kit::Identity
  class << self
    # source://ddtrace//lib/datadog/kit/identity.rb#30
    def set_user(trace, id:, email: T.unsafe(nil), name: T.unsafe(nil), session_id: T.unsafe(nil), role: T.unsafe(nil), scope: T.unsafe(nil), **others); end
  end
end

# source://ddtrace//lib/datadog/profiling/ext.rb#4
module Datadog::Profiling
  class << self
    # source://ddtrace//lib/datadog/profiling.rb#34
    def start_if_enabled; end

    # source://ddtrace//lib/datadog/profiling.rb#13
    def supported?; end

    # source://ddtrace//lib/datadog/profiling.rb#17
    def unsupported_reason; end

    private

    # source://ddtrace//lib/datadog/profiling.rb#145
    def load_profiling; end

    # source://ddtrace//lib/datadog/profiling.rb#44
    def native_library_compilation_skipped?; end

    # source://ddtrace//lib/datadog/profiling.rb#119
    def native_library_failed_to_load?; end

    # source://ddtrace//lib/datadog/profiling.rb#83
    def protobuf_failed_to_load?; end

    # source://ddtrace//lib/datadog/profiling.rb#64
    def protobuf_gem_unavailable?; end

    # source://ddtrace//lib/datadog/profiling.rb#98
    def protobuf_loaded_successfully?; end

    # source://ddtrace//lib/datadog/profiling.rb#73
    def protobuf_version_unsupported?; end

    # source://ddtrace//lib/datadog/profiling.rb#133
    def try_loading_native_library; end

    # source://ddtrace//lib/datadog/profiling.rb#50
    def try_reading_skipped_reason_file(file_api = T.unsafe(nil)); end
  end
end

# source://ddtrace//lib/datadog/profiling/ext.rb#5
module Datadog::Profiling::Ext; end

# source://ddtrace//lib/datadog/profiling/ext.rb#9
Datadog::Profiling::Ext::ENV_AGENTLESS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#6
Datadog::Profiling::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#10
Datadog::Profiling::Ext::ENV_ENDPOINT_COLLECTION_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#8
Datadog::Profiling::Ext::ENV_MAX_FRAMES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#7
Datadog::Profiling::Ext::ENV_UPLOAD_TIMEOUT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#12
module Datadog::Profiling::Ext::Pprof; end

# source://ddtrace//lib/datadog/profiling/ext.rb#13
Datadog::Profiling::Ext::Pprof::LABEL_KEY_LOCAL_ROOT_SPAN_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#14
Datadog::Profiling::Ext::Pprof::LABEL_KEY_SPAN_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#15
Datadog::Profiling::Ext::Pprof::LABEL_KEY_THREAD_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#16
Datadog::Profiling::Ext::Pprof::LABEL_KEY_TRACE_ENDPOINT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#17
Datadog::Profiling::Ext::Pprof::SAMPLE_VALUE_NO_VALUE = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/profiling/ext.rb#18
Datadog::Profiling::Ext::Pprof::VALUE_TYPE_CPU = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#19
Datadog::Profiling::Ext::Pprof::VALUE_TYPE_WALL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#20
Datadog::Profiling::Ext::Pprof::VALUE_UNIT_NANOSECONDS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#23
module Datadog::Profiling::Ext::Transport; end

# source://ddtrace//lib/datadog/profiling/ext.rb#24
module Datadog::Profiling::Ext::Transport::HTTP; end

# source://ddtrace//lib/datadog/profiling/ext.rb#52
Datadog::Profiling::Ext::Transport::HTTP::CODE_PROVENANCE_FILENAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#51
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_CODE_PROVENANCE_DATA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#29
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_FAMILY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#43
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_INTAKE_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#48
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_PPROF_DATA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#28
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_RECORDING_END = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#27
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_RECORDING_START = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#42
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#30
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_ENV = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#31
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#32
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_LANGUAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#33
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_PID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#34
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_PROFILER_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#35
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_RUNTIME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#36
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_RUNTIME_ENGINE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#37
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_RUNTIME_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#38
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_RUNTIME_PLATFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#39
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_RUNTIME_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#40
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#41
Datadog::Profiling::Ext::Transport::HTTP::FORM_FIELD_TAG_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#45
Datadog::Profiling::Ext::Transport::HTTP::HEADER_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#46
Datadog::Profiling::Ext::Transport::HTTP::HEADER_CONTENT_TYPE_OCTET_STREAM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#49
Datadog::Profiling::Ext::Transport::HTTP::PPROF_DEFAULT_FILENAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling/ext.rb#25
Datadog::Profiling::Ext::Transport::HTTP::URI_TEMPLATE_DD_API = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/profiling.rb#10
Datadog::Profiling::GOOGLE_PROTOBUF_MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#4
module Datadog::Tracing
  class << self
    # source://ddtrace//lib/datadog/tracing.rb#50
    def active_span; end

    # source://ddtrace//lib/datadog/tracing.rb#41
    def active_trace; end

    # source://ddtrace//lib/datadog/tracing.rb#117
    def before_flush(*processors, &processor_block); end

    # source://ddtrace//lib/datadog/tracing.rb#23
    def continue_trace!(digest, &block); end

    # source://ddtrace//lib/datadog/tracing.rb#75
    def correlation; end

    # source://ddtrace//lib/datadog/tracing.rb#123
    def enabled?; end

    # source://ddtrace//lib/datadog/tracing.rb#60
    def keep!; end

    # source://ddtrace//lib/datadog/tracing.rb#95
    def log_correlation; end

    # source://ddtrace//lib/datadog/tracing.rb#35
    def logger; end

    # source://ddtrace//lib/datadog/tracing.rb#68
    def reject!; end

    # source://ddtrace//lib/datadog/tracing.rb#109
    def shutdown!; end

    # source://ddtrace//lib/datadog/tracing.rb#17
    def trace(name, continue_from: T.unsafe(nil), **span_options, &block); end

    private

    # source://ddtrace//lib/datadog/tracing.rb#133
    def components; end

    # source://ddtrace//lib/datadog/tracing.rb#137
    def tracer; end
  end
end

# source://ddtrace//lib/datadog/tracing/analytics.rb#8
module Datadog::Tracing::Analytics
  class << self
    # source://ddtrace//lib/datadog/tracing/analytics.rb#16
    def set_measured(span_op, value = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/analytics.rb#10
    def set_sample_rate(span_op, sample_rate); end
  end
end

# source://ddtrace//lib/datadog/tracing/buffer.rb#114
class Datadog::Tracing::CRubyTraceBuffer < ::Datadog::Core::Buffer::CRuby
  include ::Datadog::Tracing::MeasuredBuffer
end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#5
module Datadog::Tracing::Configuration; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#6
module Datadog::Tracing::Configuration::Ext; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#8
module Datadog::Tracing::Configuration::Ext::Analytics; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#9
Datadog::Tracing::Configuration::Ext::Analytics::ENV_TRACE_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#13
module Datadog::Tracing::Configuration::Ext::Correlation; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#14
Datadog::Tracing::Configuration::Ext::Correlation::ENV_LOGS_INJECTION_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#18
module Datadog::Tracing::Configuration::Ext::Distributed; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#23
Datadog::Tracing::Configuration::Ext::Distributed::ENV_PROPAGATION_STYLE_EXTRACT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#22
Datadog::Tracing::Configuration::Ext::Distributed::ENV_PROPAGATION_STYLE_INJECT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#20
Datadog::Tracing::Configuration::Ext::Distributed::PROPAGATION_STYLE_B3 = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#21
Datadog::Tracing::Configuration::Ext::Distributed::PROPAGATION_STYLE_B3_SINGLE_HEADER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#19
Datadog::Tracing::Configuration::Ext::Distributed::PROPAGATION_STYLE_DATADOG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#27
module Datadog::Tracing::Configuration::Ext::NET; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#28
Datadog::Tracing::Configuration::Ext::NET::ENV_REPORT_HOSTNAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#32
module Datadog::Tracing::Configuration::Ext::Sampling; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#34
Datadog::Tracing::Configuration::Ext::Sampling::ENV_RATE_LIMIT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#33
Datadog::Tracing::Configuration::Ext::Sampling::ENV_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#38
module Datadog::Tracing::Configuration::Ext::Test; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#39
Datadog::Tracing::Configuration::Ext::Test::ENV_MODE_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#43
module Datadog::Tracing::Configuration::Ext::Transport; end

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#44
Datadog::Tracing::Configuration::Ext::Transport::ENV_DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#45
Datadog::Tracing::Configuration::Ext::Transport::ENV_DEFAULT_PORT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/configuration/ext.rb#46
Datadog::Tracing::Configuration::Ext::Transport::ENV_DEFAULT_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/context.rb#17
class Datadog::Tracing::Context
  include ::Datadog::Core::Utils::Forking::ClassExtensions
  include ::Datadog::Core::Utils::Forking

  # source://ddtrace//lib/datadog/core/utils/forking.rb#54
  def initialize(*args, &block); end

  # source://ddtrace//lib/datadog/tracing/context.rb#40
  def activate!(trace); end

  # source://ddtrace//lib/datadog/tracing/context.rb#20
  def active_trace; end

  # source://ddtrace//lib/datadog/tracing/context.rb#55
  def fork_clone; end

  private

  # source://ddtrace//lib/datadog/tracing/context.rb#62
  def set_active_trace!(trace); end
end

# source://ddtrace//lib/datadog/tracing/contrib/registry.rb#5
module Datadog::Tracing::Contrib; end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#6
module Datadog::Tracing::Contrib::ActionCable; end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActionCable::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActionCable::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#14
module Datadog::Tracing::Contrib::ActionCable::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#21
module Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#30
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#22
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#12
module Datadog::Tracing::Contrib::ActionCable::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#22
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#30
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#26
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#22
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#30
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#26
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events.rb#14
Datadog::Tracing::Contrib::ActionCable::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#17
module Datadog::Tracing::Contrib::ActionCable::Events::Broadcast
  include ::Datadog::Tracing::Contrib::ActionCable::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#24
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#37
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#28
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#32
  def span_type; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#24
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#37
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#28
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#32
    def span_type; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/broadcast.rb#20
Datadog::Tracing::Contrib::ActionCable::Events::Broadcast::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#16
module Datadog::Tracing::Contrib::ActionCable::Events::PerformAction
  include ::Datadog::Tracing::Contrib::ActionCable::RootContextEvent
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionCable::RootContextEvent::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#23
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#36
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#27
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#31
  def span_type; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#23
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#36
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#27
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#31
    def span_type; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/perform_action.rb#19
Datadog::Tracing::Contrib::ActionCable::Events::PerformAction::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#16
module Datadog::Tracing::Contrib::ActionCable::Events::Transmit
  include ::Datadog::Tracing::Contrib::ActionCable::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#23
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#36
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#27
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#31
  def span_type; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#23
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#36
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#27
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#31
    def span_type; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/events/transmit.rb#19
Datadog::Tracing::Contrib::ActionCable::Events::Transmit::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#9
module Datadog::Tracing::Contrib::ActionCable::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#11
Datadog::Tracing::Contrib::ActionCable::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#12
Datadog::Tracing::Contrib::ActionCable::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#10
Datadog::Tracing::Contrib::ActionCable::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#13
Datadog::Tracing::Contrib::ActionCable::Ext::SPAN_ACTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#14
Datadog::Tracing::Contrib::ActionCable::Ext::SPAN_BROADCAST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#15
Datadog::Tracing::Contrib::ActionCable::Ext::SPAN_ON_OPEN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#16
Datadog::Tracing::Contrib::ActionCable::Ext::SPAN_TRANSMIT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#17
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_ACTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#18
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_BROADCAST_CODER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#19
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_CHANNEL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#20
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_CHANNEL_CLASS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#21
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#22
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_CONNECTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#23
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_OPERATION_ACTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#24
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_OPERATION_BROADCAST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#25
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_OPERATION_ON_OPEN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#26
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_OPERATION_TRANSMIT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/ext.rb#27
Datadog::Tracing::Contrib::ActionCable::Ext::TAG_TRANSMIT_VIA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#12
module Datadog::Tracing::Contrib::ActionCable::Instrumentation; end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#40
module Datadog::Tracing::Contrib::ActionCable::Instrumentation::ActionCableChannel
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#41
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#60
class Datadog::Tracing::Contrib::ActionCable::Instrumentation::ActionCableChannel::Tracer
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#61
    def trace(channel, hook); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#15
module Datadog::Tracing::Contrib::ActionCable::Instrumentation::ActionCableConnection
  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/instrumentation.rb#16
  def on_open; end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#13
class Datadog::Tracing::Contrib::ActionCable::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/integration.rb#16
Datadog::Tracing::Contrib::ActionCable::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/patcher.rb#13
module Datadog::Tracing::Contrib::ActionCable::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#40
module Datadog::Tracing::Contrib::ActionCable::RootContextEvent
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActionCable::RootContextEvent::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#41
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#47
module Datadog::Tracing::Contrib::ActionCable::RootContextEvent::ClassMethods
  include ::Datadog::Tracing::Contrib::ActionCable::Event::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#50
  def subscription(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_cable/event.rb#62
  def ensure_clean_context!; end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#6
module Datadog::Tracing::Contrib::ActionMailer; end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActionMailer::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActionMailer::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def email_data; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def email_data=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#12
module Datadog::Tracing::Contrib::ActionMailer::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActionMailer::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#19
module Datadog::Tracing::Contrib::ActionMailer::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#26
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#30
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/event.rb#20
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#11
module Datadog::Tracing::Contrib::ActionMailer::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#19
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#27
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#23
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#19
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#27
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#23
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events.rb#12
Datadog::Tracing::Contrib::ActionMailer::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#13
module Datadog::Tracing::Contrib::ActionMailer::Events::Deliver
  include ::Datadog::Tracing::Contrib::ActionMailer::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionMailer::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#20
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#33
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#24
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#28
  def span_type; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#20
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#33
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#24
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#28
    def span_type; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/deliver.rb#16
Datadog::Tracing::Contrib::ActionMailer::Events::Deliver::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#13
module Datadog::Tracing::Contrib::ActionMailer::Events::Process
  include ::Datadog::Tracing::Contrib::ActionMailer::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionMailer::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#20
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#33
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#24
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#28
  def span_type; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#20
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#33
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#24
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#28
    def span_type; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/events/process.rb#16
Datadog::Tracing::Contrib::ActionMailer::Events::Process::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#9
module Datadog::Tracing::Contrib::ActionMailer::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#11
Datadog::Tracing::Contrib::ActionMailer::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#12
Datadog::Tracing::Contrib::ActionMailer::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#10
Datadog::Tracing::Contrib::ActionMailer::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#14
Datadog::Tracing::Contrib::ActionMailer::Ext::SPAN_DELIVER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#13
Datadog::Tracing::Contrib::ActionMailer::Ext::SPAN_PROCESS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#16
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_ACTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#25
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_BCC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#26
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_CC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#15
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#27
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_DATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#24
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_FROM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#17
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_MAILER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#18
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_MSG_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#19
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_OPERATION_DELIVER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#20
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_OPERATION_PROCESS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#28
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_PERFORM_DELIVERIES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#22
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_SUBJECT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/ext.rb#23
Datadog::Tracing::Contrib::ActionMailer::Ext::TAG_TO = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#13
class Datadog::Tracing::Contrib::ActionMailer::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/integration.rb#16
Datadog::Tracing::Contrib::ActionMailer::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/action_mailer/patcher.rb#12
module Datadog::Tracing::Contrib::ActionMailer::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_mailer/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#6
module Datadog::Tracing::Contrib::ActionPack; end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#15
module Datadog::Tracing::Contrib::ActionPack::ActionController; end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#17
module Datadog::Tracing::Contrib::ActionPack::ActionController::Instrumentation
  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#82
  def exception_controller?(payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#46
  def finish_processing(payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#20
  def start_processing(payload); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#82
    def exception_controller?(payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#46
    def finish_processing(payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#20
    def start_processing(payload); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#103
module Datadog::Tracing::Contrib::ActionPack::ActionController::Instrumentation::Metal
  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#140
  def datadog_response_status; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/instrumentation.rb#104
  def process_action(*args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/patcher.rb#12
module Datadog::Tracing::Contrib::ActionPack::ActionController::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/action_controller/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActionPack::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActionPack::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def exception_controller; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def exception_controller=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#9
module Datadog::Tracing::Contrib::ActionPack::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#11
Datadog::Tracing::Contrib::ActionPack::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#12
Datadog::Tracing::Contrib::ActionPack::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#10
Datadog::Tracing::Contrib::ActionPack::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#13
Datadog::Tracing::Contrib::ActionPack::Ext::SPAN_ACTION_CONTROLLER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#14
Datadog::Tracing::Contrib::ActionPack::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#15
Datadog::Tracing::Contrib::ActionPack::Ext::TAG_OPERATION_CONTROLLER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#16
Datadog::Tracing::Contrib::ActionPack::Ext::TAG_ROUTE_ACTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/ext.rb#17
Datadog::Tracing::Contrib::ActionPack::Ext::TAG_ROUTE_CONTROLLER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#13
class Datadog::Tracing::Contrib::ActionPack::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/integration.rb#16
Datadog::Tracing::Contrib::ActionPack::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/patcher.rb#11
module Datadog::Tracing::Contrib::ActionPack::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_pack/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_pack/utils.rb#10
module Datadog::Tracing::Contrib::ActionPack::Utils
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/utils.rb#11
    def exception_is_error?(exception); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/utils.rb#23
    def set_analytics_sample_rate(span); end

    private

    # source://ddtrace//lib/datadog/tracing/contrib/action_pack/utils.rb#32
    def datadog_configuration; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#6
module Datadog::Tracing::Contrib::ActionView; end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActionView::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActionView::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def template_base_path; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def template_base_path=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/event.rb#10
module Datadog::Tracing::Contrib::ActionView::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActionView::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/event.rb#11
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/event.rb#17
module Datadog::Tracing::Contrib::ActionView::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/action_view/event.rb#18
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/event.rb#22
  def record_exception(span, payload); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#13
module Datadog::Tracing::Contrib::ActionView::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#19
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#27
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#23
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#19
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#27
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#23
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events.rb#12
Datadog::Tracing::Contrib::ActionView::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#15
module Datadog::Tracing::Contrib::ActionView::Events::RenderPartial
  include ::Datadog::Tracing::Contrib::ActionView::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionView::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#22
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#30
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#26
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#22
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#30
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#26
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_partial.rb#18
Datadog::Tracing::Contrib::ActionView::Events::RenderPartial::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#15
module Datadog::Tracing::Contrib::ActionView::Events::RenderTemplate
  include ::Datadog::Tracing::Contrib::ActionView::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActionView::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#22
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#30
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#26
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#22
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#30
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#26
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/events/render_template.rb#18
Datadog::Tracing::Contrib::ActionView::Events::RenderTemplate::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#9
module Datadog::Tracing::Contrib::ActionView::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#11
Datadog::Tracing::Contrib::ActionView::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#12
Datadog::Tracing::Contrib::ActionView::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#10
Datadog::Tracing::Contrib::ActionView::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#13
Datadog::Tracing::Contrib::ActionView::Ext::SPAN_RENDER_PARTIAL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#14
Datadog::Tracing::Contrib::ActionView::Ext::SPAN_RENDER_TEMPLATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#15
Datadog::Tracing::Contrib::ActionView::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#16
Datadog::Tracing::Contrib::ActionView::Ext::TAG_LAYOUT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#17
Datadog::Tracing::Contrib::ActionView::Ext::TAG_OPERATION_RENDER_PARTIAL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#18
Datadog::Tracing::Contrib::ActionView::Ext::TAG_OPERATION_RENDER_TEMPLATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/ext.rb#19
Datadog::Tracing::Contrib::ActionView::Ext::TAG_TEMPLATE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#10
module Datadog::Tracing::Contrib::ActionView::Instrumentation; end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#12
module Datadog::Tracing::Contrib::ActionView::Instrumentation::PartialRenderer
  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#38
  def datadog_render_partial(template); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#13
  def render(*args, &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#25
  def render_partial(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#55
  def active_datadog_span; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#55
  def active_datadog_span=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#57
  def with_datadog_span(span); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#66
module Datadog::Tracing::Contrib::ActionView::Instrumentation::PartialRenderer::RailsLessThan4
  include ::Datadog::Tracing::Contrib::ActionView::Instrumentation::PartialRenderer

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/partial_renderer.rb#69
  def datadog_template(*args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#12
module Datadog::Tracing::Contrib::ActionView::Instrumentation::TemplateRenderer; end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#14
module Datadog::Tracing::Contrib::ActionView::Instrumentation::TemplateRenderer::Rails31Plus
  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#40
  def datadog_render_template(template, layout_name); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#15
  def render(*args, &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#27
  def render_template(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#67
  def active_datadog_span; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#67
  def active_datadog_span=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#69
  def with_datadog_span(span); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#79
module Datadog::Tracing::Contrib::ActionView::Instrumentation::TemplateRenderer::RailsLessThan4
  include ::Datadog::Tracing::Contrib::ActionView::Instrumentation::TemplateRenderer::Rails31Plus

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/instrumentation/template_renderer.rb#82
  def datadog_parse_args(template, layout_name, *args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#13
class Datadog::Tracing::Contrib::ActionView::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#42
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#46
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#50
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#36
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#32
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/integration.rb#16
Datadog::Tracing::Contrib::ActionView::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#16
module Datadog::Tracing::Contrib::ActionView::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#25
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#29
  def patch_renderer; end

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#21
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#29
    def patch_renderer; end

    # source://ddtrace//lib/datadog/tracing/contrib/action_view/patcher.rb#21
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/action_view/utils.rb#10
module Datadog::Tracing::Contrib::ActionView::Utils
  private

  # source://ddtrace//lib/datadog/tracing/contrib/action_view/utils.rb#18
  def normalize_template_name(name); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/action_view/utils.rb#18
    def normalize_template_name(name); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#6
module Datadog::Tracing::Contrib::ActiveJob; end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/configuration/settings.rb#11
module Datadog::Tracing::Contrib::ActiveJob::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/configuration/settings.rb#14
class Datadog::Tracing::Contrib::ActiveJob::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#12
module Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#19
module Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#26
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#30
  def set_common_tags(span, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/event.rb#20
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#12
module Datadog::Tracing::Contrib::ActiveJob::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#27
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#35
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#31
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#27
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#35
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#31
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events.rb#16
Datadog::Tracing::Contrib::ActiveJob::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::Discard
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/discard.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::Discard::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::Enqueue
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::Enqueue::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::EnqueueAt
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_at.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::EnqueueAt::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::EnqueueRetry
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/enqueue_retry.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::EnqueueRetry::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::Perform
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/perform.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::Perform::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#14
module Datadog::Tracing::Contrib::ActiveJob::Events::RetryStopped
  include ::Datadog::Tracing::Contrib::ActiveJob::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveJob::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#21
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#29
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#25
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#21
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#29
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#25
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/events/retry_stopped.rb#17
Datadog::Tracing::Contrib::ActiveJob::Events::RetryStopped::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#8
module Datadog::Tracing::Contrib::ActiveJob::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#10
Datadog::Tracing::Contrib::ActiveJob::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#11
Datadog::Tracing::Contrib::ActiveJob::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#9
Datadog::Tracing::Contrib::ActiveJob::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#13
Datadog::Tracing::Contrib::ActiveJob::Ext::SPAN_DISCARD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#14
Datadog::Tracing::Contrib::ActiveJob::Ext::SPAN_ENQUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#15
Datadog::Tracing::Contrib::ActiveJob::Ext::SPAN_ENQUEUE_RETRY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#16
Datadog::Tracing::Contrib::ActiveJob::Ext::SPAN_PERFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#17
Datadog::Tracing::Contrib::ActiveJob::Ext::SPAN_RETRY_STOPPED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#27
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_ADAPTER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#19
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#28
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_ERROR = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#29
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_EXECUTIONS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#30
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#31
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#32
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#33
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_RETRY_WAIT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#34
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_JOB_SCHEDULED_AT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#20
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_DISCARD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#21
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_ENQUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#22
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_ENQUEUE_AT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#23
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_ENQUEUE_RETRY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#24
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_PERFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/ext.rb#25
Datadog::Tracing::Contrib::ActiveJob::Ext::TAG_OPERATION_RETRY_STOPPED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#13
class Datadog::Tracing::Contrib::ActiveJob::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/integration.rb#16
Datadog::Tracing::Contrib::ActiveJob::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/active_job/log_injection.rb#10
module Datadog::Tracing::Contrib::ActiveJob::LogInjection
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/log_injection.rb#11
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#13
module Datadog::Tracing::Contrib::ActiveJob::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#27
  def inject_log_correlation; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#27
    def inject_log_correlation; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_job/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#6
module Datadog::Tracing::Contrib::ActiveModelSerializers; end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActiveModelSerializers::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActiveModelSerializers::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#14
module Datadog::Tracing::Contrib::ActiveModelSerializers::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveModelSerializers::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#22
module Datadog::Tracing::Contrib::ActiveModelSerializers::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#27
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#31
  def set_common_tags(span, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#23
  def span_options; end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/event.rb#55
  def resource(serializer); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#11
module Datadog::Tracing::Contrib::ActiveModelSerializers::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#19
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#27
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#23
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#19
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#27
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#23
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events.rb#12
Datadog::Tracing::Contrib::ActiveModelSerializers::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#13
module Datadog::Tracing::Contrib::ActiveModelSerializers::Events::Render
  include ::Datadog::Tracing::Contrib::ActiveModelSerializers::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveModelSerializers::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#25
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#33
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#29
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#20
  def supported?; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#25
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#33
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#29
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#20
    def supported?; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/render.rb#16
Datadog::Tracing::Contrib::ActiveModelSerializers::Events::Render::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#12
module Datadog::Tracing::Contrib::ActiveModelSerializers::Events::Serialize
  include ::Datadog::Tracing::Contrib::ActiveModelSerializers::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveModelSerializers::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#27
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#35
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#31
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#19
  def supported?; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#27
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#35
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#31
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#19
    def supported?; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/events/serialize.rb#15
Datadog::Tracing::Contrib::ActiveModelSerializers::Events::Serialize::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#9
module Datadog::Tracing::Contrib::ActiveModelSerializers::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#11
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#12
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#10
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#13
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::SPAN_RENDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#14
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::SPAN_SERIALIZE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#15
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::TAG_ADAPTER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#16
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#17
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::TAG_OPERATION_RENDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#18
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::TAG_OPERATION_SERIALIZE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/ext.rb#19
Datadog::Tracing::Contrib::ActiveModelSerializers::Ext::TAG_SERIALIZER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#12
class Datadog::Tracing::Contrib::ActiveModelSerializers::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#34
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#38
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#30
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/integration.rb#15
Datadog::Tracing::Contrib::ActiveModelSerializers::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#13
module Datadog::Tracing::Contrib::ActiveModelSerializers::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#26
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#26
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_model_serializers/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#12
module Datadog::Tracing::Contrib::ActiveRecord; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#7
module Datadog::Tracing::Contrib::ActiveRecord::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#15
module Datadog::Tracing::Contrib::ActiveRecord::Configuration::MakaraResolver
  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#16
  def normalize_for_config(active_record_config); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#22
  def normalize_for_resolve(active_record_config); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#34
class Datadog::Tracing::Contrib::ActiveRecord::Configuration::Resolver < ::Datadog::Tracing::Contrib::Configuration::Resolver
  include ::Datadog::Tracing::Contrib::ActiveRecord::Configuration::MakaraResolver

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#37
  def initialize(active_record_configuration = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#43
  def active_record_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#47
  def add(matcher, value); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#16
  def normalize_for_config(active_record_config); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/makara_resolver.rb#22
  def normalize_for_resolve(active_record_config); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#56
  def resolve(db_config); end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#95
  def connection_resolver; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#80
  def parse_matcher(matcher); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/resolver.rb#109
  def resolve_connection_key(key); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/configuration/settings.rb#14
class Datadog::Tracing::Contrib::ActiveRecord::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/event.rb#10
module Datadog::Tracing::Contrib::ActiveRecord::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveRecord::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/event.rb#11
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/event.rb#17
module Datadog::Tracing::Contrib::ActiveRecord::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/active_record/event.rb#22
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/event.rb#18
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#12
module Datadog::Tracing::Contrib::ActiveRecord::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#19
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#27
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#23
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#19
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#27
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#23
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events.rb#12
Datadog::Tracing::Contrib::ActiveRecord::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#14
module Datadog::Tracing::Contrib::ActiveRecord::Events::Instantiation
  include ::Datadog::Tracing::Contrib::ActiveRecord::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveRecord::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#26
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#34
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#30
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#21
  def supported?; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#26
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#34
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#30
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#21
    def supported?; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/instantiation.rb#17
Datadog::Tracing::Contrib::ActiveRecord::Events::Instantiation::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#16
module Datadog::Tracing::Contrib::ActiveRecord::Events::SQL
  include ::Datadog::Tracing::Contrib::ActiveRecord::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveRecord::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#24
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#32
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#28
  def span_name; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#24
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#32
    def process(span, event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#28
    def span_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#19
Datadog::Tracing::Contrib::ActiveRecord::Events::SQL::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/events/sql.rb#20
Datadog::Tracing::Contrib::ActiveRecord::Events::SQL::PAYLOAD_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#9
module Datadog::Tracing::Contrib::ActiveRecord::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#11
Datadog::Tracing::Contrib::ActiveRecord::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#12
Datadog::Tracing::Contrib::ActiveRecord::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#10
Datadog::Tracing::Contrib::ActiveRecord::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#13
Datadog::Tracing::Contrib::ActiveRecord::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#14
Datadog::Tracing::Contrib::ActiveRecord::Ext::SPAN_INSTANTIATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#15
Datadog::Tracing::Contrib::ActiveRecord::Ext::SPAN_SQL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#16
Datadog::Tracing::Contrib::ActiveRecord::Ext::SPAN_TYPE_INSTANTIATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#17
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#20
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_DB_CACHED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#21
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_DB_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#22
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_DB_VENDOR = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#23
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_INSTANTIATION_CLASS_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#24
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_INSTANTIATION_RECORD_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#18
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_OPERATION_INSTANTIATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/ext.rb#19
Datadog::Tracing::Contrib::ActiveRecord::Ext::TAG_OPERATION_SQL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#15
class Datadog::Tracing::Contrib::ActiveRecord::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#37
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#41
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#45
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#49
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#31
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#27
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#23
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/integration.rb#18
Datadog::Tracing::Contrib::ActiveRecord::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/patcher.rb#11
module Datadog::Tracing::Contrib::ActiveRecord::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#11
module Datadog::Tracing::Contrib::ActiveRecord::Utils
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#22
    def adapter_host; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#14
    def adapter_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#26
    def adapter_port; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#38
    def connection_config(connection = T.unsafe(nil), connection_id = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#64
    def connection_from_id(connection_id); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#18
    def database_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#117
    def db_config(connection_pool); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#101
    def default_connection_config; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/utils.rb#12
Datadog::Tracing::Contrib::ActiveRecord::Utils::EMPTY_CONFIG = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#13
module Datadog::Tracing::Contrib::ActiveRecord::Vendor; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#22
module Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionAdapters; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#23
class Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionAdapters::ConnectionSpecification
  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#26
  def initialize(name, config, adapter_method); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#24
  def adapter_method; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#24
  def config; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#24
  def name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#34
  def to_hash; end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#30
  def initialize_dup(original); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#39
class Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver
  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#54
  def initialize(url); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#68
  def to_hash; end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#114
  def database_from_path; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#93
  def query_hash; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#97
  def raw_config; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#76
  def uri; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#80
  def uri_parser; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#132
class Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionAdapters::ConnectionSpecification::Resolver
  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#137
  def initialize(configurations); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#133
  def configurations; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#157
  def resolve(config); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#168
  def resolve_all; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#197
  def spec(config); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#254
  def resolve_connection(spec); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#284
  def resolve_hash_connection(spec); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#272
  def resolve_symbol_connection(spec); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#297
  def resolve_url_connection(url); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#16
module Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionHandling; end

# source://ddtrace//lib/datadog/tracing/contrib/active_record/vendor/connection_specification.rb#17
Datadog::Tracing::Contrib::ActiveRecord::Vendor::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#6
module Datadog::Tracing::Contrib::ActiveSupport; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#11
module Datadog::Tracing::Contrib::ActiveSupport::Cache; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#14
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation
  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#51
  def finish_trace_cache(payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#76
  def finish_trace_cache_multi(payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#17
  def start_trace_cache(payload); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#51
    def finish_trace_cache(payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#76
    def finish_trace_cache_multi(payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#17
    def start_trace_cache(payload); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#243
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::Delete
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#244
  def delete(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#149
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::Fetch
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#150
  def fetch(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#172
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::FetchMulti
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#173
  def fetch_multi(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#103
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::Read
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#104
  def read(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#126
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::ReadMulti
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#127
  def read_multi(*keys, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#197
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::Write
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#198
  def write(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#220
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Instrumentation::WriteMulti
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/instrumentation.rb#221
  def write_multi(hash, options = T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#12
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Cache::Redis::Patcher

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#31
  def cache_store_class(meth); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#65
  def patch_cache_store_delete; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#43
  def patch_cache_store_fetch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#47
  def patch_cache_store_fetch_multi; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#35
  def patch_cache_store_read; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#39
  def patch_cache_store_read_multi; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#54
  def patch_cache_store_write; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#58
  def patch_cache_store_write_multi; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/redis.rb#31
    def cache_store_class(meth); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#65
    def patch_cache_store_delete; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#43
    def patch_cache_store_fetch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#47
    def patch_cache_store_fetch_multi; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#35
    def patch_cache_store_read; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#39
    def patch_cache_store_read_multi; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#54
    def patch_cache_store_write; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#58
    def patch_cache_store_write_multi; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/redis.rb#11
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Redis; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/redis.rb#13
module Datadog::Tracing::Contrib::ActiveSupport::Cache::Redis::Patcher
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/redis.rb#31
  def cache_store_class(meth); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/cache/redis.rb#25
  def patch_redis?(meth); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ActiveSupport::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ActiveSupport::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def cache_service; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def cache_service=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#9
module Datadog::Tracing::Contrib::ActiveSupport::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#11
Datadog::Tracing::Contrib::ActiveSupport::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#12
Datadog::Tracing::Contrib::ActiveSupport::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#10
Datadog::Tracing::Contrib::ActiveSupport::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#13
Datadog::Tracing::Contrib::ActiveSupport::Ext::QUANTIZE_CACHE_MAX_KEY_SIZE = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#14
Datadog::Tracing::Contrib::ActiveSupport::Ext::RESOURCE_CACHE_DELETE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#15
Datadog::Tracing::Contrib::ActiveSupport::Ext::RESOURCE_CACHE_GET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#16
Datadog::Tracing::Contrib::ActiveSupport::Ext::RESOURCE_CACHE_MGET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#18
Datadog::Tracing::Contrib::ActiveSupport::Ext::RESOURCE_CACHE_MSET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#17
Datadog::Tracing::Contrib::ActiveSupport::Ext::RESOURCE_CACHE_SET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#19
Datadog::Tracing::Contrib::ActiveSupport::Ext::SERVICE_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#20
Datadog::Tracing::Contrib::ActiveSupport::Ext::SPAN_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#21
Datadog::Tracing::Contrib::ActiveSupport::Ext::SPAN_TYPE_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#22
Datadog::Tracing::Contrib::ActiveSupport::Ext::TAG_CACHE_BACKEND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#23
Datadog::Tracing::Contrib::ActiveSupport::Ext::TAG_CACHE_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#24
Datadog::Tracing::Contrib::ActiveSupport::Ext::TAG_CACHE_KEY_MULTI = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#25
Datadog::Tracing::Contrib::ActiveSupport::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/ext.rb#26
Datadog::Tracing::Contrib::ActiveSupport::Ext::TAG_OPERATION_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#14
class Datadog::Tracing::Contrib::ActiveSupport::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#36
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#40
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#44
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#30
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#26
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#22
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/integration.rb#17
Datadog::Tracing::Contrib::ActiveSupport::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#7
module Datadog::Tracing::Contrib::ActiveSupport::Notifications; end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#14
module Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#23
module Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#61
  def payload_exception(payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#56
  def report_if_exception(span, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#52
  def span_options; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#37
  def subscribe(pattern = T.unsafe(nil), span_name = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#25
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#29
  def subscription(span_name = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/event.rb#48
  def supported?; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#13
module Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#14
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#19
module Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#26
  def subscribed?; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#21
  def subscriptions; end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#34
  def on_subscribe(&block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#48
  def subscribe(pattern, span_name, options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#40
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#56
  def subscription(span_name, options = T.unsafe(nil), &block); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#64
  def on_subscribe_block; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscriber.rb#64
  def subscribed; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#9
class Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscription
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#14
  def initialize(span_name, options, &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#43
  def after_trace(&block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#39
  def before_trace(&block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#24
  def call(name, start, finish, id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#35
  def finish(name, id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#10
  def options; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#10
  def options=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#10
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#10
  def span_name=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#30
  def start(name, id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#47
  def subscribe(pattern); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#54
  def unsubscribe(pattern); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#62
  def unsubscribe_all; end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#71
  def callbacks; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#87
  def finish_span(name, id, payload, finish = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#71
  def handler; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#75
  def start_span(name, id, payload, start = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#104
  def subscribers; end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#130
class Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscription::Callbacks
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#133
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#137
  def add(key, &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#131
  def blocks; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#141
  def run(event, key, *args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#155
  def blocks_for(key); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#109
class Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscription::Handler
  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#112
  def initialize(&block); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#110
  def block; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#116
  def run(span, name, id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/notifications/subscription.rb#124
  def run!(*args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/active_support/patcher.rb#11
module Datadog::Tracing::Contrib::ActiveSupport::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/active_support/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/active_support/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#10
module Datadog::Tracing::Contrib::Analytics
  private

  # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#15
  def enabled?(flag = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#23
  def set_measured(span, value = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#19
  def set_sample_rate(span, sample_rate); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#15
    def enabled?(flag = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#23
    def set_measured(span, value = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/analytics.rb#19
    def set_sample_rate(span, sample_rate); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#6
module Datadog::Tracing::Contrib::Aws; end

# source://ddtrace//lib/datadog/tracing/contrib/aws/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Aws::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/aws/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Aws::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#9
module Datadog::Tracing::Contrib::Aws::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#13
Datadog::Tracing::Contrib::Aws::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#11
Datadog::Tracing::Contrib::Aws::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#12
Datadog::Tracing::Contrib::Aws::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#10
Datadog::Tracing::Contrib::Aws::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#14
Datadog::Tracing::Contrib::Aws::Ext::SPAN_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#15
Datadog::Tracing::Contrib::Aws::Ext::TAG_AGENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#16
Datadog::Tracing::Contrib::Aws::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#17
Datadog::Tracing::Contrib::Aws::Ext::TAG_DEFAULT_AGENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#18
Datadog::Tracing::Contrib::Aws::Ext::TAG_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#19
Datadog::Tracing::Contrib::Aws::Ext::TAG_OPERATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#20
Datadog::Tracing::Contrib::Aws::Ext::TAG_OPERATION_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#21
Datadog::Tracing::Contrib::Aws::Ext::TAG_PATH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/ext.rb#22
Datadog::Tracing::Contrib::Aws::Ext::TAG_REGION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#12
class Datadog::Tracing::Contrib::Aws::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#36
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#40
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#32
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#28
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/aws/integration.rb#15
Datadog::Tracing::Contrib::Aws::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#11
module Datadog::Tracing::Contrib::Aws::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#32
  def add_plugin(*targets); end

  # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#50
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#36
  def loaded_constants; end

  # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#32
    def add_plugin(*targets); end

    # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#50
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#36
    def loaded_constants; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/aws/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#8
module Datadog::Tracing::Contrib::ConcurrentRuby; end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/configuration/settings.rb#10
module Datadog::Tracing::Contrib::ConcurrentRuby::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/configuration/settings.rb#13
class Datadog::Tracing::Contrib::ConcurrentRuby::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/ext.rb#9
module Datadog::Tracing::Contrib::ConcurrentRuby::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/ext.rb#10
Datadog::Tracing::Contrib::ConcurrentRuby::Ext::APP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/ext.rb#11
Datadog::Tracing::Contrib::ConcurrentRuby::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#12
class Datadog::Tracing::Contrib::ConcurrentRuby::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/integration.rb#15
Datadog::Tracing::Contrib::ConcurrentRuby::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#10
module Datadog::Tracing::Contrib::ConcurrentRuby::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#26
  def patch_future; end

  # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#26
    def patch_future; end

    # source://ddtrace//lib/datadog/tracing/contrib/concurrent_ruby/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#14
module Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#20
module Datadog::Tracing::Contrib::Configurable::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#23
  def configuration(matcher = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#38
  def configurations; end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#44
  def configure(matcher = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#69
  def default_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#58
  def reset_configuration!; end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#31
  def resolve(value); end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#82
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/configurable.rb#95
  def resolver; end
end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#6
module Datadog::Tracing::Contrib::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#19
class Datadog::Tracing::Contrib::Configuration::Resolver
  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#22
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#41
  def add(matcher, value); end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#20
  def configurations; end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#50
  def get(matcher); end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#61
  def resolve(value); end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolver.rb#78
  def parse_matcher(matcher); end
end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/resolvers/pattern_resolver.rb#10
module Datadog::Tracing::Contrib::Configuration::Resolvers; end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/resolvers/pattern_resolver.rb#13
class Datadog::Tracing::Contrib::Configuration::Resolvers::PatternResolver < ::Datadog::Tracing::Contrib::Configuration::Resolver
  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolvers/pattern_resolver.rb#14
  def resolve(value); end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/resolvers/pattern_resolver.rb#31
  def parse_matcher(matcher); end
end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/settings.rb#12
class Datadog::Tracing::Contrib::Configuration::Settings
  include ::Datadog::Core::Configuration::Base
  include ::Datadog::Core::Environment::VariableHelpers
  include ::Datadog::Core::Configuration::Options
  include ::Datadog::Core::Configuration::Options::InstanceMethods
  include ::Datadog::Core::Configuration::Base::InstanceMethods
  extend ::Datadog::Core::Environment::VariableHelpers
  extend ::Datadog::Core::Configuration::Options::ClassMethods
  extend ::Datadog::Core::Configuration::Base::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/settings.rb#32
  def [](name); end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/settings.rb#36
  def []=(name, value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/tracing/contrib/configuration/settings.rb#24
  def configure(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/configuration/settings.rb#15
Datadog::Tracing::Contrib::Configuration::Settings::DEPRECATION_WARN_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#6
module Datadog::Tracing::Contrib::Dalli; end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Dalli::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Dalli::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#9
module Datadog::Tracing::Contrib::Dalli::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#14
Datadog::Tracing::Contrib::Dalli::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#11
Datadog::Tracing::Contrib::Dalli::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#12
Datadog::Tracing::Contrib::Dalli::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#10
Datadog::Tracing::Contrib::Dalli::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#13
Datadog::Tracing::Contrib::Dalli::Ext::QUANTIZE_MAX_CMD_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#15
Datadog::Tracing::Contrib::Dalli::Ext::SPAN_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#16
Datadog::Tracing::Contrib::Dalli::Ext::SPAN_TYPE_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#17
Datadog::Tracing::Contrib::Dalli::Ext::TAG_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#18
Datadog::Tracing::Contrib::Dalli::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/ext.rb#19
Datadog::Tracing::Contrib::Dalli::Ext::TAG_OPERATION_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/instrumentation.rb#14
module Datadog::Tracing::Contrib::Dalli::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/dalli/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/instrumentation.rb#20
module Datadog::Tracing::Contrib::Dalli::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/dalli/instrumentation.rb#21
  def request(op, *args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/instrumentation.rb#50
  def datadog_configuration; end
end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#12
class Datadog::Tracing::Contrib::Dalli::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#41
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#45
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#33
    def dalli_class; end

    # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#16
Datadog::Tracing::Contrib::Dalli::Integration::DALLI_PROTOCOL_BINARY_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/integration.rb#15
Datadog::Tracing::Contrib::Dalli::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/dalli/patcher.rb#12
module Datadog::Tracing::Contrib::Dalli::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/dalli/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/dalli/quantize.rb#10
module Datadog::Tracing::Contrib::Dalli::Quantize
  private

  # source://ddtrace//lib/datadog/tracing/contrib/dalli/quantize.rb#13
  def format_command(operation, args); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/dalli/quantize.rb#13
    def format_command(operation, args); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#6
module Datadog::Tracing::Contrib::DelayedJob; end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/configuration/settings.rb#11
module Datadog::Tracing::Contrib::DelayedJob::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/configuration/settings.rb#14
class Datadog::Tracing::Contrib::DelayedJob::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def client_service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def client_service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#9
module Datadog::Tracing::Contrib::DelayedJob::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#11
Datadog::Tracing::Contrib::DelayedJob::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#12
Datadog::Tracing::Contrib::DelayedJob::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#10
Datadog::Tracing::Contrib::DelayedJob::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#14
Datadog::Tracing::Contrib::DelayedJob::Ext::SPAN_ENQUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#13
Datadog::Tracing::Contrib::DelayedJob::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#15
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_ATTEMPTS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#19
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#16
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#20
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_OPERATION_ENQUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#21
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#17
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/ext.rb#18
Datadog::Tracing::Contrib::DelayedJob::Ext::TAG_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#12
class Datadog::Tracing::Contrib::DelayedJob::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/integration.rb#15
Datadog::Tracing::Contrib::DelayedJob::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#10
module Datadog::Tracing::Contrib::DelayedJob::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#24
  def add_instrumentation(klass); end

  # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#19
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#15
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#24
    def add_instrumentation(klass); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/delayed_job/patcher.rb#15
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#6
module Datadog::Tracing::Contrib::Elasticsearch; end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Elasticsearch::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Elasticsearch::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def quantize; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def quantize=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#9
module Datadog::Tracing::Contrib::Elasticsearch::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#13
Datadog::Tracing::Contrib::Elasticsearch::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#11
Datadog::Tracing::Contrib::Elasticsearch::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#12
Datadog::Tracing::Contrib::Elasticsearch::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#10
Datadog::Tracing::Contrib::Elasticsearch::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#14
Datadog::Tracing::Contrib::Elasticsearch::Ext::SPAN_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#15
Datadog::Tracing::Contrib::Elasticsearch::Ext::SPAN_TYPE_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#16
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_BODY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#20
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#17
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_METHOD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#21
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_OPERATION_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#18
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_PARAMS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/ext.rb#19
Datadog::Tracing::Contrib::Elasticsearch::Ext::TAG_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#12
class Datadog::Tracing::Contrib::Elasticsearch::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#35
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#29
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/integration.rb#15
Datadog::Tracing::Contrib::Elasticsearch::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#15
module Datadog::Tracing::Contrib::Elasticsearch::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#24
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#38
  def patch_elasticsearch_transport_client; end

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#20
  def target_version; end

  # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#140
  def transport_module; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#38
    def patch_elasticsearch_transport_client; end

    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#20
    def target_version; end

    # source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#140
    def transport_module; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/elasticsearch/patcher.rb#32
Datadog::Tracing::Contrib::Elasticsearch::Patcher::SELF_DEPRECATION_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#6
module Datadog::Tracing::Contrib::Ethon; end

# source://ddtrace//lib/datadog/tracing/contrib/ethon/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Ethon::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/ethon/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Ethon::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#9
module Datadog::Tracing::Contrib::Ethon::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#13
Datadog::Tracing::Contrib::Ethon::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#11
Datadog::Tracing::Contrib::Ethon::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#12
Datadog::Tracing::Contrib::Ethon::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#10
Datadog::Tracing::Contrib::Ethon::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#16
Datadog::Tracing::Contrib::Ethon::Ext::NOT_APPLICABLE_METHOD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#15
Datadog::Tracing::Contrib::Ethon::Ext::SPAN_MULTI_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#14
Datadog::Tracing::Contrib::Ethon::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#17
Datadog::Tracing::Contrib::Ethon::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#19
Datadog::Tracing::Contrib::Ethon::Ext::TAG_OPERATION_MULTI_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/ext.rb#18
Datadog::Tracing::Contrib::Ethon::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#13
class Datadog::Tracing::Contrib::Ethon::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/ethon/integration.rb#16
Datadog::Tracing::Contrib::Ethon::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/ethon/patcher.rb#10
module Datadog::Tracing::Contrib::Ethon::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/ethon/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/ethon/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/ethon/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#6
module Datadog::Tracing::Contrib::Excon; end

# source://ddtrace//lib/datadog/tracing/contrib/excon/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Excon::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/excon/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Excon::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#9
module Datadog::Tracing::Contrib::Excon::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#13
Datadog::Tracing::Contrib::Excon::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#11
Datadog::Tracing::Contrib::Excon::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#12
Datadog::Tracing::Contrib::Excon::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#10
Datadog::Tracing::Contrib::Excon::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#14
Datadog::Tracing::Contrib::Excon::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#15
Datadog::Tracing::Contrib::Excon::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/ext.rb#16
Datadog::Tracing::Contrib::Excon::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#13
class Datadog::Tracing::Contrib::Excon::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/excon/integration.rb#16
Datadog::Tracing::Contrib::Excon::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#10
module Datadog::Tracing::Contrib::Excon::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#24
  def add_middleware; end

  # source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#19
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#15
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#24
    def add_middleware; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/excon/patcher.rb#15
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#20
module Datadog::Tracing::Contrib::Extensions
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#21
    def extend!; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#58
module Datadog::Tracing::Contrib::Extensions::Configuration
  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#64
  def configure(&block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#108
module Datadog::Tracing::Contrib::Extensions::Configuration::Settings
  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#154
  def [](integration_name, key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#176
  def fetch_integration(name); end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#186
  def ignore_integration_load_errors=(value); end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#182
  def ignore_integration_load_errors?; end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#123
  def instrument(integration_name, options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#165
  def instrumented_integrations; end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#160
  def integrations_pending_activation; end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#170
  def reset!; end

  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#123
  def use(integration_name, options = T.unsafe(nil), &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#109
class Datadog::Tracing::Contrib::Extensions::Configuration::Settings::InvalidIntegrationError < ::StandardError; end

# source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#33
module Datadog::Tracing::Contrib::Extensions::Helpers
  # source://ddtrace//lib/datadog/tracing/contrib/extensions.rb#52
  def registry; end
end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#6
module Datadog::Tracing::Contrib::Faraday; end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Faraday::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Faraday::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/configuration/settings.rb#14
Datadog::Tracing::Contrib::Faraday::Configuration::Settings::DEFAULT_ERROR_HANDLER = T.let(T.unsafe(nil), Proc)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/connection.rb#12
module Datadog::Tracing::Contrib::Faraday::Connection
  # source://ddtrace//lib/datadog/tracing/contrib/faraday/connection.rb#13
  def initialize(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#9
module Datadog::Tracing::Contrib::Faraday::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#13
Datadog::Tracing::Contrib::Faraday::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#11
Datadog::Tracing::Contrib::Faraday::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#12
Datadog::Tracing::Contrib::Faraday::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#10
Datadog::Tracing::Contrib::Faraday::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#14
Datadog::Tracing::Contrib::Faraday::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#15
Datadog::Tracing::Contrib::Faraday::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/ext.rb#16
Datadog::Tracing::Contrib::Faraday::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#13
class Datadog::Tracing::Contrib::Faraday::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/integration.rb#16
Datadog::Tracing::Contrib::Faraday::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#13
module Datadog::Tracing::Contrib::Faraday::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#33
  def add_default_middleware!; end

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#29
  def register_middleware!; end

  # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#33
    def add_default_middleware!; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#29
    def register_middleware!; end

    # source://ddtrace//lib/datadog/tracing/contrib/faraday/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/faraday/rack_builder.rb#12
module Datadog::Tracing::Contrib::Faraday::RackBuilder
  # source://ddtrace//lib/datadog/tracing/contrib/faraday/rack_builder.rb#13
  def adapter(*args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#6
module Datadog::Tracing::Contrib::GRPC; end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/configuration/settings.rb#11
module Datadog::Tracing::Contrib::GRPC::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/configuration/settings.rb#14
class Datadog::Tracing::Contrib::GRPC::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#9
module Datadog::Tracing::Contrib::GRPC::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#13
Datadog::Tracing::Contrib::GRPC::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#11
Datadog::Tracing::Contrib::GRPC::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#12
Datadog::Tracing::Contrib::GRPC::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#10
Datadog::Tracing::Contrib::GRPC::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#14
Datadog::Tracing::Contrib::GRPC::Ext::SPAN_CLIENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#15
Datadog::Tracing::Contrib::GRPC::Ext::SPAN_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#16
Datadog::Tracing::Contrib::GRPC::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#17
Datadog::Tracing::Contrib::GRPC::Ext::TAG_OPERATION_CLIENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/ext.rb#18
Datadog::Tracing::Contrib::GRPC::Ext::TAG_OPERATION_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#12
class Datadog::Tracing::Contrib::GRPC::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/grpc/integration.rb#15
Datadog::Tracing::Contrib::GRPC::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#11
module Datadog::Tracing::Contrib::GRPC::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#29
  def prepend_interceptor; end

  # source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#29
    def prepend_interceptor; end

    # source://ddtrace//lib/datadog/tracing/contrib/grpc/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#6
module Datadog::Tracing::Contrib::Grape; end

# source://ddtrace//lib/datadog/tracing/contrib/grape/configuration/settings.rb#11
module Datadog::Tracing::Contrib::Grape::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/grape/configuration/settings.rb#14
class Datadog::Tracing::Contrib::Grape::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_statuses; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_statuses=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#16
module Datadog::Tracing::Contrib::Grape::Endpoint
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#135
    def endpoint_render(name, start, finish, id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#71
    def endpoint_run(name, start, finish, id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#159
    def endpoint_run_filters(name, start, finish, id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#40
    def endpoint_start_process(_name, _start, _finish, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#116
    def endpoint_start_render(*_arg0); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#21
    def subscribe; end

    private

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#222
    def analytics_enabled?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#226
    def analytics_sample_rate; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#199
    def api_view(api); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#244
    def datadog_configuration; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#239
    def enabled?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#210
    def endpoint_expand_path(endpoint); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#230
    def exception_is_error?(exception); end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#218
    def service_name; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#18
Datadog::Tracing::Contrib::Grape::Endpoint::KEY_RENDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/endpoint.rb#17
Datadog::Tracing::Contrib::Grape::Endpoint::KEY_RUN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#9
module Datadog::Tracing::Contrib::Grape::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#11
Datadog::Tracing::Contrib::Grape::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#12
Datadog::Tracing::Contrib::Grape::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#10
Datadog::Tracing::Contrib::Grape::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#13
Datadog::Tracing::Contrib::Grape::Ext::SPAN_ENDPOINT_RENDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#14
Datadog::Tracing::Contrib::Grape::Ext::SPAN_ENDPOINT_RUN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#15
Datadog::Tracing::Contrib::Grape::Ext::SPAN_ENDPOINT_RUN_FILTERS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#16
Datadog::Tracing::Contrib::Grape::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#17
Datadog::Tracing::Contrib::Grape::Ext::TAG_FILTER_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#18
Datadog::Tracing::Contrib::Grape::Ext::TAG_OPERATION_ENDPOINT_RENDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#19
Datadog::Tracing::Contrib::Grape::Ext::TAG_OPERATION_ENDPOINT_RUN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#20
Datadog::Tracing::Contrib::Grape::Ext::TAG_OPERATION_ENDPOINT_RUN_FILTERS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#21
Datadog::Tracing::Contrib::Grape::Ext::TAG_ROUTE_ENDPOINT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#23
Datadog::Tracing::Contrib::Grape::Ext::TAG_ROUTE_METHOD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/ext.rb#22
Datadog::Tracing::Contrib::Grape::Ext::TAG_ROUTE_PATH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#8
module Datadog::Tracing::Contrib::Grape::Instrumentation
  mixes_in_class_methods ::Datadog::Tracing::Contrib::Grape::Instrumentation::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#9
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#15
module Datadog::Tracing::Contrib::Grape::Instrumentation::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#16
  def generate_api_method(*params, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#27
module Datadog::Tracing::Contrib::Grape::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/grape/instrumentation.rb#28
  def run(*args); end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#12
class Datadog::Tracing::Contrib::Grape::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#37
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/grape/integration.rb#15
Datadog::Tracing::Contrib::Grape::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/grape/patcher.rb#13
module Datadog::Tracing::Contrib::Grape::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/grape/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/grape/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/grape/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#6
module Datadog::Tracing::Contrib::GraphQL; end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/configuration/settings.rb#10
module Datadog::Tracing::Contrib::GraphQL::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/configuration/settings.rb#13
class Datadog::Tracing::Contrib::GraphQL::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def schemas; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def schemas=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_nam; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_nam=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#9
module Datadog::Tracing::Contrib::GraphQL::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#11
Datadog::Tracing::Contrib::GraphQL::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#12
Datadog::Tracing::Contrib::GraphQL::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#10
Datadog::Tracing::Contrib::GraphQL::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#13
Datadog::Tracing::Contrib::GraphQL::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/ext.rb#14
Datadog::Tracing::Contrib::GraphQL::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#12
class Datadog::Tracing::Contrib::GraphQL::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#37
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/integration.rb#15
Datadog::Tracing::Contrib::GraphQL::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#12
module Datadog::Tracing::Contrib::GraphQL::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#67
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#61
  def patch_legacy_gem!; end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#29
  def patch_schema!(schema); end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#67
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#61
    def patch_legacy_gem!; end

    # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#29
    def patch_schema!(schema); end

    # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#73
module Datadog::Tracing::Contrib::GraphQL::Patcher::PatchLegacyGem
  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#83
  def fallback_transaction_name(context); end

  # source://ddtrace//lib/datadog/tracing/contrib/graphql/patcher.rb#77
  def tracer; end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/circuit_breaker.rb#9
module Datadog::Tracing::Contrib::HTTP
  extend ::Datadog::Tracing::Contrib::HTTP::CircuitBreaker
end

# source://ddtrace//lib/datadog/tracing/contrib/http/circuit_breaker.rb#12
module Datadog::Tracing::Contrib::HTTP::CircuitBreaker
  # source://ddtrace//lib/datadog/tracing/contrib/http/circuit_breaker.rb#27
  def datadog_http_request?(request); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/circuit_breaker.rb#35
  def should_skip_distributed_tracing?(client_config); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/circuit_breaker.rb#13
  def should_skip_tracing?(request); end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/configuration/settings.rb#10
module Datadog::Tracing::Contrib::HTTP::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/http/configuration/settings.rb#13
class Datadog::Tracing::Contrib::HTTP::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#9
module Datadog::Tracing::Contrib::HTTP::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#13
Datadog::Tracing::Contrib::HTTP::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#11
Datadog::Tracing::Contrib::HTTP::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#12
Datadog::Tracing::Contrib::HTTP::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#10
Datadog::Tracing::Contrib::HTTP::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#14
Datadog::Tracing::Contrib::HTTP::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#15
Datadog::Tracing::Contrib::HTTP::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/ext.rb#16
Datadog::Tracing::Contrib::HTTP::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#15
module Datadog::Tracing::Contrib::HTTP::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#21
    def after_request(&block); end

    # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#16
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#32
module Datadog::Tracing::Contrib::HTTP::Instrumentation::InstanceMethods
  include ::Datadog::Tracing::Contrib::HttpAnnotationHelper

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#103
  def annotate_span_with_error!(span, error); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#73
  def annotate_span_with_request!(span, request, request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#92
  def annotate_span_with_response!(span, response); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#36
  def request(req, body = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#107
  def set_analytics_sample_rate(span, request_options); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#127
  def analytics_enabled?(request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#131
  def analytics_sample_rate(request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#123
  def datadog_configuration(host = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/http/instrumentation.rb#115
  def host_and_port(request); end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#18
class Datadog::Tracing::Contrib::HTTP::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#34
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#38
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#42
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#30
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#26
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/http/integration.rb#21
Datadog::Tracing::Contrib::HTTP::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/http/patcher.rb#13
module Datadog::Tracing::Contrib::HTTP::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/http/patcher.rb#23
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/http/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/http/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/http_annotation_helper.rb#7
module Datadog::Tracing::Contrib::HttpAnnotationHelper
  # source://ddtrace//lib/datadog/tracing/contrib/http_annotation_helper.rb#8
  def service_name(hostname, configuration_options, pin = T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#6
module Datadog::Tracing::Contrib::Httpclient; end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Httpclient::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Httpclient::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#9
module Datadog::Tracing::Contrib::Httpclient::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#13
Datadog::Tracing::Contrib::Httpclient::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#11
Datadog::Tracing::Contrib::Httpclient::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#12
Datadog::Tracing::Contrib::Httpclient::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#10
Datadog::Tracing::Contrib::Httpclient::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#14
Datadog::Tracing::Contrib::Httpclient::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#15
Datadog::Tracing::Contrib::Httpclient::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/ext.rb#16
Datadog::Tracing::Contrib::Httpclient::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#14
module Datadog::Tracing::Contrib::Httpclient::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#20
module Datadog::Tracing::Contrib::Httpclient::Instrumentation::InstanceMethods
  include ::Datadog::Tracing::Contrib::HttpAnnotationHelper

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#23
  def do_get_block(req, proxy, conn, &block); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#93
  def analytics_enabled?(request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#85
  def annotate_span_with_error!(span, error); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#54
  def annotate_span_with_request!(span, req, req_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#74
  def annotate_span_with_response!(span, response); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#89
  def datadog_configuration(host = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#97
  def logger; end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#107
  def set_analytics_sample_rate(span, request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/instrumentation.rb#101
  def should_skip_distributed_tracing?(client_config); end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#13
class Datadog::Tracing::Contrib::Httpclient::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/integration.rb#16
Datadog::Tracing::Contrib::Httpclient::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#13
module Datadog::Tracing::Contrib::Httpclient::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#29
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#20
  def patched?; end

  # source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#24
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#26
    def patched?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#24
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httpclient/patcher.rb#16
Datadog::Tracing::Contrib::Httpclient::Patcher::PATCH_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#6
module Datadog::Tracing::Contrib::Httprb; end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Httprb::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Httprb::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def split_by_domain; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def split_by_domain=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#9
module Datadog::Tracing::Contrib::Httprb::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#13
Datadog::Tracing::Contrib::Httprb::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#11
Datadog::Tracing::Contrib::Httprb::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#12
Datadog::Tracing::Contrib::Httprb::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#10
Datadog::Tracing::Contrib::Httprb::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#14
Datadog::Tracing::Contrib::Httprb::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#15
Datadog::Tracing::Contrib::Httprb::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/ext.rb#16
Datadog::Tracing::Contrib::Httprb::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#14
module Datadog::Tracing::Contrib::Httprb::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#20
module Datadog::Tracing::Contrib::Httprb::Instrumentation::InstanceMethods
  include ::Datadog::Tracing::Contrib::HttpAnnotationHelper

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#23
  def perform(req, options); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#104
  def analytics_enabled?(request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#96
  def annotate_span_with_error!(span, error); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#54
  def annotate_span_with_request!(span, req, req_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#83
  def annotate_span_with_response!(span, response); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#100
  def datadog_configuration(host = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#108
  def logger; end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#118
  def set_analytics_sample_rate(span, request_options); end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/instrumentation.rb#112
  def should_skip_distributed_tracing?(client_config); end
end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#13
class Datadog::Tracing::Contrib::Httprb::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/integration.rb#16
Datadog::Tracing::Contrib::Httprb::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#13
module Datadog::Tracing::Contrib::Httprb::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#29
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#20
  def patched?; end

  # source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#24
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#26
    def patched?; end

    # source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#24
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/httprb/patcher.rb#16
Datadog::Tracing::Contrib::Httprb::Patcher::PATCH_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/tracing/contrib/integration.rb#69
module Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable

  mixes_in_class_methods ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/integration.rb#70
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#6
module Datadog::Tracing::Contrib::Kafka; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Kafka::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Kafka::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/consumer_event.rb#8
module Datadog::Tracing::Contrib::Kafka::ConsumerEvent
  # source://ddtrace//lib/datadog/tracing/contrib/kafka/consumer_event.rb#9
  def process(span, _event, _id, payload); end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/consumer_group_event.rb#8
module Datadog::Tracing::Contrib::Kafka::ConsumerGroupEvent
  # source://ddtrace//lib/datadog/tracing/contrib/kafka/consumer_group_event.rb#9
  def process(span, _event, _id, payload); end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#12
module Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#13
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#19
module Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#28
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#20
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#32
  def process(span, _event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/event.rb#24
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#10
module Datadog::Tracing::Contrib::Kafka::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#33
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#41
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#37
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#33
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#41
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#37
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events.rb#19
Datadog::Tracing::Contrib::Kafka::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#11
module Datadog::Tracing::Contrib::Kafka::Events::Connection; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#13
module Datadog::Tracing::Contrib::Kafka::Events::Connection::Request
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#29
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#33
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#18
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#29
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#33
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/connection/request.rb#16
Datadog::Tracing::Contrib::Kafka::Events::Connection::Request::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#12
module Datadog::Tracing::Contrib::Kafka::Events::Consumer; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#14
module Datadog::Tracing::Contrib::Kafka::Events::Consumer::ProcessBatch
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#36
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#40
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#20
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#36
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#40
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_batch.rb#18
Datadog::Tracing::Contrib::Kafka::Events::Consumer::ProcessBatch::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#14
module Datadog::Tracing::Contrib::Kafka::Events::Consumer::ProcessMessage
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#34
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#38
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#20
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#34
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#38
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer/process_message.rb#18
Datadog::Tracing::Contrib::Kafka::Events::Consumer::ProcessMessage::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#13
module Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#15
module Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::Heartbeat
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerGroupEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#34
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#38
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#22
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#34
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#38
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/heartbeat.rb#20
Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::Heartbeat::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#15
module Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::JoinGroup
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerGroupEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#24
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#28
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#24
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#28
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/join_group.rb#20
Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::JoinGroup::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#15
module Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::LeaveGroup
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerGroupEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#24
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#28
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#24
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#28
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/leave_group.rb#20
Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::LeaveGroup::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#15
module Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::SyncGroup
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerEvent
  extend ::Datadog::Tracing::Contrib::Kafka::ConsumerGroupEvent

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#24
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#28
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#24
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#28
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/consumer_group/sync_group.rb#20
Datadog::Tracing::Contrib::Kafka::Events::ConsumerGroup::SyncGroup::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#11
module Datadog::Tracing::Contrib::Kafka::Events::ProduceOperation; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#13
module Datadog::Tracing::Contrib::Kafka::Events::ProduceOperation::SendMessages
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#27
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#31
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#18
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#27
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#31
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/produce_operation/send_messages.rb#16
Datadog::Tracing::Contrib::Kafka::Events::ProduceOperation::SendMessages::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#11
module Datadog::Tracing::Contrib::Kafka::Events::Producer; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#13
module Datadog::Tracing::Contrib::Kafka::Events::Producer::DeliverMessages
  include ::Datadog::Tracing::Contrib::Kafka::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Kafka::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#30
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#34
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#18
    def process(span, _event, _id, payload); end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#30
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#34
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/events/producer/deliver_messages.rb#16
Datadog::Tracing::Contrib::Kafka::Events::Producer::DeliverMessages::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#9
module Datadog::Tracing::Contrib::Kafka::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#11
Datadog::Tracing::Contrib::Kafka::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#12
Datadog::Tracing::Contrib::Kafka::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#10
Datadog::Tracing::Contrib::Kafka::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#13
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_CONNECTION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#14
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_CONSUMER_HEARTBEAT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#15
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_CONSUMER_JOIN_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#16
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_CONSUMER_LEAVE_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#17
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_CONSUMER_SYNC_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#18
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_DELIVER_MESSAGES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#19
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_PROCESS_BATCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#20
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_PROCESS_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#21
Datadog::Tracing::Contrib::Kafka::Ext::SPAN_SEND_MESSAGES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#23
Datadog::Tracing::Contrib::Kafka::Ext::TAG_API = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#22
Datadog::Tracing::Contrib::Kafka::Ext::TAG_ATTEMPTS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#24
Datadog::Tracing::Contrib::Kafka::Ext::TAG_CLIENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#38
Datadog::Tracing::Contrib::Kafka::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#29
Datadog::Tracing::Contrib::Kafka::Ext::TAG_DELIVERED_MESSAGE_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#25
Datadog::Tracing::Contrib::Kafka::Ext::TAG_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#26
Datadog::Tracing::Contrib::Kafka::Ext::TAG_HIGHWATER_MARK_OFFSET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#27
Datadog::Tracing::Contrib::Kafka::Ext::TAG_MESSAGE_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#28
Datadog::Tracing::Contrib::Kafka::Ext::TAG_MESSAGE_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#30
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OFFSET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#31
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OFFSET_LAG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#39
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_CONNECTION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#40
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_CONSUMER_HEARTBEAT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#41
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_CONSUMER_JOIN_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#42
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_CONSUMER_LEAVE_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#43
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_CONSUMER_SYNC_GROUP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#44
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_DELIVER_MESSAGES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#45
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_PROCESS_BATCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#46
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_PROCESS_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#47
Datadog::Tracing::Contrib::Kafka::Ext::TAG_OPERATION_SEND_MESSAGES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#32
Datadog::Tracing::Contrib::Kafka::Ext::TAG_PARTITION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#33
Datadog::Tracing::Contrib::Kafka::Ext::TAG_REQUEST_SIZE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#34
Datadog::Tracing::Contrib::Kafka::Ext::TAG_RESPONSE_SIZE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#35
Datadog::Tracing::Contrib::Kafka::Ext::TAG_SENT_MESSAGE_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#36
Datadog::Tracing::Contrib::Kafka::Ext::TAG_TOPIC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/ext.rb#37
Datadog::Tracing::Contrib::Kafka::Ext::TAG_TOPIC_PARTITIONS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#12
class Datadog::Tracing::Contrib::Kafka::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#37
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/kafka/integration.rb#15
Datadog::Tracing::Contrib::Kafka::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/kafka/patcher.rb#12
module Datadog::Tracing::Contrib::Kafka::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/kafka/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/kafka/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/ext.rb#6
module Datadog::Tracing::Contrib::Lograge; end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Lograge::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Lograge::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/ext.rb#9
module Datadog::Tracing::Contrib::Lograge::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/ext.rb#10
Datadog::Tracing::Contrib::Lograge::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/lograge/instrumentation.rb#11
module Datadog::Tracing::Contrib::Lograge::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/lograge/instrumentation.rb#12
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/instrumentation.rb#17
module Datadog::Tracing::Contrib::Lograge::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/lograge/instrumentation.rb#18
  def custom_options(event); end
end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#12
class Datadog::Tracing::Contrib::Lograge::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/lograge/integration.rb#15
Datadog::Tracing::Contrib::Lograge::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/lograge/patcher.rb#12
module Datadog::Tracing::Contrib::Lograge::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/lograge/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/lograge/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/lograge/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#6
module Datadog::Tracing::Contrib::MongoDB
  private

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#43
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#39
  def quantization_options; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#21
  def query_builder(command_name, database_name, command); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#43
    def configuration; end

    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#39
    def quantization_options; end

    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#21
    def query_builder(command_name, database_name, command); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/configuration/settings.rb#10
module Datadog::Tracing::Contrib::MongoDB::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/configuration/settings.rb#13
class Datadog::Tracing::Contrib::MongoDB::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def quantize; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def quantize=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/configuration/settings.rb#14
Datadog::Tracing::Contrib::MongoDB::Configuration::Settings::DEFAULT_QUANTIZE = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#12
Datadog::Tracing::Contrib::MongoDB::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#10
Datadog::Tracing::Contrib::MongoDB::EXCLUDE_KEYS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#9
module Datadog::Tracing::Contrib::MongoDB::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#13
Datadog::Tracing::Contrib::MongoDB::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#11
Datadog::Tracing::Contrib::MongoDB::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#12
Datadog::Tracing::Contrib::MongoDB::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#10
Datadog::Tracing::Contrib::MongoDB::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#14
Datadog::Tracing::Contrib::MongoDB::Ext::SPAN_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#15
Datadog::Tracing::Contrib::MongoDB::Ext::SPAN_TYPE_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#16
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_COLLECTION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#21
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#17
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_DB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#18
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_OPERATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#22
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_OPERATION_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#19
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/ext.rb#20
Datadog::Tracing::Contrib::MongoDB::Ext::TAG_ROWS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#12
module Datadog::Tracing::Contrib::MongoDB::Instrumentation; end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#14
module Datadog::Tracing::Contrib::MongoDB::Instrumentation::Client
  include ::Datadog::Tracing::Contrib::MongoDB::Instrumentation::Client::InstanceMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#20
module Datadog::Tracing::Contrib::MongoDB::Instrumentation::Client::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#21
  def datadog_pin; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/instrumentation.rb#30
  def datadog_pin=(pin); end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#13
class Datadog::Tracing::Contrib::MongoDB::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#37
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#41
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/integration.rb#16
Datadog::Tracing::Contrib::MongoDB::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#14
class Datadog::Tracing::Contrib::MongoDB::MongoCommandSubscriber
  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#56
  def failed(event); end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#15
  def started(event); end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#72
  def succeeded(event); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#106
  def analytics_enabled?; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#110
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#100
  def clear_span(event); end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#114
  def datadog_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#90
  def get_span(event); end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/subscribers.rb#95
  def set_span(event, span); end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#18
Datadog::Tracing::Contrib::MongoDB::PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#12
module Datadog::Tracing::Contrib::MongoDB::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#26
  def add_mongo_monitoring; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#26
    def add_mongo_monitoring; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/mongodb/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mongodb/parsers.rb#11
Datadog::Tracing::Contrib::MongoDB::SHOW_KEYS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#6
module Datadog::Tracing::Contrib::Mysql2; end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Mysql2::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Mysql2::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#9
module Datadog::Tracing::Contrib::Mysql2::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#13
Datadog::Tracing::Contrib::Mysql2::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#11
Datadog::Tracing::Contrib::Mysql2::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#12
Datadog::Tracing::Contrib::Mysql2::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#10
Datadog::Tracing::Contrib::Mysql2::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#14
Datadog::Tracing::Contrib::Mysql2::Ext::SPAN_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#16
Datadog::Tracing::Contrib::Mysql2::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#15
Datadog::Tracing::Contrib::Mysql2::Ext::TAG_DB_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/ext.rb#17
Datadog::Tracing::Contrib::Mysql2::Ext::TAG_OPERATION_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#13
module Datadog::Tracing::Contrib::Mysql2::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#14
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#19
module Datadog::Tracing::Contrib::Mysql2::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#20
  def query(sql, options = T.unsafe(nil)); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#50
  def analytics_enabled?; end

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#54
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/instrumentation.rb#46
  def datadog_configuration; end
end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#12
class Datadog::Tracing::Contrib::Mysql2::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/integration.rb#15
Datadog::Tracing::Contrib::Mysql2::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#11
module Datadog::Tracing::Contrib::Mysql2::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#24
  def patch_mysql2_client; end

  # source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#24
    def patch_mysql2_client; end

    # source://ddtrace//lib/datadog/tracing/contrib/mysql2/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#7
module Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods

  mixes_in_class_methods ::Datadog::Tracing::Contrib::Patchable::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#8
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#15
module Datadog::Tracing::Contrib::Patchable::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#37
  def available?; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#53
  def compatible?; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#47
  def loaded?; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#61
  def patchable?; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#23
  def version; end
end

# source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#68
module Datadog::Tracing::Contrib::Patchable::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#102
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#80
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/patchable.rb#75
  def patcher; end
end

# source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#13
module Datadog::Tracing::Contrib::Patcher
  mixes_in_class_methods ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#14
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#21
module Datadog::Tracing::Contrib::Patcher::CommonMethods
  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#47
  def on_patch_error(e); end

  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#22
  def patch_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#26
  def patched?; end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#60
  def default_tags; end

  # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#66
  def patch_only_once; end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#6
module Datadog::Tracing::Contrib::Presto; end

# source://ddtrace//lib/datadog/tracing/contrib/presto/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Presto::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/presto/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Presto::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#9
module Datadog::Tracing::Contrib::Presto::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#13
Datadog::Tracing::Contrib::Presto::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#11
Datadog::Tracing::Contrib::Presto::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#12
Datadog::Tracing::Contrib::Presto::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#10
Datadog::Tracing::Contrib::Presto::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#15
Datadog::Tracing::Contrib::Presto::Ext::SPAN_KILL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#14
Datadog::Tracing::Contrib::Presto::Ext::SPAN_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#17
Datadog::Tracing::Contrib::Presto::Ext::TAG_CATALOG_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#25
Datadog::Tracing::Contrib::Presto::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#20
Datadog::Tracing::Contrib::Presto::Ext::TAG_LANGUAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#22
Datadog::Tracing::Contrib::Presto::Ext::TAG_MODEL_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#27
Datadog::Tracing::Contrib::Presto::Ext::TAG_OPERATION_KILL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#26
Datadog::Tracing::Contrib::Presto::Ext::TAG_OPERATION_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#21
Datadog::Tracing::Contrib::Presto::Ext::TAG_PROXY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#24
Datadog::Tracing::Contrib::Presto::Ext::TAG_QUERY_ASYNC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#23
Datadog::Tracing::Contrib::Presto::Ext::TAG_QUERY_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#16
Datadog::Tracing::Contrib::Presto::Ext::TAG_SCHEMA_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#19
Datadog::Tracing::Contrib::Presto::Ext::TAG_TIME_ZONE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/ext.rb#18
Datadog::Tracing::Contrib::Presto::Ext::TAG_USER_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#12
module Datadog::Tracing::Contrib::Presto::Instrumentation; end

# source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#14
module Datadog::Tracing::Contrib::Presto::Instrumentation::Client
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#20
module Datadog::Tracing::Contrib::Presto::Instrumentation::Client::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#57
  def kill(query_id); end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#39
  def query(query, &blk); end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#21
  def run(query); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#78
  def datadog_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#82
  def decorate!(span, operation); end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/instrumentation.rb#116
  def set_nilable_tag!(span, key, tag_name); end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#12
class Datadog::Tracing::Contrib::Presto::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/integration.rb#15
Datadog::Tracing::Contrib::Presto::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/presto/patcher.rb#13
module Datadog::Tracing::Contrib::Presto::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/presto/patcher.rb#24
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/presto/patcher.rb#20
  def patched?; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#26
    def patched?; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/presto/patcher.rb#16
Datadog::Tracing::Contrib::Presto::Patcher::PATCH_ONLY_ONCE = T.let(T.unsafe(nil), Datadog::Core::Utils::OnlyOnce)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#6
module Datadog::Tracing::Contrib::Qless; end

# source://ddtrace//lib/datadog/tracing/contrib/qless/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Qless::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/qless/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Qless::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_job_data; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_job_data=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_job_tags; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_job_tags=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#9
module Datadog::Tracing::Contrib::Qless::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#10
Datadog::Tracing::Contrib::Qless::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#11
Datadog::Tracing::Contrib::Qless::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#12
Datadog::Tracing::Contrib::Qless::Ext::ENV_TAG_JOB_DATA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#13
Datadog::Tracing::Contrib::Qless::Ext::ENV_TAG_JOB_TAGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#14
Datadog::Tracing::Contrib::Qless::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#15
Datadog::Tracing::Contrib::Qless::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#20
Datadog::Tracing::Contrib::Qless::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#17
Datadog::Tracing::Contrib::Qless::Ext::TAG_JOB_DATA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#16
Datadog::Tracing::Contrib::Qless::Ext::TAG_JOB_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#18
Datadog::Tracing::Contrib::Qless::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#19
Datadog::Tracing::Contrib::Qless::Ext::TAG_JOB_TAGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/ext.rb#21
Datadog::Tracing::Contrib::Qless::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#12
class Datadog::Tracing::Contrib::Qless::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/qless/integration.rb#15
Datadog::Tracing::Contrib::Qless::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#11
module Datadog::Tracing::Contrib::Qless::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#31
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#31
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/qless/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#8
module Datadog::Tracing::Contrib::Que; end

# source://ddtrace//lib/datadog/tracing/contrib/que/configuration/settings.rb#13
module Datadog::Tracing::Contrib::Que::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/que/configuration/settings.rb#15
class Datadog::Tracing::Contrib::Que::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_args; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_args=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_data; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_data=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#11
module Datadog::Tracing::Contrib::Que::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#12
Datadog::Tracing::Contrib::Que::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#13
Datadog::Tracing::Contrib::Que::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#14
Datadog::Tracing::Contrib::Que::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#15
Datadog::Tracing::Contrib::Que::Ext::ENV_TAG_ARGS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#16
Datadog::Tracing::Contrib::Que::Ext::ENV_TAG_DATA_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#17
Datadog::Tracing::Contrib::Que::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#18
Datadog::Tracing::Contrib::Que::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#28
Datadog::Tracing::Contrib::Que::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#19
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#20
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_DATA = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#21
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_ERROR_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#22
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_EXPIRED_AT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#23
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_FINISHED_AT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#24
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#25
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#26
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#27
Datadog::Tracing::Contrib::Que::Ext::TAG_JOB_RUN_AT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/ext.rb#29
Datadog::Tracing::Contrib::Que::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#15
class Datadog::Tracing::Contrib::Que::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#35
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#39
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#31
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#27
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#23
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/que/integration.rb#18
Datadog::Tracing::Contrib::Que::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/que/patcher.rb#12
module Datadog::Tracing::Contrib::Que::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/que/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/que/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/que/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/que/tracer.rb#12
class Datadog::Tracing::Contrib::Que::Tracer
  # source://ddtrace//lib/datadog/tracing/contrib/que/tracer.rb#13
  def call(job); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/que/tracer.rb#54
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/que/tracer.rb#45
  def set_sample_rate(request_span); end
end

# source://ddtrace//lib/datadog/tracing/contrib.rb#28
Datadog::Tracing::Contrib::REGISTRY = T.let(T.unsafe(nil), Datadog::Tracing::Contrib::Registry)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#6
module Datadog::Tracing::Contrib::Racecar; end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Racecar::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Racecar::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#14
module Datadog::Tracing::Contrib::Racecar::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event

  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  mixes_in_class_methods ::Datadog::Tracing::Contrib::Racecar::Event::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#22
module Datadog::Tracing::Contrib::Racecar::Event::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#33
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#37
  def process(span, event, _id, payload); end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#29
  def span_options; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#23
  def subscription(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/event.rb#69
  def ensure_clean_context!; end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#10
module Datadog::Tracing::Contrib::Racecar::Events
  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#21
  def all; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#29
  def subscribe!; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#25
  def subscriptions; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#21
    def all; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#29
    def subscribe!; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#25
    def subscriptions; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events.rb#13
Datadog::Tracing::Contrib::Racecar::Events::ALL = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#12
module Datadog::Tracing::Contrib::Racecar::Events::Batch
  include ::Datadog::Tracing::Contrib::Racecar::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Racecar::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#19
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#23
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#27
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#19
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#23
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#27
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/batch.rb#15
Datadog::Tracing::Contrib::Racecar::Events::Batch::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#12
module Datadog::Tracing::Contrib::Racecar::Events::Consume
  include ::Datadog::Tracing::Contrib::Racecar::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Racecar::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#19
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#23
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#27
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#19
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#23
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#27
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/consume.rb#15
Datadog::Tracing::Contrib::Racecar::Events::Consume::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#12
module Datadog::Tracing::Contrib::Racecar::Events::Message
  include ::Datadog::Tracing::Contrib::Racecar::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event
  include ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Subscriber::ClassMethods
  extend ::Datadog::Tracing::Contrib::ActiveSupport::Notifications::Event::ClassMethods
  extend ::Datadog::Tracing::Contrib::Racecar::Event::ClassMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#19
  def event_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#23
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#27
  def span_options; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#19
    def event_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#23
    def span_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#27
    def span_options; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/events/message.rb#15
Datadog::Tracing::Contrib::Racecar::Events::Message::EVENT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#9
module Datadog::Tracing::Contrib::Racecar::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#13
Datadog::Tracing::Contrib::Racecar::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#11
Datadog::Tracing::Contrib::Racecar::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#12
Datadog::Tracing::Contrib::Racecar::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#10
Datadog::Tracing::Contrib::Racecar::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#15
Datadog::Tracing::Contrib::Racecar::Ext::SPAN_BATCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#14
Datadog::Tracing::Contrib::Racecar::Ext::SPAN_CONSUME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#16
Datadog::Tracing::Contrib::Racecar::Ext::SPAN_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#23
Datadog::Tracing::Contrib::Racecar::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#17
Datadog::Tracing::Contrib::Racecar::Ext::TAG_CONSUMER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#18
Datadog::Tracing::Contrib::Racecar::Ext::TAG_FIRST_OFFSET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#19
Datadog::Tracing::Contrib::Racecar::Ext::TAG_MESSAGE_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#20
Datadog::Tracing::Contrib::Racecar::Ext::TAG_OFFSET = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#25
Datadog::Tracing::Contrib::Racecar::Ext::TAG_OPERATION_BATCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#24
Datadog::Tracing::Contrib::Racecar::Ext::TAG_OPERATION_CONSUME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#26
Datadog::Tracing::Contrib::Racecar::Ext::TAG_OPERATION_MESSAGE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#21
Datadog::Tracing::Contrib::Racecar::Ext::TAG_PARTITION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/ext.rb#22
Datadog::Tracing::Contrib::Racecar::Ext::TAG_TOPIC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#12
class Datadog::Tracing::Contrib::Racecar::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#37
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/racecar/integration.rb#15
Datadog::Tracing::Contrib::Racecar::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/racecar/patcher.rb#12
module Datadog::Tracing::Contrib::Racecar::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/racecar/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/racecar/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#6
module Datadog::Tracing::Contrib::Rack; end

# source://ddtrace//lib/datadog/tracing/contrib/rack/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Rack::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/rack/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Rack::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def application; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def application=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def headers; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def headers=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def middleware_names; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def middleware_names=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def quantize; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def quantize=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def request_queuing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def request_queuing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def web_service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def web_service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/configuration/settings.rb#14
Datadog::Tracing::Contrib::Rack::Configuration::Settings::DEFAULT_HEADERS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#9
module Datadog::Tracing::Contrib::Rack::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#20
Datadog::Tracing::Contrib::Rack::Ext::DEFAULT_PEER_WEBSERVER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#11
Datadog::Tracing::Contrib::Rack::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#12
Datadog::Tracing::Contrib::Rack::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#10
Datadog::Tracing::Contrib::Rack::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#13
Datadog::Tracing::Contrib::Rack::Ext::RACK_ENV_REQUEST_SPAN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#14
Datadog::Tracing::Contrib::Rack::Ext::SPAN_HTTP_SERVER_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#15
Datadog::Tracing::Contrib::Rack::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#16
Datadog::Tracing::Contrib::Rack::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#18
Datadog::Tracing::Contrib::Rack::Ext::TAG_OPERATION_HTTP_SERVER_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#17
Datadog::Tracing::Contrib::Rack::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/ext.rb#19
Datadog::Tracing::Contrib::Rack::Ext::WEBSERVER_APP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#13
class Datadog::Tracing::Contrib::Rack::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#35
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#39
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#43
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/integration.rb#16
Datadog::Tracing::Contrib::Rack::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#24
module Datadog::Tracing::Contrib::Rack::MiddlewareNamePatcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#64
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#33
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#37
  def patch_middleware_names; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#47
  def retain_middleware_name(middleware); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#29
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#64
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#37
    def patch_middleware_names; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#47
    def retain_middleware_name(middleware); end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#29
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#8
module Datadog::Tracing::Contrib::Rack::MiddlewarePatcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#17
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#13
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#13
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#70
module Datadog::Tracing::Contrib::Rack::Patcher
  private

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#102
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#86
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#78
  def patched?; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#82
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#102
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#86
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#78
    def patched?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#82
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/patcher.rb#71
Datadog::Tracing::Contrib::Rack::Patcher::PATCHERS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#13
module Datadog::Tracing::Contrib::Rack::QueueTime
  private

  # source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#20
  def get_request_start(env, now = T.unsafe(nil)); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#20
    def get_request_start(env, now = T.unsafe(nil)); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#16
Datadog::Tracing::Contrib::Rack::QueueTime::MINIMUM_ACCEPTABLE_TIME_VALUE = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#15
Datadog::Tracing::Contrib::Rack::QueueTime::QUEUE_START = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/request_queue.rb#14
Datadog::Tracing::Contrib::Rack::QueueTime::REQUEST_START = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#25
class Datadog::Tracing::Contrib::Rack::TraceMiddleware
  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#26
  def initialize(app); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#54
  def call(env); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#30
  def compute_queue_time(env); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#120
  def resource_name_for(env, status); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#132
  def set_request_tags!(trace, request_span, env, status, headers, response, original_env); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#214
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#248
  def header_to_rack_header(name); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#218
  def parse_request_headers(env); end

  # source://ddtrace//lib/datadog/tracing/contrib/rack/middlewares.rb#230
  def parse_response_headers(headers); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/utils.rb#8
module Datadog::Tracing::Contrib::Rails; end

# source://ddtrace//lib/datadog/tracing/contrib/rails/configuration/settings.rb#9
module Datadog::Tracing::Contrib::Rails::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/rails/configuration/settings.rb#12
class Datadog::Tracing::Contrib::Rails::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/tracing/contrib/rails/configuration/settings.rb#13
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def exception_controller; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def exception_controller=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def middleware; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def middleware=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def middleware_names; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def middleware_names=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def template_base_path; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def template_base_path=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/middlewares.rb#14
class Datadog::Tracing::Contrib::Rails::ExceptionMiddleware
  # source://ddtrace//lib/datadog/tracing/contrib/rails/middlewares.rb#15
  def initialize(app); end

  # source://ddtrace//lib/datadog/tracing/contrib/rails/middlewares.rb#19
  def call(env); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#9
module Datadog::Tracing::Contrib::Rails::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#10
Datadog::Tracing::Contrib::Rails::Ext::APP = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#12
Datadog::Tracing::Contrib::Rails::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#13
Datadog::Tracing::Contrib::Rails::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#14
Datadog::Tracing::Contrib::Rails::Ext::ENV_DISABLE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rails/ext.rb#11
Datadog::Tracing::Contrib::Rails::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#24
module Datadog::Tracing::Contrib::Rails::Framework
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#81
    def activate_action_cable!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#87
    def activate_action_mailer!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#96
    def activate_action_pack!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#105
    def activate_action_view!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#114
    def activate_active_job!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#123
    def activate_active_record!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#75
    def activate_active_support!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#129
    def activate_lograge!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#65
    def activate_rack!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#139
    def activate_semantic_logger!(datadog_config, rails_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/framework.rb#30
    def setup; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#14
class Datadog::Tracing::Contrib::Rails::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#38
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#42
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#30
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#26
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#34
    def patchable?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#22
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/integration.rb#17
Datadog::Tracing::Contrib::Rails::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/rails/log_injection.rb#11
module Datadog::Tracing::Contrib::Rails::LogInjection
  private

  # source://ddtrace//lib/datadog/tracing/contrib/rails/log_injection.rb#14
  def add_as_tagged_logging_logger(app); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rails/log_injection.rb#14
    def add_as_tagged_logging_logger(app); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/patcher.rb#17
module Datadog::Tracing::Contrib::Rails::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods
end

# source://ddtrace//lib/datadog/tracing/contrib/rails/utils.rb#10
module Datadog::Tracing::Contrib::Rails::Utils
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rails/utils.rb#11
    def app_name; end

    # source://ddtrace//lib/datadog/tracing/contrib/rails/utils.rb#21
    def railtie_supported?; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#6
module Datadog::Tracing::Contrib::Rake; end

# source://ddtrace//lib/datadog/tracing/contrib/rake/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Rake::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/rake/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Rake::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def quantize; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def quantize=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#9
module Datadog::Tracing::Contrib::Rake::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#11
Datadog::Tracing::Contrib::Rake::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#12
Datadog::Tracing::Contrib::Rake::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#10
Datadog::Tracing::Contrib::Rake::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#13
Datadog::Tracing::Contrib::Rake::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#15
Datadog::Tracing::Contrib::Rake::Ext::SPAN_EXECUTE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#14
Datadog::Tracing::Contrib::Rake::Ext::SPAN_INVOKE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#19
Datadog::Tracing::Contrib::Rake::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#16
Datadog::Tracing::Contrib::Rake::Ext::TAG_EXECUTE_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#17
Datadog::Tracing::Contrib::Rake::Ext::TAG_INVOKE_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#20
Datadog::Tracing::Contrib::Rake::Ext::TAG_OPERATION_EXECUTE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#21
Datadog::Tracing::Contrib::Rake::Ext::TAG_OPERATION_INVOKE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/ext.rb#18
Datadog::Tracing::Contrib::Rake::Ext::TAG_TASK_ARG_NAMES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#14
module Datadog::Tracing::Contrib::Rake::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#20
module Datadog::Tracing::Contrib::Rake::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#32
  def execute(args = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#21
  def invoke(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#67
  def annotate_execute!(span, args); end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#49
  def annotate_invoke!(span, args); end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#90
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#81
  def enabled?; end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#76
  def quantize_args(args); end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#45
  def shutdown_tracer!; end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/instrumentation.rb#86
  def span_options; end
end

# source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#12
class Datadog::Tracing::Contrib::Rake::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rake/integration.rb#15
Datadog::Tracing::Contrib::Rake::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#13
module Datadog::Tracing::Contrib::Rake::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#27
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#27
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/rake/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#6
module Datadog::Tracing::Contrib::Redis; end

# source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Redis::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#14
class Datadog::Tracing::Contrib::Redis::Configuration::Resolver < ::Datadog::Tracing::Contrib::Configuration::Resolver
  # source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#15
  def resolve(hash); end

  protected

  # source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#41
  def connection_resolver; end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#27
  def normalize(hash); end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#21
  def parse_matcher(matcher); end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Redis::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def command_args; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def command_args=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/configuration/resolver.rb#10
Datadog::Tracing::Contrib::Redis::Configuration::UNIX_SCHEME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#9
module Datadog::Tracing::Contrib::Redis::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#15
Datadog::Tracing::Contrib::Redis::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#11
Datadog::Tracing::Contrib::Redis::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#12
Datadog::Tracing::Contrib::Redis::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#13
Datadog::Tracing::Contrib::Redis::Ext::ENV_COMMAND_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#10
Datadog::Tracing::Contrib::Redis::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#14
Datadog::Tracing::Contrib::Redis::Ext::METRIC_PIPELINE_LEN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#16
Datadog::Tracing::Contrib::Redis::Ext::SPAN_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#20
Datadog::Tracing::Contrib::Redis::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#17
Datadog::Tracing::Contrib::Redis::Ext::TAG_DB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#21
Datadog::Tracing::Contrib::Redis::Ext::TAG_OPERATION_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#18
Datadog::Tracing::Contrib::Redis::Ext::TAG_RAW_COMMAND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/ext.rb#19
Datadog::Tracing::Contrib::Redis::Ext::TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#12
class Datadog::Tracing::Contrib::Redis::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#36
  def patcher; end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#40
  def resolver; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/integration.rb#15
Datadog::Tracing::Contrib::Redis::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/redis/patcher.rb#12
module Datadog::Tracing::Contrib::Redis::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/redis/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/redis/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/vendor/resolver.rb#14
module Datadog::Tracing::Contrib::Redis::Vendor; end

# source://ddtrace//lib/datadog/tracing/contrib/redis/vendor/resolver.rb#15
class Datadog::Tracing::Contrib::Redis::Vendor::Resolver
  # source://ddtrace//lib/datadog/tracing/contrib/redis/vendor/resolver.rb#54
  def _parse_options(options); end

  # source://ddtrace//lib/datadog/tracing/contrib/redis/vendor/resolver.rb#40
  def resolve(options); end
end

# source://ddtrace//lib/datadog/tracing/contrib/redis/vendor/resolver.rb#22
Datadog::Tracing::Contrib::Redis::Vendor::Resolver::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#7
module Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods

  mixes_in_class_methods ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#8
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#15
module Datadog::Tracing::Contrib::Registerable::ClassMethods
  # source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#33
  def register_as(name, registry: T.unsafe(nil), auto_patch: T.unsafe(nil), **options); end
end

# source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#39
module Datadog::Tracing::Contrib::Registerable::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#43
  def initialize(name, **options); end

  # source://ddtrace//lib/datadog/tracing/contrib/registerable.rb#40
  def name; end
end

# source://ddtrace//lib/datadog/tracing/contrib/registry.rb#8
class Datadog::Tracing::Contrib::Registry
  include ::Enumerable

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#14
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#35
  def [](name); end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#23
  def add(name, klass, auto_patch = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#29
  def each(&block); end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#42
  def to_h; end
end

# source://ddtrace//lib/datadog/tracing/contrib/registry.rb#11
class Datadog::Tracing::Contrib::Registry::Entry < ::Struct
  def auto_patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#11
  def auto_patch=(_); end

  def klass; end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#11
  def klass=(_); end

  def name; end

  # source://ddtrace//lib/datadog/tracing/contrib/registry.rb#11
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#6
module Datadog::Tracing::Contrib::Resque; end

# source://ddtrace//lib/datadog/tracing/contrib/resque/configuration/settings.rb#11
module Datadog::Tracing::Contrib::Resque::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/resque/configuration/settings.rb#14
class Datadog::Tracing::Contrib::Resque::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#9
module Datadog::Tracing::Contrib::Resque::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#11
Datadog::Tracing::Contrib::Resque::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#12
Datadog::Tracing::Contrib::Resque::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#10
Datadog::Tracing::Contrib::Resque::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#13
Datadog::Tracing::Contrib::Resque::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#14
Datadog::Tracing::Contrib::Resque::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#15
Datadog::Tracing::Contrib::Resque::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/ext.rb#16
Datadog::Tracing::Contrib::Resque::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#12
class Datadog::Tracing::Contrib::Resque::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#42
    def sync_writer; end

    # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#42
    def sync_writer=(_arg0); end

    # source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/resque/integration.rb#15
Datadog::Tracing::Contrib::Resque::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/resque/patcher.rb#11
module Datadog::Tracing::Contrib::Resque::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/resque/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/resque/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/resque/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#6
module Datadog::Tracing::Contrib::RestClient; end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/configuration/settings.rb#10
module Datadog::Tracing::Contrib::RestClient::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/configuration/settings.rb#13
class Datadog::Tracing::Contrib::RestClient::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#9
module Datadog::Tracing::Contrib::RestClient::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#13
Datadog::Tracing::Contrib::RestClient::Ext::DEFAULT_PEER_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#11
Datadog::Tracing::Contrib::RestClient::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#12
Datadog::Tracing::Contrib::RestClient::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#10
Datadog::Tracing::Contrib::RestClient::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#14
Datadog::Tracing::Contrib::RestClient::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#15
Datadog::Tracing::Contrib::RestClient::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/ext.rb#16
Datadog::Tracing::Contrib::RestClient::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#12
class Datadog::Tracing::Contrib::RestClient::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/integration.rb#15
Datadog::Tracing::Contrib::RestClient::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/rest_client/patcher.rb#10
module Datadog::Tracing::Contrib::RestClient::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/rest_client/patcher.rb#20
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/rest_client/patcher.rb#16
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/rest_client/patcher.rb#16
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/ext.rb#6
module Datadog::Tracing::Contrib::SemanticLogger; end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/configuration/settings.rb#10
module Datadog::Tracing::Contrib::SemanticLogger::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/configuration/settings.rb#13
class Datadog::Tracing::Contrib::SemanticLogger::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/ext.rb#9
module Datadog::Tracing::Contrib::SemanticLogger::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/ext.rb#10
Datadog::Tracing::Contrib::SemanticLogger::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/instrumentation.rb#11
module Datadog::Tracing::Contrib::SemanticLogger::Instrumentation
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/instrumentation.rb#12
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/instrumentation.rb#17
module Datadog::Tracing::Contrib::SemanticLogger::Instrumentation::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/instrumentation.rb#18
  def log(log, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#12
class Datadog::Tracing::Contrib::SemanticLogger::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#37
  def auto_instrument?; end

  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#41
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#45
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#31
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#27
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#23
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/integration.rb#18
Datadog::Tracing::Contrib::SemanticLogger::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/patcher.rb#12
module Datadog::Tracing::Contrib::SemanticLogger::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/semantic_logger/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#6
module Datadog::Tracing::Contrib::Sequel; end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Sequel::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Sequel::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#14
module Datadog::Tracing::Contrib::Sequel::Database
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#20
module Datadog::Tracing::Contrib::Sequel::Database::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#21
  def run(sql, options = T.unsafe(nil)); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#41
  def adapter_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/database.rb#45
  def parse_opts(sql, opts); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#14
module Datadog::Tracing::Contrib::Sequel::Dataset
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#15
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#20
module Datadog::Tracing::Contrib::Sequel::Dataset::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#21
  def execute(sql, options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#25
  def execute_ddl(sql, options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#29
  def execute_dui(sql, options = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#33
  def execute_insert(sql, options = T.unsafe(nil), &block); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#57
  def adapter_name; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/dataset.rb#39
  def trace_execute(super_method, sql, options, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#9
module Datadog::Tracing::Contrib::Sequel::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#11
Datadog::Tracing::Contrib::Sequel::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#12
Datadog::Tracing::Contrib::Sequel::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#10
Datadog::Tracing::Contrib::Sequel::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#13
Datadog::Tracing::Contrib::Sequel::Ext::SPAN_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#16
Datadog::Tracing::Contrib::Sequel::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#14
Datadog::Tracing::Contrib::Sequel::Ext::TAG_DB_VENDOR = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#17
Datadog::Tracing::Contrib::Sequel::Ext::TAG_OPERATION_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/ext.rb#15
Datadog::Tracing::Contrib::Sequel::Ext::TAG_PREPARED_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#12
class Datadog::Tracing::Contrib::Sequel::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/integration.rb#15
Datadog::Tracing::Contrib::Sequel::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#12
module Datadog::Tracing::Contrib::Sequel::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#21
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#26
  def patch_sequel_database; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#30
  def patch_sequel_dataset; end

  # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#17
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#26
    def patch_sequel_database; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#30
    def patch_sequel_dataset; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/patcher.rb#17
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#11
module Datadog::Tracing::Contrib::Sequel::Utils
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#16
    def adapter_name(database); end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#31
    def database_type(database); end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#35
    def parse_opts(sql, opts, db_opts, dataset = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#53
    def set_common_tags(span, db); end

    private

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#75
    def analytics_enabled?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#79
    def analytics_sample_rate; end

    # source://ddtrace//lib/datadog/tracing/contrib/sequel/utils.rb#71
    def datadog_configuration; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#6
module Datadog::Tracing::Contrib::Shoryuken; end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/configuration/settings.rb#11
module Datadog::Tracing::Contrib::Shoryuken::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/configuration/settings.rb#14
class Datadog::Tracing::Contrib::Shoryuken::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_body; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_body=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#9
module Datadog::Tracing::Contrib::Shoryuken::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#11
Datadog::Tracing::Contrib::Shoryuken::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#12
Datadog::Tracing::Contrib::Shoryuken::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#10
Datadog::Tracing::Contrib::Shoryuken::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#13
Datadog::Tracing::Contrib::Shoryuken::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#14
Datadog::Tracing::Contrib::Shoryuken::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#19
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#17
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_JOB_ATTRIBUTES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#18
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_JOB_BODY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#15
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_JOB_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#16
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/ext.rb#20
Datadog::Tracing::Contrib::Shoryuken::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#13
class Datadog::Tracing::Contrib::Shoryuken::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#33
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#37
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/integration.rb#16
Datadog::Tracing::Contrib::Shoryuken::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/patcher.rb#10
module Datadog::Tracing::Contrib::Shoryuken::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/patcher.rb#19
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/patcher.rb#15
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/patcher.rb#15
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/shoryuken/tracer.rb#10
class Datadog::Tracing::Contrib::Shoryuken::Tracer
  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/tracer.rb#11
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/tracer.rb#16
  def call(worker_instance, queue, sqs_msg, body); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/tracer.rb#54
  def configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/shoryuken/tracer.rb#46
  def resource(worker_instance, body); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#6
module Datadog::Tracing::Contrib::Sidekiq; end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/configuration/settings.rb#11
module Datadog::Tracing::Contrib::Sidekiq::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/configuration/settings.rb#14
class Datadog::Tracing::Contrib::Sidekiq::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def client_service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def client_service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def quantize; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def quantize=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_args; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_args=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#9
module Datadog::Tracing::Contrib::Sidekiq::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#10
Datadog::Tracing::Contrib::Sidekiq::Ext::CLIENT_SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#12
Datadog::Tracing::Contrib::Sidekiq::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#13
Datadog::Tracing::Contrib::Sidekiq::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#11
Datadog::Tracing::Contrib::Sidekiq::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#14
Datadog::Tracing::Contrib::Sidekiq::Ext::ENV_TAG_JOB_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#15
Datadog::Tracing::Contrib::Sidekiq::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#19
Datadog::Tracing::Contrib::Sidekiq::Ext::SPAN_HEARTBEAT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#17
Datadog::Tracing::Contrib::Sidekiq::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#18
Datadog::Tracing::Contrib::Sidekiq::Ext::SPAN_JOB_FETCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#16
Datadog::Tracing::Contrib::Sidekiq::Ext::SPAN_PUSH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#20
Datadog::Tracing::Contrib::Sidekiq::Ext::SPAN_SCHEDULED_PUSH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#28
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#27
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_ARGS = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#21
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_DELAY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#22
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#23
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#24
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_RETRY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#25
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_RETRY_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#26
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_JOB_WRAPPER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#32
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_OPERATION_HEARTBEAT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#30
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#31
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_OPERATION_JOB_FETCH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#29
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_OPERATION_PUSH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/ext.rb#33
Datadog::Tracing::Contrib::Sidekiq::Ext::TAG_OPERATION_SCHEDULED_PUSH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#12
class Datadog::Tracing::Contrib::Sidekiq::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#42
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#46
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#29
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#38
    def compatible_with_server_internal_tracing?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#25
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#21
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#16
Datadog::Tracing::Contrib::Sidekiq::Integration::MINIMUM_SERVER_INTERNAL_TRACING_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/integration.rb#15
Datadog::Tracing::Contrib::Sidekiq::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#10
module Datadog::Tracing::Contrib::Sidekiq::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#19
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#50
  def patch_server_heartbeat; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#44
  def patch_server_internals; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#56
  def patch_server_job_fetch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#62
  def patch_server_scheduled_push; end

  # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#15
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#50
    def patch_server_heartbeat; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#44
    def patch_server_internals; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#56
    def patch_server_job_fetch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#62
    def patch_server_scheduled_push; end

    # source://ddtrace//lib/datadog/tracing/contrib/sidekiq/patcher.rb#15
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#6
module Datadog::Tracing::Contrib::Sinatra; end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/configuration/settings.rb#10
module Datadog::Tracing::Contrib::Sinatra::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/configuration/settings.rb#13
class Datadog::Tracing::Contrib::Sinatra::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def distributed_tracing; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def distributed_tracing=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def headers; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def headers=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def resource_script_names; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def resource_script_names=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/configuration/settings.rb#14
Datadog::Tracing::Contrib::Sinatra::Configuration::Settings::DEFAULT_HEADERS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#26
module Datadog::Tracing::Contrib::Sinatra::DefaultMiddlewarePatch
  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#29
  def setup_middleware(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#27
Datadog::Tracing::Contrib::Sinatra::DefaultMiddlewarePatch::ONLY_ONCE_PER_APP = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#9
module Datadog::Tracing::Contrib::Sinatra::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#11
Datadog::Tracing::Contrib::Sinatra::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#12
Datadog::Tracing::Contrib::Sinatra::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#10
Datadog::Tracing::Contrib::Sinatra::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#14
Datadog::Tracing::Contrib::Sinatra::Ext::RACK_ENV_MIDDLEWARE_START_TIME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#15
Datadog::Tracing::Contrib::Sinatra::Ext::RACK_ENV_MIDDLEWARE_TRACED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#13
Datadog::Tracing::Contrib::Sinatra::Ext::RACK_ENV_REQUEST_SPAN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#16
Datadog::Tracing::Contrib::Sinatra::Ext::SPAN_RENDER_TEMPLATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#17
Datadog::Tracing::Contrib::Sinatra::Ext::SPAN_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#18
Datadog::Tracing::Contrib::Sinatra::Ext::SPAN_ROUTE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#19
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_APP_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#20
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#21
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_OPERATION_RENDER_TEMPLATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#22
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_OPERATION_REQUEST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#23
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_OPERATION_ROUTE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#24
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_ROUTE_PATH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#25
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_SCRIPT_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#26
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_TEMPLATE_ENGINE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/ext.rb#27
Datadog::Tracing::Contrib::Sinatra::Ext::TAG_TEMPLATE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#13
module Datadog::Tracing::Contrib::Sinatra::Framework
  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#27
    def activate_rack!(datadog_config, sinatra_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#36
    def add_middleware(middleware, builder, *args, &block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#65
    def add_middleware_after(after, middleware, builder, *args, &block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#54
    def add_middleware_before(before, middleware, builder, *args, &block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#47
    def append_middleware(middleware, builder, *args, &block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#22
    def config_with_defaults(datadog_config); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#98
    def include_middleware?(middleware, builder); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#85
    def insert_middleware(builder, middleware, args, block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#111
    def inspect_middlewares(builder); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#103
    def middlewares(builder); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#15
    def setup; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#36
    def unshift_middleare(middleware, builder, *args, &block); end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/framework.rb#78
    def wrap_middleware(middleware, *args, &block); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#12
class Datadog::Tracing::Contrib::Sinatra::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/integration.rb#15
Datadog::Tracing::Contrib::Sinatra::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#42
module Datadog::Tracing::Contrib::Sinatra::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#52
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#69
  def patch_default_middlewares; end

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#60
  def register_tracer; end

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#65
  def setup_tracer; end

  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#48
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#69
    def patch_default_middlewares; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#60
    def register_tracer; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#65
    def setup_tracer; end

    # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#48
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#13
module Datadog::Tracing::Contrib::Sinatra::TracerSetupPatch
  # source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#16
  def setup_middleware(*args, &block); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sinatra/patcher.rb#14
Datadog::Tracing::Contrib::Sinatra::TracerSetupPatch::ONLY_ONCE_PER_APP = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#8
module Datadog::Tracing::Contrib::Sneakers; end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/configuration/settings.rb#12
module Datadog::Tracing::Contrib::Sneakers::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/configuration/settings.rb#14
class Datadog::Tracing::Contrib::Sneakers::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def error_handler; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def error_handler=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def tag_body; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def tag_body=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#11
module Datadog::Tracing::Contrib::Sneakers::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#13
Datadog::Tracing::Contrib::Sneakers::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#14
Datadog::Tracing::Contrib::Sneakers::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#12
Datadog::Tracing::Contrib::Sneakers::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#15
Datadog::Tracing::Contrib::Sneakers::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#16
Datadog::Tracing::Contrib::Sneakers::Ext::SPAN_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#20
Datadog::Tracing::Contrib::Sneakers::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#19
Datadog::Tracing::Contrib::Sneakers::Ext::TAG_JOB_BODY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#18
Datadog::Tracing::Contrib::Sneakers::Ext::TAG_JOB_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#17
Datadog::Tracing::Contrib::Sneakers::Ext::TAG_JOB_ROUTING_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/ext.rb#21
Datadog::Tracing::Contrib::Sneakers::Ext::TAG_OPERATION_JOB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#15
class Datadog::Tracing::Contrib::Sneakers::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#35
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#39
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#31
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#27
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#23
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/integration.rb#18
Datadog::Tracing::Contrib::Sneakers::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/patcher.rb#13
module Datadog::Tracing::Contrib::Sneakers::Patcher
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sneakers/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sneakers/tracer.rb#14
class Datadog::Tracing::Contrib::Sneakers::Tracer
  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/tracer.rb#15
  def initialize(app, *args); end

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/tracer.rb#20
  def call(deserialized_msg, delivery_info, metadata, handler); end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sneakers/tracer.rb#51
  def configuration; end
end

# source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#12
class Datadog::Tracing::Contrib::StatusCodeMatcher
  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#15
  def initialize(range); end

  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#20
  def include?(exception_status); end

  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#24
  def to_s; end

  private

  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#50
  def error_responses; end

  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#56
  def handle_statuses; end

  # source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#30
  def set_range; end
end

# source://ddtrace//lib/datadog/tracing/contrib/status_code_matcher.rb#13
Datadog::Tracing::Contrib::StatusCodeMatcher::REGEX_PARSER = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#6
module Datadog::Tracing::Contrib::SuckerPunch; end

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/configuration/settings.rb#10
module Datadog::Tracing::Contrib::SuckerPunch::Configuration; end

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/configuration/settings.rb#13
class Datadog::Tracing::Contrib::SuckerPunch::Configuration::Settings < ::Datadog::Tracing::Contrib::Configuration::Settings
  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def analytics_sample_rate; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def analytics_sample_rate=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def enabled; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def enabled=(value); end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#45
  def service_name; end

  # source://ddtrace//lib/datadog/core/configuration/options.rb#48
  def service_name=(value); end
end

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#9
module Datadog::Tracing::Contrib::SuckerPunch::Ext; end

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#11
Datadog::Tracing::Contrib::SuckerPunch::Ext::ENV_ANALYTICS_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#12
Datadog::Tracing::Contrib::SuckerPunch::Ext::ENV_ANALYTICS_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#10
Datadog::Tracing::Contrib::SuckerPunch::Ext::ENV_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#13
Datadog::Tracing::Contrib::SuckerPunch::Ext::SERVICE_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#14
Datadog::Tracing::Contrib::SuckerPunch::Ext::SPAN_PERFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#15
Datadog::Tracing::Contrib::SuckerPunch::Ext::SPAN_PERFORM_ASYNC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#16
Datadog::Tracing::Contrib::SuckerPunch::Ext::SPAN_PERFORM_IN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#19
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#20
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_OPERATION_PERFORM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#21
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_OPERATION_PERFORM_ASYNC = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#22
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_OPERATION_PERFORM_IN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#17
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_PERFORM_IN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/ext.rb#18
Datadog::Tracing::Contrib::SuckerPunch::Ext::TAG_QUEUE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#12
class Datadog::Tracing::Contrib::SuckerPunch::Integration
  include ::Datadog::Tracing::Contrib::Integration
  include ::Datadog::Tracing::Contrib::Configurable
  include ::Datadog::Tracing::Contrib::Configurable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Patchable
  include ::Datadog::Tracing::Contrib::Patchable::InstanceMethods
  include ::Datadog::Tracing::Contrib::Registerable
  include ::Datadog::Tracing::Contrib::Registerable::InstanceMethods
  extend ::Datadog::Tracing::Contrib::Patchable::ClassMethods
  extend ::Datadog::Tracing::Contrib::Registerable::ClassMethods

  # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#32
  def new_configuration; end

  # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#36
  def patcher; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#28
    def compatible?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#24
    def loaded?; end

    # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#20
    def version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/integration.rb#15
Datadog::Tracing::Contrib::SuckerPunch::Integration::MINIMUM_VERSION = T.let(T.unsafe(nil), Gem::Version)

# source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#12
module Datadog::Tracing::Contrib::SuckerPunch::Patcher
  include ::Kernel
  include ::Datadog::Tracing::Contrib::Patcher
  extend ::Datadog::Tracing::Contrib::Patcher::CommonMethods

  private

  # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#30
  def get_option(option); end

  # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#22
  def patch; end

  # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#18
  def target_version; end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#30
    def get_option(option); end

    # source://ddtrace//lib/datadog/tracing/contrib/patcher.rb#30
    def patch; end

    # source://ddtrace//lib/datadog/tracing/contrib/sucker_punch/patcher.rb#18
    def target_version; end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#9
module Datadog::Tracing::Contrib::Utils; end

# source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#8
module Datadog::Tracing::Contrib::Utils::Database
  private

  # source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#15
  def normalize_vendor(vendor); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#15
    def normalize_vendor(vendor); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#9
Datadog::Tracing::Contrib::Utils::Database::VENDOR_DEFAULT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#10
Datadog::Tracing::Contrib::Utils::Database::VENDOR_POSTGRES = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/utils/database.rb#11
Datadog::Tracing::Contrib::Utils::Database::VENDOR_SQLITE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#10
module Datadog::Tracing::Contrib::Utils::Quantization; end

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#12
module Datadog::Tracing::Contrib::Utils::Quantization::HTTP
  include ::Kernel

  private

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#69
  def collect_query(query, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#40
  def query(query, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#46
  def query!(query, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#19
  def url(url, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#25
  def url!(url, options = T.unsafe(nil)); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#40
    def query(query, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#46
    def query!(query, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#19
    def url(url, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#25
    def url!(url, options = T.unsafe(nil)); end

    private

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#69
    def collect_query(query, options = T.unsafe(nil)); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/http.rb#15
Datadog::Tracing::Contrib::Utils::Quantization::HTTP::PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#9
module Datadog::Tracing::Contrib::Utils::Quantization::Hash
  private

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#103
  def convert_value(value); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#21
  def format(hash_obj, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#28
  def format!(hash_obj, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#66
  def format_array(value, options); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#34
  def format_hash(hash_obj, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#52
  def format_value(value, options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#98
  def indifferent_equals(value); end

  # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#76
  def merge_options(original, additional); end

  class << self
    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#103
    def convert_value(value); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#21
    def format(hash_obj, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#28
    def format!(hash_obj, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#66
    def format_array(value, options); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#34
    def format_hash(hash_obj, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#52
    def format_value(value, options = T.unsafe(nil)); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#98
    def indifferent_equals(value); end

    # source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#76
    def merge_options(original, additional); end
  end
end

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#13
Datadog::Tracing::Contrib::Utils::Quantization::Hash::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#11
Datadog::Tracing::Contrib::Utils::Quantization::Hash::EXCLUDE_KEYS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#10
Datadog::Tracing::Contrib::Utils::Quantization::Hash::PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/contrib/utils/quantization/hash.rb#12
Datadog::Tracing::Contrib::Utils::Quantization::Hash::SHOW_KEYS = T.let(T.unsafe(nil), Array)

# source://ddtrace//lib/datadog/tracing/correlation.rb#9
module Datadog::Tracing::Correlation
  private

  # source://ddtrace//lib/datadog/tracing/correlation.rb#83
  def identifier_from_digest(digest); end

  class << self
    # source://ddtrace//lib/datadog/tracing/correlation.rb#83
    def identifier_from_digest(digest); end
  end
end

# source://ddtrace//lib/datadog/tracing/correlation.rb#12
class Datadog::Tracing::Correlation::Identifier
  # source://ddtrace//lib/datadog/tracing/correlation.rb#34
  def initialize(env: T.unsafe(nil), service: T.unsafe(nil), span_id: T.unsafe(nil), span_name: T.unsafe(nil), span_resource: T.unsafe(nil), span_service: T.unsafe(nil), span_type: T.unsafe(nil), trace_id: T.unsafe(nil), trace_name: T.unsafe(nil), trace_resource: T.unsafe(nil), trace_service: T.unsafe(nil), version: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def env; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def service; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def span_id; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def span_resource; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def span_service; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def span_type; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#63
  def to_log_format; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def trace_id; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def trace_name; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def trace_resource; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def trace_service; end

  # source://ddtrace//lib/datadog/tracing/correlation.rb#19
  def version; end
end

# source://ddtrace//lib/datadog/tracing/correlation.rb#13
Datadog::Tracing::Correlation::Identifier::LOG_ATTR_ENV = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/correlation.rb#14
Datadog::Tracing::Correlation::Identifier::LOG_ATTR_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/correlation.rb#15
Datadog::Tracing::Correlation::Identifier::LOG_ATTR_SPAN_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/correlation.rb#16
Datadog::Tracing::Correlation::Identifier::LOG_ATTR_TRACE_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/correlation.rb#17
Datadog::Tracing::Correlation::Identifier::LOG_ATTR_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/context_provider.rb#12
class Datadog::Tracing::DefaultContextProvider
  # source://ddtrace//lib/datadog/tracing/context_provider.rb#14
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/context_provider.rb#24
  def context(key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/context_provider.rb#19
  def context=(ctx); end
end

# source://ddtrace//lib/datadog/tracing/distributed/helpers.rb#8
module Datadog::Tracing::Distributed; end

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#6
module Datadog::Tracing::Distributed::Headers; end

# source://ddtrace//lib/datadog/tracing/distributed/headers/b3.rb#13
module Datadog::Tracing::Distributed::Headers::B3
  include ::Datadog::Tracing::Distributed::Headers::Ext

  class << self
    # source://ddtrace//lib/datadog/tracing/distributed/headers/b3.rb#33
    def extract(env); end

    # source://ddtrace//lib/datadog/tracing/distributed/headers/b3.rb#16
    def inject!(digest, env); end
  end
end

# source://ddtrace//lib/datadog/tracing/distributed/headers/b3_single.rb#13
module Datadog::Tracing::Distributed::Headers::B3Single
  include ::Datadog::Tracing::Distributed::Headers::Ext

  class << self
    # source://ddtrace//lib/datadog/tracing/distributed/headers/b3_single.rb#39
    def extract(env); end

    # source://ddtrace//lib/datadog/tracing/distributed/headers/b3_single.rb#16
    def inject!(digest, env); end
  end
end

# source://ddtrace//lib/datadog/tracing/distributed/headers/datadog.rb#12
module Datadog::Tracing::Distributed::Headers::Datadog
  include ::Datadog::Tracing::Distributed::Headers::Ext

  class << self
    # source://ddtrace//lib/datadog/tracing/distributed/headers/datadog.rb#26
    def extract(env); end

    # source://ddtrace//lib/datadog/tracing/distributed/headers/datadog.rb#15
    def inject!(digest, env); end
  end
end

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#10
module Datadog::Tracing::Distributed::Headers::Ext; end

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#19
Datadog::Tracing::Distributed::Headers::Ext::B3_HEADER_SAMPLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#20
Datadog::Tracing::Distributed::Headers::Ext::B3_HEADER_SINGLE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#18
Datadog::Tracing::Distributed::Headers::Ext::B3_HEADER_SPAN_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#17
Datadog::Tracing::Distributed::Headers::Ext::B3_HEADER_TRACE_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#26
Datadog::Tracing::Distributed::Headers::Ext::GRPC_METADATA_ORIGIN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#24
Datadog::Tracing::Distributed::Headers::Ext::GRPC_METADATA_PARENT_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#25
Datadog::Tracing::Distributed::Headers::Ext::GRPC_METADATA_SAMPLING_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#23
Datadog::Tracing::Distributed::Headers::Ext::GRPC_METADATA_TRACE_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#14
Datadog::Tracing::Distributed::Headers::Ext::HTTP_HEADER_ORIGIN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#12
Datadog::Tracing::Distributed::Headers::Ext::HTTP_HEADER_PARENT_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#13
Datadog::Tracing::Distributed::Headers::Ext::HTTP_HEADER_SAMPLING_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/headers/ext.rb#11
Datadog::Tracing::Distributed::Headers::Ext::HTTP_HEADER_TRACE_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/distributed/helpers.rb#10
module Datadog::Tracing::Distributed::Helpers
  class << self
    # source://ddtrace//lib/datadog/tracing/distributed/helpers.rb#12
    def clamp_sampling_priority(sampling_priority); end

    # source://ddtrace//lib/datadog/tracing/distributed/helpers.rb#23
    def truncate_base16_number(value); end
  end
end

# source://ddtrace//lib/datadog/tracing/distributed/parser.rb#10
class Datadog::Tracing::Distributed::Parser
  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#11
  def initialize(env); end

  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#17
  def header(name); end

  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#26
  def id(hdr, base = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#42
  def number(hdr, base = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#30
  def value_to_id(value, base = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/distributed/parser.rb#46
  def value_to_number(value, base = T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/tracing/event.rb#40
class Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/event.rb#45
  def initialize(name); end

  # source://ddtrace//lib/datadog/tracing/event.rb#41
  def name; end

  # source://ddtrace//lib/datadog/tracing/event.rb#62
  def publish(*args); end

  # source://ddtrace//lib/datadog/tracing/event.rb#50
  def subscribe(&block); end

  # source://ddtrace//lib/datadog/tracing/event.rb#41
  def subscriptions; end

  # source://ddtrace//lib/datadog/tracing/event.rb#56
  def unsubscribe_all!; end
end

# source://ddtrace//lib/datadog/tracing/event.rb#8
module Datadog::Tracing::Events
  include ::Datadog::Tracing::Events::InstanceMethods

  mixes_in_class_methods ::Datadog::Tracing::Events::ClassMethods

  class << self
    # source://ddtrace//lib/datadog/tracing/event.rb#9
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/event.rb#15
module Datadog::Tracing::Events::ClassMethods
  # source://ddtrace//lib/datadog/tracing/event.rb#16
  def build(**event_handlers); end
end

# source://ddtrace//lib/datadog/tracing/event.rb#24
module Datadog::Tracing::Events::InstanceMethods
  # source://ddtrace//lib/datadog/tracing/event.rb#25
  def subscribe(**event_handlers); end
end

# source://ddtrace//lib/datadog/tracing/context_provider.rb#46
class Datadog::Tracing::FiberLocalContext
  # source://ddtrace//lib/datadog/tracing/context_provider.rb#49
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/context_provider.rb#61
  def local(storage = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/context_provider.rb#56
  def local=(ctx); end
end

# source://ddtrace//lib/datadog/tracing/flush.rb#5
module Datadog::Tracing::Flush; end

# source://ddtrace//lib/datadog/tracing/flush.rb#7
class Datadog::Tracing::Flush::Finished
  # source://ddtrace//lib/datadog/tracing/flush.rb#14
  def consume!(trace_op); end

  # source://ddtrace//lib/datadog/tracing/flush.rb#20
  def full_flush?(trace_op); end

  protected

  # source://ddtrace//lib/datadog/tracing/flush.rb#26
  def get_trace(trace_op); end
end

# source://ddtrace//lib/datadog/tracing/flush.rb#32
class Datadog::Tracing::Flush::Partial
  # source://ddtrace//lib/datadog/tracing/flush.rb#38
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/flush.rb#52
  def consume!(trace_op); end

  # source://ddtrace//lib/datadog/tracing/flush.rb#36
  def min_spans_for_partial; end

  # source://ddtrace//lib/datadog/tracing/flush.rb#58
  def partial_flush?(trace_op); end

  protected

  # source://ddtrace//lib/datadog/tracing/flush.rb#68
  def get_trace(trace_op); end
end

# source://ddtrace//lib/datadog/tracing/flush.rb#34
Datadog::Tracing::Flush::Partial::DEFAULT_MIN_SPANS_FOR_PARTIAL_FLUSH = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/buffer.rb#12
module Datadog::Tracing::MeasuredBuffer
  include ::Kernel

  # source://ddtrace//lib/datadog/tracing/buffer.rb#15
  def initialize(*_); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#24
  def add!(trace); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#31
  def add_all!(traces); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#49
  def drain!; end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#55
  def measure_accept(trace); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#66
  def measure_drop(trace); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#76
  def measure_pop(traces); end

  # source://ddtrace//lib/datadog/tracing/buffer.rb#38
  def replace!(trace); end
end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#7
module Datadog::Tracing::Metadata
  include ::Datadog::Tracing::Metadata::Tagging
  include ::Datadog::Tracing::Metadata::Errors

  class << self
    # source://ddtrace//lib/datadog/tracing/metadata.rb#11
    def included(base); end
  end
end

# source://ddtrace//lib/datadog/tracing/metadata/analytics.rb#10
module Datadog::Tracing::Metadata::Analytics
  # source://ddtrace//lib/datadog/tracing/metadata/analytics.rb#11
  def set_tag(key, value); end
end

# source://ddtrace//lib/datadog/tracing/metadata/errors.rb#12
module Datadog::Tracing::Metadata::Errors
  # source://ddtrace//lib/datadog/tracing/metadata/errors.rb#14
  def set_error(e); end
end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#13
module Datadog::Tracing::Metadata::Ext; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#25
module Datadog::Tracing::Metadata::Ext::Analytics; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#26
Datadog::Tracing::Metadata::Ext::Analytics::DEFAULT_SAMPLE_RATE = T.let(T.unsafe(nil), Float)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#27
Datadog::Tracing::Metadata::Ext::Analytics::TAG_ENABLED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#28
Datadog::Tracing::Metadata::Ext::Analytics::TAG_MEASURED = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#29
Datadog::Tracing::Metadata::Ext::Analytics::TAG_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#32
module Datadog::Tracing::Metadata::Ext::AppTypes; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#35
Datadog::Tracing::Metadata::Ext::AppTypes::TYPE_CACHE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#37
Datadog::Tracing::Metadata::Ext::AppTypes::TYPE_CUSTOM = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#34
Datadog::Tracing::Metadata::Ext::AppTypes::TYPE_DB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#33
Datadog::Tracing::Metadata::Ext::AppTypes::TYPE_WEB = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#36
Datadog::Tracing::Metadata::Ext::AppTypes::TYPE_WORKER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#42
module Datadog::Tracing::Metadata::Ext::Distributed; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#43
Datadog::Tracing::Metadata::Ext::Distributed::TAG_ORIGIN = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#44
Datadog::Tracing::Metadata::Ext::Distributed::TAG_SAMPLING_PRIORITY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#48
module Datadog::Tracing::Metadata::Ext::Errors; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#49
Datadog::Tracing::Metadata::Ext::Errors::STATUS = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#50
Datadog::Tracing::Metadata::Ext::Errors::TAG_MSG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#51
Datadog::Tracing::Metadata::Ext::Errors::TAG_STACK = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#52
Datadog::Tracing::Metadata::Ext::Errors::TAG_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#56
module Datadog::Tracing::Metadata::Ext::HTTP; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#57
Datadog::Tracing::Metadata::Ext::HTTP::ERROR_RANGE = T.let(T.unsafe(nil), Range)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#68
module Datadog::Tracing::Metadata::Ext::HTTP::Headers
  private

  # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#74
  def to_tag(name); end

  class << self
    # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#74
    def to_tag(name); end
  end
end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#71
Datadog::Tracing::Metadata::Ext::HTTP::Headers::INVALID_TAG_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#99
module Datadog::Tracing::Metadata::Ext::HTTP::RequestHeaders
  private

  # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#104
  def to_tag(name); end

  class << self
    # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#104
    def to_tag(name); end
  end
end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#100
Datadog::Tracing::Metadata::Ext::HTTP::RequestHeaders::PREFIX = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#110
module Datadog::Tracing::Metadata::Ext::HTTP::ResponseHeaders
  private

  # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#115
  def to_tag(name); end

  class << self
    # source://ddtrace//lib/datadog/tracing/metadata/ext.rb#115
    def to_tag(name); end
  end
end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#111
Datadog::Tracing::Metadata::Ext::HTTP::ResponseHeaders::PREFIX = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#58
Datadog::Tracing::Metadata::Ext::HTTP::TAG_BASE_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#59
Datadog::Tracing::Metadata::Ext::HTTP::TAG_METHOD = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#60
Datadog::Tracing::Metadata::Ext::HTTP::TAG_STATUS_CODE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#61
Datadog::Tracing::Metadata::Ext::HTTP::TAG_URL = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#62
Datadog::Tracing::Metadata::Ext::HTTP::TYPE_INBOUND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#63
Datadog::Tracing::Metadata::Ext::HTTP::TYPE_OUTBOUND = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#64
Datadog::Tracing::Metadata::Ext::HTTP::TYPE_PROXY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#65
Datadog::Tracing::Metadata::Ext::HTTP::TYPE_TEMPLATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#122
module Datadog::Tracing::Metadata::Ext::NET; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#123
Datadog::Tracing::Metadata::Ext::NET::TAG_HOSTNAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#124
Datadog::Tracing::Metadata::Ext::NET::TAG_TARGET_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#125
Datadog::Tracing::Metadata::Ext::NET::TAG_TARGET_PORT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#144
module Datadog::Tracing::Metadata::Ext::SQL; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#146
Datadog::Tracing::Metadata::Ext::SQL::TAG_QUERY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#145
Datadog::Tracing::Metadata::Ext::SQL::TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#129
module Datadog::Tracing::Metadata::Ext::Sampling; end

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#130
Datadog::Tracing::Metadata::Ext::Sampling::TAG_AGENT_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#138
Datadog::Tracing::Metadata::Ext::Sampling::TAG_RATE_LIMITER_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#134
Datadog::Tracing::Metadata::Ext::Sampling::TAG_RULE_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#140
Datadog::Tracing::Metadata::Ext::Sampling::TAG_SAMPLE_RATE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#15
Datadog::Tracing::Metadata::Ext::TAG_COMPONENT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#17
Datadog::Tracing::Metadata::Ext::TAG_OPERATION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#19
Datadog::Tracing::Metadata::Ext::TAG_PEER_HOSTNAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/ext.rb#21
Datadog::Tracing::Metadata::Ext::TAG_PEER_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#12
module Datadog::Tracing::Metadata::Tagging
  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#94
  def clear_metric(key); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#69
  def clear_tag(key); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#74
  def get_metric(key); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#28
  def get_tag(key); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#80
  def set_metric(key, value); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#36
  def set_tag(key, value = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#64
  def set_tags(tags); end

  protected

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#100
  def meta; end

  # source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#104
  def metrics; end
end

# source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#20
Datadog::Tracing::Metadata::Tagging::ENSURE_AGENT_TAGS = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/metadata/tagging.rb#14
Datadog::Tracing::Metadata::Tagging::NUMERIC_TAG_SIZE_RANGE = T.let(T.unsafe(nil), Range)

# source://ddtrace//lib/datadog/tracing/pipeline/span_processor.rb#5
module Datadog::Tracing::Pipeline
  class << self
    # source://ddtrace//lib/datadog/tracing/pipeline.rb#27
    def before_flush(*processors, &processor_block); end

    # source://ddtrace//lib/datadog/tracing/pipeline.rb#35
    def process!(traces); end

    # source://ddtrace//lib/datadog/tracing/pipeline.rb#43
    def processors=(value); end

    private

    # source://ddtrace//lib/datadog/tracing/pipeline.rb#47
    def apply_processors!(trace); end
  end
end

# source://ddtrace//lib/datadog/tracing/pipeline/span_filter.rb#21
class Datadog::Tracing::Pipeline::SpanFilter < ::Datadog::Tracing::Pipeline::SpanProcessor
  # source://ddtrace//lib/datadog/tracing/pipeline/span_filter.rb#22
  def call(trace); end

  private

  # source://ddtrace//lib/datadog/tracing/pipeline/span_filter.rb#36
  def drop_it?(span); end
end

# source://ddtrace//lib/datadog/tracing/pipeline/span_processor.rb#10
class Datadog::Tracing::Pipeline::SpanProcessor
  # source://ddtrace//lib/datadog/tracing/pipeline/span_processor.rb#17
  def initialize(operation = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/pipeline/span_processor.rb#29
  def call(trace); end
end

# source://ddtrace//lib/datadog/tracing/propagation/http.rb#16
module Datadog::Tracing::Propagation; end

# source://ddtrace//lib/datadog/tracing/propagation/http.rb#19
module Datadog::Tracing::Propagation::HTTP
  class << self
    # source://ddtrace//lib/datadog/tracing/propagation/http.rb#54
    def extract(env); end

    # source://ddtrace//lib/datadog/tracing/propagation/http.rb#27
    def inject!(digest, env); end
  end
end

# source://ddtrace//lib/datadog/tracing/propagation/http.rb#20
Datadog::Tracing::Propagation::HTTP::PROPAGATION_STYLES = T.let(T.unsafe(nil), Hash)

# source://ddtrace//lib/datadog/tracing/runtime/metrics.rb#7
module Datadog::Tracing::Runtime; end

# source://ddtrace//lib/datadog/tracing/runtime/metrics.rb#9
module Datadog::Tracing::Runtime::Metrics
  class << self
    # source://ddtrace//lib/datadog/tracing/runtime/metrics.rb#10
    def associate_trace(trace); end
  end
end

# source://ddtrace//lib/datadog/tracing/sampling/sampler.rb#5
module Datadog::Tracing::Sampling; end

# source://ddtrace//lib/datadog/tracing/sampling/all_sampler.rb#10
class Datadog::Tracing::Sampling::AllSampler < ::Datadog::Tracing::Sampling::Sampler
  # source://ddtrace//lib/datadog/tracing/sampling/all_sampler.rb#15
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/all_sampler.rb#11
  def sample?(_trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/all_sampler.rb#19
  def sample_rate(*_); end
end

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#6
module Datadog::Tracing::Sampling::Ext; end

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#10
module Datadog::Tracing::Sampling::Ext::Priority; end

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#18
Datadog::Tracing::Sampling::Ext::Priority::AUTO_KEEP = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#16
Datadog::Tracing::Sampling::Ext::Priority::AUTO_REJECT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#22
Datadog::Tracing::Sampling::Ext::Priority::USER_KEEP = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/sampling/ext.rb#14
Datadog::Tracing::Sampling::Ext::Priority::USER_REJECT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#9
class Datadog::Tracing::Sampling::Matcher
  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#14
  def match?(trace); end
end

# source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#13
class Datadog::Tracing::Sampling::PrioritySampler
  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#22
  def initialize(opts = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#20
  def pre_sampler; end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#20
  def priority_sampler; end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#31
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#27
  def sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#59
  def update(rate_by_service); end

  private

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#106
  def assign_priority!(trace, priority); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#65
  def pre_sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#88
  def preserving_sampling(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#76
  def priority_assigned?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/priority_sampler.rb#80
  def priority_sample!(trace); end
end

# source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#52
class Datadog::Tracing::Sampling::ProcMatcher < ::Datadog::Tracing::Sampling::Matcher
  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#57
  def initialize(&block); end

  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#53
  def block; end

  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#62
  def match?(trace); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#11
class Datadog::Tracing::Sampling::RateByKeySampler < ::Datadog::Tracing::Sampling::Sampler
  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#15
  def initialize(default_key, default_rate = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#12
  def default_key; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#32
  def default_sampler; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#72
  def delete(key); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#78
  def delete_if(&block); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#84
  def length; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#28
  def resolve(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#44
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#36
  def sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#52
  def sample_rate(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#60
  def update(key, rate); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#66
  def update_all(rate_by_key); end

  private

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_key_sampler.rb#90
  def set_rate(key, rate); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_by_service_sampler.rb#11
class Datadog::Tracing::Sampling::RateByServiceSampler < ::Datadog::Tracing::Sampling::RateByKeySampler
  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_service_sampler.rb#14
  def initialize(default_rate = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_service_sampler.rb#19
  def update(rate_by_service); end

  private

  # source://ddtrace//lib/datadog/tracing/sampling/rate_by_service_sampler.rb#32
  def key_for(trace); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_by_service_sampler.rb#12
Datadog::Tracing::Sampling::RateByServiceSampler::DEFAULT_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#10
class Datadog::Tracing::Sampling::RateLimiter
  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#18
  def allow?(size); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#24
  def effective_rate; end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#13
class Datadog::Tracing::Sampling::RateSampler < ::Datadog::Tracing::Sampling::Sampler
  # source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#23
  def initialize(sample_rate = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#47
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#43
  def sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#34
  def sample_rate(*_); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#38
  def sample_rate=(sample_rate); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_sampler.rb#14
Datadog::Tracing::Sampling::RateSampler::KNUTH_FACTOR = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/sampling/rule.rb#15
class Datadog::Tracing::Sampling::Rule
  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#20
  def initialize(matcher, sampler); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#30
  def match?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#16
  def matcher; end

  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#40
  def sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#45
  def sample_rate(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#16
  def sampler; end
end

# source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#18
class Datadog::Tracing::Sampling::RuleSampler
  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#27
  def initialize(rules = T.unsafe(nil), rate_limit: T.unsafe(nil), rate_limiter: T.unsafe(nil), default_sample_rate: T.unsafe(nil), default_sampler: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#19
  def default_sampler; end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#19
  def rate_limiter; end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#19
  def rules; end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#65
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#61
  def sample?(_trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#79
  def update(*args); end

  private

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#87
  def sample_trace(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#125
  def set_limiter_metrics(trace, limiter_rate); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#113
  def set_priority(trace, sampled); end

  # source://ddtrace//lib/datadog/tracing/sampling/rule_sampler.rb#121
  def set_rule_metrics(trace, sample_rate); end
end

# source://ddtrace//lib/datadog/tracing/sampling/sampler.rb#9
class Datadog::Tracing::Sampling::Sampler
  # source://ddtrace//lib/datadog/tracing/sampling/sampler.rb#29
  def sample!(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/sampler.rb#17
  def sample?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/sampler.rb#38
  def sample_rate(trace); end
end

# source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#23
class Datadog::Tracing::Sampling::SimpleMatcher < ::Datadog::Tracing::Sampling::Matcher
  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#38
  def initialize(name: T.unsafe(nil), service: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#44
  def match?(trace); end

  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#32
  def name; end

  # source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#32
  def service; end
end

# source://ddtrace//lib/datadog/tracing/sampling/matcher.rb#24
Datadog::Tracing::Sampling::SimpleMatcher::MATCH_ALL = T.let(T.unsafe(nil), T.untyped)

# source://ddtrace//lib/datadog/tracing/sampling/rule.rb#58
class Datadog::Tracing::Sampling::SimpleRule < ::Datadog::Tracing::Sampling::Rule
  # source://ddtrace//lib/datadog/tracing/sampling/rule.rb#59
  def initialize(name: T.unsafe(nil), service: T.unsafe(nil), sample_rate: T.unsafe(nil)); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#32
class Datadog::Tracing::Sampling::TokenBucket < ::Datadog::Tracing::Sampling::RateLimiter
  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#39
  def initialize(rate, max_tokens = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#64
  def allow?(size); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#98
  def available_tokens; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#91
  def current_window_rate; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#76
  def effective_rate; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#33
  def max_tokens; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#33
  def rate; end

  private

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#124
  def increment_conforming_count; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#120
  def increment_total_count; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#104
  def refill_since_last_message; end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#115
  def refill_tokens(size); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#128
  def should_allow?(size); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#148
  def update_rate_counts(allowed); end
end

# source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#173
class Datadog::Tracing::Sampling::UnlimitedLimiter < ::Datadog::Tracing::Sampling::RateLimiter
  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#174
  def allow?(_); end

  # source://ddtrace//lib/datadog/tracing/sampling/rate_limiter.rb#179
  def effective_rate; end
end

# source://ddtrace//lib/datadog/tracing/span.rb#19
class Datadog::Tracing::Span
  include ::Datadog::Tracing::Metadata::Analytics
  include ::Datadog::Tracing::Metadata
  include ::Datadog::Tracing::Metadata::Tagging
  include ::Datadog::Tracing::Metadata::Errors

  # source://ddtrace//lib/datadog/tracing/span.rb#67
  def initialize(name, duration: T.unsafe(nil), end_time: T.unsafe(nil), id: T.unsafe(nil), meta: T.unsafe(nil), metrics: T.unsafe(nil), parent_id: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), span_type: T.unsafe(nil), start_time: T.unsafe(nil), status: T.unsafe(nil), type: T.unsafe(nil), trace_id: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span.rb#130
  def ==(other); end

  # source://ddtrace//lib/datadog/tracing/span.rb#119
  def duration; end

  # source://ddtrace//lib/datadog/tracing/span.rb#49
  def duration=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def end_time; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def end_time=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#114
  def finished?; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def id; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def id=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def meta; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def meta=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def metrics; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def metrics=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def name; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def name=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def parent_id; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def parent_id=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#166
  def pretty_print(q); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def resource; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def resource=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def service; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def service=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#124
  def set_error(e); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def span_id; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def span_type; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def start_time; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def start_time=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#109
  def started?; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def status; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def status=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#114
  def stopped?; end

  # source://ddtrace//lib/datadog/tracing/span.rb#143
  def to_hash; end

  # source://ddtrace//lib/datadog/tracing/span.rb#136
  def to_s; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def trace_id; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def trace_id=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def type; end

  # source://ddtrace//lib/datadog/tracing/span.rb#35
  def type=(_arg0); end

  private

  # source://ddtrace//lib/datadog/tracing/span.rb#207
  def duration_nano; end

  # source://ddtrace//lib/datadog/tracing/span.rb#201
  def start_time_nano; end
end

# source://ddtrace//lib/datadog/tracing/span.rb#33
Datadog::Tracing::Span::EXTERNAL_MAX_ID = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/span.rb#29
Datadog::Tracing::Span::RUBY_MAX_ID = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/span_operation.rb#23
class Datadog::Tracing::SpanOperation
  include ::Datadog::Tracing::Metadata::Analytics
  include ::Datadog::Tracing::Metadata
  include ::Datadog::Tracing::Metadata::Tagging
  include ::Datadog::Tracing::Metadata::Errors

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#42
  def initialize(name, child_of: T.unsafe(nil), events: T.unsafe(nil), on_error: T.unsafe(nil), parent_id: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), start_time: T.unsafe(nil), tags: T.unsafe(nil), trace_id: T.unsafe(nil), type: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#266
  def duration; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def end_time; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#241
  def end_time=(time); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#245
  def finish(end_time = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#262
  def finished?; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def id; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#133
  def measure; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def name; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#106
  def name=(name); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def parent_id; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#305
  def pretty_print(q); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def resource; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#129
  def resource=(resource); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def service; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#122
  def service=(service); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#271
  def set_error(e); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def span_id; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def span_type; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#115
  def span_type=(type); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#187
  def start(start_time = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def start_time; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#236
  def start_time=(time); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#226
  def started?; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#39
  def status; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#39
  def status=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#202
  def stop(stop_time = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#231
  def stopped?; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#282
  def to_hash; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#277
  def to_s; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def trace_id; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#28
  def type; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#115
  def type=(type); end

  private

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#457
  def build_span; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#496
  def duration_marker; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#508
  def duration_nano; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#435
  def events; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#435
  def parent; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#484
  def parent=(parent); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#435
  def span; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#502
  def start_time_nano; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#424
class Datadog::Tracing::SpanOperation::AlreadyStartedError < ::StandardError
  # source://ddtrace//lib/datadog/tracing/span_operation.rb#425
  def message; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#337
class Datadog::Tracing::SpanOperation::Events
  include ::Datadog::Tracing::Events
  include ::Datadog::Tracing::Events::InstanceMethods
  extend ::Datadog::Tracing::Events::ClassMethods

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#347
  def initialize(on_error: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#342
  def after_finish; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#342
  def after_stop; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#342
  def before_start; end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#355
  def on_error; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#360
class Datadog::Tracing::SpanOperation::Events::AfterFinish < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/span_operation.rb#361
  def initialize; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#367
class Datadog::Tracing::SpanOperation::Events::AfterStop < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/span_operation.rb#368
  def initialize; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#374
class Datadog::Tracing::SpanOperation::Events::BeforeStart < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/span_operation.rb#375
  def initialize; end
end

# source://ddtrace//lib/datadog/tracing/span_operation.rb#340
Datadog::Tracing::SpanOperation::Events::DEFAULT_ON_ERROR = T.let(T.unsafe(nil), Proc)

# source://ddtrace//lib/datadog/tracing/span_operation.rb#381
class Datadog::Tracing::SpanOperation::Events::OnError
  # source://ddtrace//lib/datadog/tracing/span_operation.rb#382
  def initialize(default); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#409
  def publish(*args); end

  # source://ddtrace//lib/datadog/tracing/span_operation.rb#392
  def wrap_default; end
end

# source://ddtrace//lib/datadog/tracing/sync_writer.rb#20
class Datadog::Tracing::SyncWriter
  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#30
  def initialize(transport: T.unsafe(nil), transport_options: T.unsafe(nil), agent_settings: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#21
  def events; end

  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#50
  def stop; end

  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#21
  def transport; end

  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#42
  def write(trace); end

  private

  # source://ddtrace//lib/datadog/tracing/sync_writer.rb#57
  def flush_trace(trace); end
end

# source://ddtrace//lib/datadog/tracing/buffer.rb#106
class Datadog::Tracing::ThreadSafeTraceBuffer < ::Datadog::Core::Buffer::ThreadSafe
  include ::Datadog::Tracing::MeasuredBuffer
end

# source://ddtrace//lib/datadog/tracing/buffer.rb#126
Datadog::Tracing::TraceBuffer = Datadog::Tracing::CRubyTraceBuffer

# source://ddtrace//lib/datadog/tracing/trace_digest.rb#8
class Datadog::Tracing::TraceDigest
  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#25
  def initialize(span_id: T.unsafe(nil), span_name: T.unsafe(nil), span_resource: T.unsafe(nil), span_service: T.unsafe(nil), span_type: T.unsafe(nil), trace_hostname: T.unsafe(nil), trace_id: T.unsafe(nil), trace_name: T.unsafe(nil), trace_origin: T.unsafe(nil), trace_process_id: T.unsafe(nil), trace_resource: T.unsafe(nil), trace_runtime_id: T.unsafe(nil), trace_sampling_priority: T.unsafe(nil), trace_service: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def span_id; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def span_name; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def span_resource; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def span_service; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def span_type; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_hostname; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_id; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_name; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_origin; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_process_id; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_resource; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_runtime_id; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_sampling_priority; end

  # source://ddtrace//lib/datadog/tracing/trace_digest.rb#9
  def trace_service; end
end

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#27
class Datadog::Tracing::TraceOperation
  include ::Datadog::Tracing::Metadata::Tagging

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#54
  def initialize(agent_sample_rate: T.unsafe(nil), events: T.unsafe(nil), hostname: T.unsafe(nil), id: T.unsafe(nil), max_length: T.unsafe(nil), name: T.unsafe(nil), origin: T.unsafe(nil), parent_span_id: T.unsafe(nil), rate_limiter_rate: T.unsafe(nil), resource: T.unsafe(nil), rule_sample_rate: T.unsafe(nil), sample_rate: T.unsafe(nil), sampled: T.unsafe(nil), sampling_priority: T.unsafe(nil), service: T.unsafe(nil), tags: T.unsafe(nil), metrics: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#41
  def active_span; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#41
  def active_span_count; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def agent_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def agent_sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#174
  def build_span(op_name, events: T.unsafe(nil), on_error: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), start_time: T.unsafe(nil), tags: T.unsafe(nil), type: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#112
  def finished?; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#108
  def finished_span_count; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#229
  def flush!; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#268
  def fork_clone; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#104
  def full?; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def hostname; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def hostname=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#41
  def id; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#120
  def keep!; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#41
  def max_length; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#142
  def measure(op_name, events: T.unsafe(nil), on_error: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), start_time: T.unsafe(nil), tags: T.unsafe(nil), type: T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#130
  def name; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#48
  def name=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def origin; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def origin=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#41
  def parent_span_id; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def rate_limiter_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def rate_limiter_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#125
  def reject!; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#134
  def resource; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#48
  def resource=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def rule_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def rule_sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#48
  def sampled=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#116
  def sampled?; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def sampling_priority; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#32
  def sampling_priority=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#138
  def service; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#48
  def service=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#243
  def to_digest; end

  private

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#343
  def activate_span!(span_op); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#406
  def build_trace(spans, partial = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#353
  def deactivate_span!(span_op); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#339
  def events; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#375
  def finish_span(span, span_op, parent); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#339
  def root_span; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#400
  def set_root_span!(span); end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#361
  def start_span(span_op); end
end

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#30
Datadog::Tracing::TraceOperation::DEFAULT_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#291
class Datadog::Tracing::TraceOperation::Events
  include ::Datadog::Tracing::Events
  include ::Datadog::Tracing::Events::InstanceMethods
  extend ::Datadog::Tracing::Events::ClassMethods

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#299
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#294
  def span_before_start; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#294
  def span_finished; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#294
  def trace_finished; end
end

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#306
class Datadog::Tracing::TraceOperation::Events::SpanBeforeStart < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#307
  def initialize; end
end

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#313
class Datadog::Tracing::TraceOperation::Events::SpanFinished < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#314
  def initialize; end
end

# source://ddtrace//lib/datadog/tracing/trace_operation.rb#320
class Datadog::Tracing::TraceOperation::Events::TraceFinished < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#321
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#326
  def deactivate_trace_subscribed?; end

  # source://ddtrace//lib/datadog/tracing/trace_operation.rb#330
  def subscribe_deactivate_trace(&block); end
end

# source://ddtrace//lib/datadog/tracing/trace_segment.rb#15
class Datadog::Tracing::TraceSegment
  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#39
  def initialize(spans, agent_sample_rate: T.unsafe(nil), hostname: T.unsafe(nil), id: T.unsafe(nil), lang: T.unsafe(nil), name: T.unsafe(nil), origin: T.unsafe(nil), process_id: T.unsafe(nil), rate_limiter_rate: T.unsafe(nil), resource: T.unsafe(nil), root_span_id: T.unsafe(nil), rule_sample_rate: T.unsafe(nil), runtime_id: T.unsafe(nil), sample_rate: T.unsafe(nil), sampling_priority: T.unsafe(nil), service: T.unsafe(nil), tags: T.unsafe(nil), metrics: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def agent_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#86
  def any?; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#90
  def count; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#94
  def empty?; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def hostname; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def id; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#111
  def keep!; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def lang; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#98
  def length; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def name; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def origin; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def process_id; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def rate_limiter_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#120
  def reject!; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def resource; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def rule_sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def runtime_id; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def sample_rate; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#124
  def sampled?; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def sampling_priority; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def service; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#102
  def size; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#20
  def spans; end

  protected

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#131
  def meta; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#131
  def metrics; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#131
  def root_span_id; end

  private

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def agent_sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#153
  def agent_sample_rate_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def hostname=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#157
  def hostname_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def lang=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#161
  def lang_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def name=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#165
  def name_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def origin=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#169
  def origin_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def process_id=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#173
  def process_id_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def rate_limiter_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#177
  def rate_limiter_rate_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def resource=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#181
  def resource_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def rule_sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#185
  def rule_sample_rate_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def runtime_id=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#189
  def runtime_id_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def sample_rate=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#193
  def sample_rate_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def sampling_priority=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#197
  def sampling_priority_tag; end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#138
  def service=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/trace_segment.rb#201
  def service_tag; end
end

# source://ddtrace//lib/datadog/tracing/trace_segment.rb#16
Datadog::Tracing::TraceSegment::TAG_NAME = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/trace_segment.rb#17
Datadog::Tracing::TraceSegment::TAG_RESOURCE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/trace_segment.rb#18
Datadog::Tracing::TraceSegment::TAG_SERVICE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/datadog/tracing/tracer.rb#26
class Datadog::Tracing::Tracer
  # source://ddtrace//lib/datadog/tracing/tracer.rb#50
  def initialize(trace_flush: T.unsafe(nil), context_provider: T.unsafe(nil), default_service: T.unsafe(nil), enabled: T.unsafe(nil), sampler: T.unsafe(nil), tags: T.unsafe(nil), writer: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#229
  def active_correlation(key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#218
  def active_span(key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#207
  def active_trace(key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#247
  def continue_trace!(digest, key = T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def default_service; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def default_service=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def enabled; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def enabled=(_arg0); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#27
  def provider; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#27
  def sampler; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#195
  def set_tags(tags); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#295
  def shutdown!; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#27
  def tags; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#123
  def trace(name, continue_from: T.unsafe(nil), on_error: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), start_time: T.unsafe(nil), tags: T.unsafe(nil), type: T.unsafe(nil), span_type: T.unsafe(nil), _context: T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#266
  def trace_completed; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#27
  def trace_flush; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def writer; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#33
  def writer=(_arg0); end

  private

  # source://ddtrace//lib/datadog/tracing/tracer.rb#335
  def bind_trace_events!(trace_op); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#405
  def build_span_events(events = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#315
  def build_trace(digest = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#311
  def call_context(key = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#469
  def flush_trace(trace_op); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#428
  def manual_trace_activation!(context, trace); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#416
  def resolve_tags(tags); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#460
  def sample_trace(trace_op); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#492
  def skip_trace(name); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#360
  def start_span(name, continue_from: T.unsafe(nil), on_error: T.unsafe(nil), resource: T.unsafe(nil), service: T.unsafe(nil), start_time: T.unsafe(nil), tags: T.unsafe(nil), type: T.unsafe(nil), _trace: T.unsafe(nil), &block); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#349
  def start_trace(continue_from: T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#441
  def subscribe_trace_deactivation!(context, trace, original_trace); end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#480
  def write(trace); end
end

# source://ddtrace//lib/datadog/tracing/tracer.rb#271
class Datadog::Tracing::Tracer::TraceCompleted < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/tracer.rb#272
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/tracer.rb#279
  def publish(trace); end
end

# source://ddtrace//lib/datadog/tracing/workers.rb#10
module Datadog::Tracing::Workers; end

# source://ddtrace//lib/datadog/tracing/workers.rb#15
class Datadog::Tracing::Workers::AsyncTransport
  # source://ddtrace//lib/datadog/tracing/workers.rb#26
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/workers.rb#49
  def callback_traces; end

  # source://ddtrace//lib/datadog/tracing/workers.rb#101
  def enqueue_trace(trace); end

  # source://ddtrace//lib/datadog/tracing/workers.rb#49
  def flush_data; end

  # source://ddtrace//lib/datadog/tracing/workers.rb#95
  def join; end

  # source://ddtrace//lib/datadog/tracing/workers.rb#67
  def start; end

  # source://ddtrace//lib/datadog/tracing/workers.rb#81
  def stop; end

  # source://ddtrace//lib/datadog/tracing/workers.rb#23
  def trace_buffer; end

  private

  # source://ddtrace//lib/datadog/tracing/workers.rb#111
  def perform; end
end

# source://ddtrace//lib/datadog/tracing/workers.rb#20
Datadog::Tracing::Workers::AsyncTransport::BACK_OFF_MAX = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/workers.rb#19
Datadog::Tracing::Workers::AsyncTransport::BACK_OFF_RATIO = T.let(T.unsafe(nil), Float)

# source://ddtrace//lib/datadog/tracing/workers.rb#16
Datadog::Tracing::Workers::AsyncTransport::DEFAULT_BUFFER_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/workers.rb#17
Datadog::Tracing::Workers::AsyncTransport::DEFAULT_FLUSH_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/workers.rb#18
Datadog::Tracing::Workers::AsyncTransport::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/workers.rb#21
Datadog::Tracing::Workers::AsyncTransport::SHUTDOWN_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/datadog/tracing/writer.rb#16
class Datadog::Tracing::Writer
  # source://ddtrace//lib/datadog/tracing/writer.rb#22
  def initialize(options = T.unsafe(nil)); end

  # source://ddtrace//lib/datadog/tracing/writer.rb#17
  def events; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#110
  def send_spans(traces, transport); end

  # source://ddtrace//lib/datadog/tracing/writer.rb#57
  def start; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#154
  def stats; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#91
  def stop; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#17
  def transport; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#17
  def worker; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#128
  def write(trace); end

  private

  # source://ddtrace//lib/datadog/tracing/writer.rb#73
  def start_worker; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#95
  def stop_worker; end
end

# source://ddtrace//lib/datadog/tracing/writer.rb#162
class Datadog::Tracing::Writer::Events
  # source://ddtrace//lib/datadog/tracing/writer.rb#166
  def initialize; end

  # source://ddtrace//lib/datadog/tracing/writer.rb#163
  def after_send; end
end

# source://ddtrace//lib/datadog/tracing/writer.rb#172
class Datadog::Tracing::Writer::Events::AfterSend < ::Datadog::Tracing::Event
  # source://ddtrace//lib/datadog/tracing/writer.rb#173
  def initialize; end
end

# source://ddtrace//lib/ddtrace/transport/ext.rb#4
module Datadog::Transport; end

# source://ddtrace//lib/ddtrace/transport/ext.rb#6
module Datadog::Transport::Ext; end

# source://ddtrace//lib/ddtrace/transport/ext.rb#8
module Datadog::Transport::Ext::HTTP; end

# source://ddtrace//lib/ddtrace/transport/ext.rb#9
Datadog::Transport::Ext::HTTP::ADAPTER = T.let(T.unsafe(nil), Symbol)

# source://ddtrace//lib/ddtrace/transport/ext.rb#10
Datadog::Transport::Ext::HTTP::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#11
Datadog::Transport::Ext::HTTP::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/ext.rb#12
Datadog::Transport::Ext::HTTP::DEFAULT_TIMEOUT_SECONDS = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/ext.rb#14
Datadog::Transport::Ext::HTTP::HEADER_CONTAINER_ID = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#15
Datadog::Transport::Ext::HTTP::HEADER_DD_API_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#16
Datadog::Transport::Ext::HTTP::HEADER_META_LANG = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#18
Datadog::Transport::Ext::HTTP::HEADER_META_LANG_INTERPRETER = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#17
Datadog::Transport::Ext::HTTP::HEADER_META_LANG_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#19
Datadog::Transport::Ext::HTTP::HEADER_META_TRACER_VERSION = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#23
module Datadog::Transport::Ext::Test; end

# source://ddtrace//lib/ddtrace/transport/ext.rb#24
Datadog::Transport::Ext::Test::ADAPTER = T.let(T.unsafe(nil), Symbol)

# source://ddtrace//lib/ddtrace/transport/ext.rb#28
module Datadog::Transport::Ext::UnixSocket; end

# source://ddtrace//lib/ddtrace/transport/ext.rb#29
Datadog::Transport::Ext::UnixSocket::ADAPTER = T.let(T.unsafe(nil), Symbol)

# source://ddtrace//lib/ddtrace/transport/ext.rb#30
Datadog::Transport::Ext::UnixSocket::DEFAULT_PATH = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/ext.rb#31
Datadog::Transport::Ext::UnixSocket::DEFAULT_TIMEOUT_SECONDS = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#8
module Datadog::Transport::HTTP
  include ::Kernel

  private

  # source://ddtrace//lib/ddtrace/transport/http.rb#40
  def default(agent_settings: T.unsafe(nil), **options); end

  # source://ddtrace//lib/ddtrace/transport/http.rb#81
  def default_adapter; end

  # source://ddtrace//lib/ddtrace/transport/http.rb#68
  def default_headers; end

  # source://ddtrace//lib/ddtrace/transport/http.rb#85
  def default_hostname(logger: T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http.rb#94
  def default_port(logger: T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http.rb#103
  def default_url(logger: T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http.rb#34
  def new(&block); end

  class << self
    # source://ddtrace//lib/ddtrace/transport/http.rb#40
    def default(agent_settings: T.unsafe(nil), **options); end

    # source://ddtrace//lib/ddtrace/transport/http.rb#81
    def default_adapter; end

    # source://ddtrace//lib/ddtrace/transport/http.rb#68
    def default_headers; end

    # source://ddtrace//lib/ddtrace/transport/http.rb#85
    def default_hostname(logger: T.unsafe(nil)); end

    # source://ddtrace//lib/ddtrace/transport/http.rb#94
    def default_port(logger: T.unsafe(nil)); end

    # source://ddtrace//lib/ddtrace/transport/http.rb#103
    def default_url(logger: T.unsafe(nil)); end

    # source://ddtrace//lib/ddtrace/transport/http.rb#34
    def new(&block); end
  end
end

# source://ddtrace//lib/ddtrace/transport/http/api/fallbacks.rb#6
module Datadog::Transport::HTTP::API
  private

  # source://ddtrace//lib/ddtrace/transport/http/api.rb#21
  def defaults; end

  class << self
    # source://ddtrace//lib/ddtrace/transport/http/api.rb#21
    def defaults; end
  end
end

# source://ddtrace//lib/ddtrace/transport/http/api/endpoint.rb#10
class Datadog::Transport::HTTP::API::Endpoint
  # source://ddtrace//lib/ddtrace/transport/http/api/endpoint.rb#15
  def initialize(verb, path); end

  # source://ddtrace//lib/ddtrace/transport/http/api/endpoint.rb#20
  def call(env); end

  # source://ddtrace//lib/ddtrace/transport/http/api/endpoint.rb#11
  def path; end

  # source://ddtrace//lib/ddtrace/transport/http/api/endpoint.rb#11
  def verb; end
end

# source://ddtrace//lib/ddtrace/transport/http/api/fallbacks.rb#8
module Datadog::Transport::HTTP::API::Fallbacks
  # source://ddtrace//lib/ddtrace/transport/http/api/fallbacks.rb#17
  def add_fallbacks!(fallbacks); end

  # source://ddtrace//lib/ddtrace/transport/http/api/fallbacks.rb#9
  def fallbacks; end

  # source://ddtrace//lib/ddtrace/transport/http/api/fallbacks.rb#13
  def with_fallbacks(fallbacks); end
end

# source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#8
class Datadog::Transport::HTTP::API::Instance
  include ::Datadog::Transport::HTTP::Traces::API::Instance

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#14
  def initialize(spec, adapter, options = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#9
  def adapter; end

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#24
  def call(env); end

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#20
  def encoder; end

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#9
  def headers; end

  # source://ddtrace//lib/ddtrace/transport/http/api/instance.rb#9
  def spec; end
end

# source://ddtrace//lib/ddtrace/transport/http/api/map.rb#10
class Datadog::Transport::HTTP::API::Map < ::Hash
  include ::Datadog::Transport::HTTP::API::Fallbacks
end

# source://ddtrace//lib/ddtrace/transport/http/api/spec.rb#9
class Datadog::Transport::HTTP::API::Spec
  include ::Datadog::Transport::HTTP::Traces::API::Spec

  # source://ddtrace//lib/ddtrace/transport/http/api/spec.rb#10
  def initialize; end
end

# source://ddtrace//lib/ddtrace/transport/http/api.rb#17
Datadog::Transport::HTTP::API::V3 = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/api.rb#16
Datadog::Transport::HTTP::API::V4 = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#9
module Datadog::Transport::HTTP::Adapters; end

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#11
class Datadog::Transport::HTTP::Adapters::Net
  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#21
  def initialize(hostname = T.unsafe(nil), port = T.unsafe(nil), **options); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#49
  def call(env); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#12
  def hostname; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#37
  def open(&block); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#12
  def port; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#57
  def post(env); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#12
  def ssl; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#12
  def timeout; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#80
  def url; end

  class << self
    # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#28
    def build(agent_settings); end
  end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#18
Datadog::Transport::HTTP::Adapters::Net::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#98
class Datadog::Transport::HTTP::Adapters::Net::Response
  include ::Datadog::Transport::Response

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#103
  def initialize(http_response); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#137
  def client_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#113
  def code; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#101
  def http_response; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#149
  def inspect; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#131
  def not_found?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#119
  def ok?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#107
  def payload; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#143
  def server_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#125
  def unsupported?; end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#85
class Datadog::Transport::HTTP::Adapters::Net::UnknownHTTPMethod < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#88
  def initialize(verb); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#92
  def message; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/net.rb#86
  def verb; end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/registry.rb#8
class Datadog::Transport::HTTP::Adapters::Registry
  # source://ddtrace//lib/ddtrace/transport/http/adapters/registry.rb#9
  def initialize; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/registry.rb#13
  def get(name); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/registry.rb#17
  def set(klass, name = T.unsafe(nil)); end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#10
class Datadog::Transport::HTTP::Adapters::Test
  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#17
  def initialize(buffer = T.unsafe(nil), **options); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#32
  def add_request(env); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#11
  def buffer; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#28
  def buffer?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#23
  def call(env); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#36
  def set_status!(status); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#11
  def status; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#40
  def url; end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#43
class Datadog::Transport::HTTP::Adapters::Test::Response
  include ::Datadog::Transport::Response

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#50
  def initialize(code, body = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#46
  def body; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#71
  def client_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#46
  def code; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#79
  def inspect; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#67
  def not_found?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#59
  def ok?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#55
  def payload; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#75
  def server_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/test.rb#63
  def unsupported?; end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#12
class Datadog::Transport::HTTP::Adapters::UnixSocket < ::Datadog::Transport::HTTP::Adapters::Net
  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#20
  def initialize(uds_path = T.unsafe(nil), **options); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#13
  def filepath; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#32
  def open(&block); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#13
  def timeout; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#13
  def uds_path; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#43
  def url; end

  class << self
    # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#25
    def build(agent_settings); end
  end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#48
class Datadog::Transport::HTTP::Adapters::UnixSocket::HTTP < ::Net::HTTP
  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#57
  def initialize(uds_path, options = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#65
  def connect; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#51
  def filepath; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#51
  def uds_path; end

  # source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#51
  def unix_socket; end
end

# source://ddtrace//lib/ddtrace/transport/http/adapters/unix_socket.rb#49
Datadog::Transport::HTTP::Adapters::UnixSocket::HTTP::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#13
class Datadog::Transport::HTTP::Builder
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#23
  def initialize; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#38
  def adapter(config, *args, **kwargs); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#65
  def api(key, spec, options = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#119
  def api_instance_class; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#16
  def api_options; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#16
  def apis; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#16
  def default_adapter; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#16
  def default_api; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#78
  def default_api=(key); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#16
  def default_headers; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#55
  def headers(values = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#91
  def to_api_instances; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#84
  def to_transport; end
end

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#150
class Datadog::Transport::HTTP::Builder::NoAdapterForApiError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#153
  def initialize(key); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#151
  def key; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#157
  def message; end
end

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#163
class Datadog::Transport::HTTP::Builder::NoApisError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#164
  def message; end
end

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#170
class Datadog::Transport::HTTP::Builder::NoDefaultApiError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#171
  def message; end
end

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#14
Datadog::Transport::HTTP::Builder::REGISTRY = T.let(T.unsafe(nil), Datadog::Transport::HTTP::Adapters::Registry)

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#137
class Datadog::Transport::HTTP::Builder::UnknownAdapterError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#140
  def initialize(type); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#144
  def message; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#138
  def type; end
end

# source://ddtrace//lib/ddtrace/transport/http/builder.rb#124
class Datadog::Transport::HTTP::Builder::UnknownApiError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#127
  def initialize(key); end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#125
  def key; end

  # source://ddtrace//lib/ddtrace/transport/http/builder.rb#131
  def message; end
end

# source://ddtrace//lib/ddtrace/transport/http/client.rb#10
class Datadog::Transport::HTTP::Client
  include ::Datadog::Transport::HTTP::Statistics
  include ::Datadog::Transport::Statistics
  include ::Datadog::Transport::HTTP::Statistics::InstanceMethods
  include ::Datadog::Transport::HTTP::Traces::Client

  # source://ddtrace//lib/ddtrace/transport/http/client.rb#15
  def initialize(api); end

  # source://ddtrace//lib/ddtrace/transport/http/client.rb#13
  def api; end

  # source://ddtrace//lib/ddtrace/transport/http/client.rb#48
  def build_env(request); end

  # source://ddtrace//lib/ddtrace/transport/http/client.rb#19
  def send_request(request, &block); end
end

# source://ddtrace//lib/ddtrace/transport/http.rb#26
Datadog::Transport::HTTP::DO_NOT_USE_ENVIRONMENT_AGENT_SETTINGS = T.let(T.unsafe(nil), Datadog::Core::Configuration::AgentSettingsResolver::AgentSettings)

# source://ddtrace//lib/ddtrace/transport/http/env.rb#7
class Datadog::Transport::HTTP::Env < ::Hash
  # source://ddtrace//lib/ddtrace/transport/http/env.rb#11
  def initialize(request, options = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#32
  def body; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#36
  def body=(value); end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#48
  def form; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#52
  def form=(value); end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#40
  def headers; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#44
  def headers=(value); end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#24
  def path; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#28
  def path=(value); end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#8
  def request; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#16
  def verb; end

  # source://ddtrace//lib/ddtrace/transport/http/env.rb#20
  def verb=(value); end
end

# source://ddtrace//lib/ddtrace/transport/http/response.rb#12
module Datadog::Transport::HTTP::Response
  # source://ddtrace//lib/ddtrace/transport/http/response.rb#13
  def initialize(http_response); end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#43
  def client_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#52
  def code; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#23
  def internal_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#38
  def not_found?; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#33
  def ok?; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#18
  def payload; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#48
  def server_error?; end

  # source://ddtrace//lib/ddtrace/transport/http/response.rb#28
  def unsupported?; end
end

# source://ddtrace//lib/ddtrace/transport/http/statistics.rb#9
module Datadog::Transport::HTTP::Statistics
  include ::Datadog::Transport::Statistics
  include ::Datadog::Transport::HTTP::Statistics::InstanceMethods

  class << self
    # source://ddtrace//lib/ddtrace/transport/http/statistics.rb#10
    def included(base); end
  end
end

# source://ddtrace//lib/ddtrace/transport/http/statistics.rb#16
module Datadog::Transport::HTTP::Statistics::InstanceMethods
  # source://ddtrace//lib/ddtrace/transport/http/statistics.rb#18
  def metrics_for_response(response); end

  private

  # source://ddtrace//lib/ddtrace/transport/http/statistics.rb#34
  def metrics_tag_value(status_code); end
end

# source://ddtrace//lib/ddtrace/transport/http/statistics.rb#32
Datadog::Transport::HTTP::Statistics::InstanceMethods::STATUS_CODE_200 = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#15
module Datadog::Transport::HTTP::Traces; end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#37
module Datadog::Transport::HTTP::Traces::API; end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#95
class Datadog::Transport::HTTP::Traces::API::Endpoint < ::Datadog::Transport::HTTP::API::Endpoint
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#103
  def initialize(path, encoder, options = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#113
  def call(env, &block); end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#100
  def encoder; end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#109
  def service_rates?; end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#96
Datadog::Transport::HTTP::Traces::API::Endpoint::HEADER_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#97
Datadog::Transport::HTTP::Traces::API::Endpoint::HEADER_TRACE_COUNT = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#98
Datadog::Transport::HTTP::Traces::API::Endpoint::SERVICE_RATE_KEY = T.let(T.unsafe(nil), String)

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#71
module Datadog::Transport::HTTP::Traces::API::Instance
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#72
  def send_traces(env); end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#81
class Datadog::Transport::HTTP::Traces::API::Instance::TracesNotSupportedError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#84
  def initialize(spec); end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#88
  def message; end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#82
  def spec; end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#39
module Datadog::Transport::HTTP::Traces::API::Spec
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#52
  def encoder; end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#46
  def send_traces(env, &block); end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#40
  def traces; end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#42
  def traces=(endpoint); end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#57
class Datadog::Transport::HTTP::Traces::API::Spec::NoTraceEndpointDefinedError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#60
  def initialize(spec); end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#64
  def message; end

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#58
  def spec; end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#29
module Datadog::Transport::HTTP::Traces::Client
  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#30
  def send_payload(request); end
end

# source://ddtrace//lib/ddtrace/transport/http/traces.rb#17
class Datadog::Transport::HTTP::Traces::Response
  include ::Datadog::Transport::HTTP::Response
  include ::Datadog::Transport::Traces::Response

  # source://ddtrace//lib/ddtrace/transport/http/traces.rb#21
  def initialize(http_response, options = T.unsafe(nil)); end
end

# source://ddtrace//lib/ddtrace/transport/response.rb#44
class Datadog::Transport::InternalErrorResponse
  include ::Datadog::Transport::Response

  # source://ddtrace//lib/ddtrace/transport/response.rb#49
  def initialize(error); end

  # source://ddtrace//lib/ddtrace/transport/response.rb#47
  def error; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#57
  def inspect; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#53
  def internal_error?; end
end

# source://ddtrace//lib/ddtrace/transport/parcel.rb#7
module Datadog::Transport::Parcel
  include ::Kernel

  # source://ddtrace//lib/ddtrace/transport/parcel.rb#13
  def initialize(data); end

  # source://ddtrace//lib/ddtrace/transport/parcel.rb#10
  def data; end

  # source://ddtrace//lib/ddtrace/transport/parcel.rb#17
  def encode_with(encoder); end
end

# source://ddtrace//lib/ddtrace/transport/request.rb#6
class Datadog::Transport::Request
  # source://ddtrace//lib/ddtrace/transport/request.rb#10
  def initialize(parcel); end

  # source://ddtrace//lib/ddtrace/transport/request.rb#7
  def parcel; end
end

# source://ddtrace//lib/ddtrace/transport/response.rb#6
module Datadog::Transport::Response
  # source://ddtrace//lib/ddtrace/transport/response.rb#23
  def client_error?; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#35
  def inspect; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#31
  def internal_error?; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#19
  def not_found?; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#11
  def ok?; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#7
  def payload; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#27
  def server_error?; end

  # source://ddtrace//lib/ddtrace/transport/response.rb#15
  def unsupported?; end
end

# source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#38
class Datadog::Transport::SerializableSpan
  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#42
  def initialize(span); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#113
  def duration_nano(duration); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#39
  def span; end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#107
  def time_nano(time); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#101
  def to_json(*args); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#55
  def to_msgpack(packer = T.unsafe(nil)); end
end

# source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#9
class Datadog::Transport::SerializableTrace
  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#13
  def initialize(trace); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#32
  def to_json(*args); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#25
  def to_msgpack(packer = T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/serializable_trace.rb#10
  def trace; end
end

# source://ddtrace//lib/ddtrace/transport/statistics.rb#9
module Datadog::Transport::Statistics
  # source://ddtrace//lib/ddtrace/transport/statistics.rb#48
  def metrics_for_exception(_exception); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#31
  def metrics_for_response(response); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#10
  def stats; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#38
  def update_stats_from_exception!(exception); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#14
  def update_stats_from_response!(response); end
end

# source://ddtrace//lib/ddtrace/transport/statistics.rb#53
class Datadog::Transport::Statistics::Counts
  # source://ddtrace//lib/ddtrace/transport/statistics.rb#61
  def initialize; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def client_error; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def client_error=(_arg0); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def consecutive_errors; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def consecutive_errors=(_arg0); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def internal_error; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def internal_error=(_arg0); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#65
  def reset!; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def server_error; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def server_error=(_arg0); end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def success; end

  # source://ddtrace//lib/ddtrace/transport/statistics.rb#54
  def success=(_arg0); end
end

# source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#12
class Datadog::Transport::TraceFormatter
  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#21
  def initialize(trace); end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#27
  def format!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#13
  def root_span; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#13
  def trace; end

  protected

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#58
  def set_resource!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#67
  def set_trace_tags!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#77
  def tag_agent_sample_rate!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#86
  def tag_hostname!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#95
  def tag_lang!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#104
  def tag_origin!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#113
  def tag_process_id!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#122
  def tag_rate_limiter_rate!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#131
  def tag_rule_sample_rate!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#140
  def tag_runtime_id!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#149
  def tag_sample_rate!; end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#158
  def tag_sampling_priority!; end

  private

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#173
  def find_root_span(trace); end

  # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#169
  def partial?; end

  class << self
    # source://ddtrace//lib/ddtrace/transport/trace_formatter.rb#17
    def format!(trace); end
  end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#11
module Datadog::Transport::Traces; end

# source://ddtrace//lib/ddtrace/transport/traces.rb#38
class Datadog::Transport::Traces::Chunker
  # source://ddtrace//lib/ddtrace/transport/traces.rb#52
  def initialize(encoder, max_size: T.unsafe(nil)); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#63
  def encode_in_chunks(traces); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#45
  def encoder; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#45
  def max_size; end

  private

  # source://ddtrace//lib/ddtrace/transport/traces.rb#78
  def encode_one(trace); end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#43
Datadog::Transport::Traces::Chunker::DEFAULT_MAX_PAYLOAD_SIZE = T.let(T.unsafe(nil), Integer)

# source://ddtrace//lib/ddtrace/transport/traces.rb#13
class Datadog::Transport::Traces::EncodedParcel
  include ::Datadog::Transport::Parcel

  # source://ddtrace//lib/ddtrace/transport/traces.rb#18
  def initialize(data, trace_count); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#23
  def count; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#16
  def trace_count; end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#94
module Datadog::Transport::Traces::Encoder
  private

  # source://ddtrace//lib/ddtrace/transport/traces.rb#97
  def encode_trace(encoder, trace); end

  class << self
    # source://ddtrace//lib/ddtrace/transport/traces.rb#97
    def encode_trace(encoder, trace); end
  end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#29
class Datadog::Transport::Traces::Request < ::Datadog::Transport::Request; end

# source://ddtrace//lib/ddtrace/transport/traces.rb#33
module Datadog::Transport::Traces::Response
  # source://ddtrace//lib/ddtrace/transport/traces.rb#34
  def service_rates; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#34
  def trace_count; end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#114
class Datadog::Transport::Traces::Transport
  # source://ddtrace//lib/ddtrace/transport/traces.rb#117
  def initialize(apis, default_api); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#115
  def apis; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#115
  def client; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#162
  def current_api; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#115
  def current_api_id; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#115
  def default_api; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#124
  def send_traces(traces); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#158
  def stats; end

  private

  # source://ddtrace//lib/ddtrace/transport/traces.rb#181
  def change_api!(api_id); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#174
  def downgrade!; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#168
  def downgrade?(response); end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#202
class Datadog::Transport::Traces::Transport::NoDowngradeAvailableError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/traces.rb#205
  def initialize(version); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#209
  def message; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#203
  def version; end
end

# source://ddtrace//lib/ddtrace/transport/traces.rb#189
class Datadog::Transport::Traces::Transport::UnknownApiVersionError < ::StandardError
  # source://ddtrace//lib/ddtrace/transport/traces.rb#192
  def initialize(version); end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#196
  def message; end

  # source://ddtrace//lib/ddtrace/transport/traces.rb#190
  def version; end
end
