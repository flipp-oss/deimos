# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mail` gem.
# Please instead update this file by running `bin/tapioca gem mail`.

# source://mail//lib/mail.rb#3
module Mail
  class << self
    # source://mail//lib/mail/mail.rb#163
    def all(*args, &block); end

    # source://mail//lib/mail/mail.rb#183
    def connection(&block); end

    # source://mail//lib/mail/mail.rb#98
    def defaults(&block); end

    # source://mail//lib/mail/mail.rb#174
    def delete_all(*args, &block); end

    # source://mail//lib/mail/mail.rb#131
    def deliver(*args, &block); end

    # source://mail//lib/mail/mail.rb#103
    def delivery_method; end

    # source://mail//lib/mail.rb#35
    def eager_autoload!; end

    # source://mail//lib/mail/mail.rb#139
    def find(*args, &block); end

    # source://mail//lib/mail/mail.rb#145
    def find_and_delete(*args, &block); end

    # source://mail//lib/mail/mail.rb#151
    def first(*args, &block); end

    # source://mail//lib/mail/mail.rb#233
    def inform_interceptors(mail); end

    # source://mail//lib/mail/mail.rb#227
    def inform_observers(mail); end

    # source://mail//lib/mail/mail.rb#157
    def last(*args, &block); end

    # source://mail//lib/mail/mail.rb#50
    def new(*args, &block); end

    # source://mail//lib/mail/mail.rb#243
    def random_tag; end

    # source://mail//lib/mail/mail.rb#168
    def read(filename); end

    # source://mail//lib/mail/mail.rb#179
    def read_from_string(mail_as_string); end

    # source://mail//lib/mail.rb#23
    def register_autoload(name, path); end

    # source://mail//lib/mail/mail.rb#215
    def register_interceptor(interceptor); end

    # source://mail//lib/mail/mail.rb#196
    def register_observer(observer); end

    # source://mail//lib/mail/mail.rb#108
    def retriever_method; end

    # source://mail//lib/mail/mail.rb#252
    def something_random; end

    # source://mail//lib/mail/mail.rb#256
    def uniq; end

    # source://mail//lib/mail/mail.rb#223
    def unregister_interceptor(interceptor); end

    # source://mail//lib/mail/mail.rb#204
    def unregister_observer(observer); end
  end
end

# source://mail//lib/mail/elements/address.rb#24
class Mail::Address
  # source://mail//lib/mail/elements/address.rb#25
  def initialize(value = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#65
  def address(output_type = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#79
  def address=(value); end

  # source://mail//lib/mail/elements/address.rb#132
  def comments; end

  # source://mail//lib/mail/elements/address.rb#173
  def decoded; end

  # source://mail//lib/mail/elements/address.rb#87
  def display_name(output_type = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#99
  def display_name=(str); end

  # source://mail//lib/mail/elements/address.rb#118
  def domain(output_type = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#169
  def encoded; end

  # source://mail//lib/mail/elements/address.rb#47
  def format(output_type = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#177
  def group; end

  # source://mail//lib/mail/elements/address.rb#164
  def inspect; end

  # source://mail//lib/mail/elements/address.rb#108
  def local(output_type = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#147
  def name; end

  # source://mail//lib/mail/elements/address.rb#36
  def raw; end

  # source://mail//lib/mail/elements/address.rb#156
  def to_s; end

  private

  # source://mail//lib/mail/elements/address.rb#237
  def format_comments; end

  # source://mail//lib/mail/elements/address.rb#254
  def get_comments; end

  # source://mail//lib/mail/elements/address.rb#218
  def get_display_name; end

  # source://mail//lib/mail/elements/address.rb#250
  def get_domain; end

  # source://mail//lib/mail/elements/address.rb#246
  def get_local; end

  # source://mail//lib/mail/elements/address.rb#227
  def get_name; end

  # source://mail//lib/mail/elements/address.rb#183
  def parse(value = T.unsafe(nil)); end

  # source://mail//lib/mail/elements/address.rb#198
  def strip_all_comments(string); end

  # source://mail//lib/mail/elements/address.rb#207
  def strip_domain_comments(value); end
end

# source://mail//lib/mail/fields/common_address_field.rb#6
class Mail::AddressContainer < ::Array
  # source://mail//lib/mail/fields/common_address_field.rb#7
  def initialize(field, list = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/common_address_field.rb#12
  def <<(address); end
end

# source://mail//lib/mail/elements/address_list.rb#6
class Mail::AddressList
  # source://mail//lib/mail/elements/address_list.rb#24
  def initialize(string); end

  # source://mail//lib/mail/elements/address_list.rb#7
  def addresses; end

  # source://mail//lib/mail/elements/address_list.rb#30
  def addresses_grouped_by_group; end

  # source://mail//lib/mail/elements/address_list.rb#7
  def group_names; end
end

# source://mail//lib/mail/attachments_list.rb#3
class Mail::AttachmentsList < ::Array
  # source://mail//lib/mail/attachments_list.rb#5
  def initialize(parts_list); end

  # source://mail//lib/mail/attachments_list.rb#32
  def [](index_value); end

  # source://mail//lib/mail/attachments_list.rb#40
  def []=(name, value); end

  # source://mail//lib/mail/attachments_list.rb#91
  def guess_encoding; end

  # source://mail//lib/mail/attachments_list.rb#20
  def inline; end

  # source://mail//lib/mail/attachments_list.rb#99
  def set_mime_type(filename); end
end

# source://mail//lib/mail/fields/bcc_field.rb#31
class Mail::BccField < ::Mail::CommonAddressField
  # source://mail//lib/mail/fields/bcc_field.rb#36
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/bcc_field.rb#42
  def encoded; end

  # source://mail//lib/mail/fields/bcc_field.rb#34
  def include_in_headers; end

  # source://mail//lib/mail/fields/bcc_field.rb#34
  def include_in_headers=(_arg0); end
end

# source://mail//lib/mail/fields/bcc_field.rb#32
Mail::BccField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/body.rb#28
class Mail::Body
  # source://mail//lib/mail/body.rb#30
  def initialize(string = T.unsafe(nil)); end

  # source://mail//lib/mail/body.rb#233
  def <<(val); end

  # source://mail//lib/mail/body.rb#72
  def ==(other); end

  # source://mail//lib/mail/body.rb#90
  def =~(regexp); end

  # source://mail//lib/mail/body.rb#253
  def ascii_only?; end

  # source://mail//lib/mail/body.rb#226
  def boundary; end

  # source://mail//lib/mail/body.rb#226
  def boundary=(_arg0); end

  # source://mail//lib/mail/body.rb#216
  def charset; end

  # source://mail//lib/mail/body.rb#216
  def charset=(_arg0); end

  # source://mail//lib/mail/body.rb#179
  def decoded; end

  # source://mail//lib/mail/body.rb#264
  def default_encoding; end

  # source://mail//lib/mail/body.rb#260
  def empty?; end

  # source://mail//lib/mail/body.rb#149
  def encoded(transfer_encoding = T.unsafe(nil)); end

  # source://mail//lib/mail/body.rb#191
  def encoding(val = T.unsafe(nil)); end

  # source://mail//lib/mail/body.rb#199
  def encoding=(val); end

  # source://mail//lib/mail/body.rb#222
  def epilogue; end

  # source://mail//lib/mail/body.rb#222
  def epilogue=(_arg0); end

  # source://mail//lib/mail/body.rb#118
  def include?(other); end

  # source://mail//lib/mail/body.rb#53
  def init_with(coder); end

  # source://mail//lib/mail/body.rb#104
  def match(regexp); end

  # source://mail//lib/mail/body.rb#229
  def multipart?; end

  # source://mail//lib/mail/body.rb#141
  def negotiate_best_encoding(message_encoding, allowed_encodings = T.unsafe(nil)); end

  # source://mail//lib/mail/body.rb#213
  def parts; end

  # source://mail//lib/mail/body.rb#219
  def preamble; end

  # source://mail//lib/mail/body.rb#219
  def preamble=(_arg0); end

  # source://mail//lib/mail/body.rb#210
  def raw_source; end

  # source://mail//lib/mail/body.rb#125
  def set_sort_order(order); end

  # source://mail//lib/mail/body.rb#133
  def sort_parts!; end

  # source://mail//lib/mail/body.rb#241
  def split!(boundary); end

  # source://mail//lib/mail/body.rb#187
  def to_s; end

  private

  # source://mail//lib/mail/body.rb#293
  def crlf_boundary; end

  # source://mail//lib/mail/body.rb#297
  def end_boundary; end

  # source://mail//lib/mail/body.rb#271
  def extract_parts; end

  # source://mail//lib/mail/body.rb#301
  def set_charset; end
end

# source://mail//lib/mail/fields/cc_field.rb#31
class Mail::CcField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/cc_field.rb#32
Mail::CcField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/check_delivery_params.rb#5
module Mail::CheckDeliveryParams
  class << self
    # source://mail//lib/mail/check_delivery_params.rb#10
    def _deprecated_check(mail); end

    # source://mail//lib/mail/check_delivery_params.rb#32
    def _deprecated_check_addr(addr_name, addr); end

    # source://mail//lib/mail/check_delivery_params.rb#18
    def _deprecated_check_from(addr); end

    # source://mail//lib/mail/check_delivery_params.rb#53
    def _deprecated_check_message(message); end

    # source://mail//lib/mail/check_delivery_params.rb#24
    def _deprecated_check_to(addrs); end

    # source://mail//lib/mail/check_delivery_params.rb#38
    def _deprecated_validate_smtp_addr(addr); end

    def check(*args, &block); end
    def check_addr(*args, &block); end
    def check_from(*args, &block); end
    def check_message(*args, &block); end
    def check_to(*args, &block); end
    def validate_smtp_addr(*args, &block); end
  end
end

# source://mail//lib/mail/fields/comments_field.rb#29
class Mail::CommentsField < ::Mail::NamedUnstructuredField; end

# source://mail//lib/mail/fields/comments_field.rb#30
Mail::CommentsField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/common_address_field.rb#17
class Mail::CommonAddressField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/common_address_field.rb#22
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/common_address_field.rb#94
  def <<(val); end

  # source://mail//lib/mail/fields/common_address_field.rb#41
  def address; end

  # source://mail//lib/mail/fields/common_address_field.rb#46
  def addresses; end

  # source://mail//lib/mail/fields/common_address_field.rb#64
  def addrs; end

  # source://mail//lib/mail/fields/common_address_field.rb#80
  def decoded_group_addresses; end

  # source://mail//lib/mail/fields/common_address_field.rb#37
  def default; end

  # source://mail//lib/mail/fields/common_address_field.rb#58
  def display_names; end

  # source://mail//lib/mail/fields/common_address_field.rb#31
  def each; end

  # source://mail//lib/mail/fields/common_address_field.rb#26
  def element; end

  # source://mail//lib/mail/fields/common_address_field.rb#105
  def encode_if_needed(val, val_charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/common_address_field.rb#85
  def encoded_group_addresses; end

  # source://mail//lib/mail/fields/common_address_field.rb#52
  def formatted; end

  # source://mail//lib/mail/fields/common_address_field.rb#75
  def group_addresses; end

  # source://mail//lib/mail/fields/common_address_field.rb#90
  def group_names; end

  # source://mail//lib/mail/fields/common_address_field.rb#70
  def groups; end

  private

  # source://mail//lib/mail/fields/common_address_field.rb#150
  def do_decode; end

  # source://mail//lib/mail/fields/common_address_field.rb#140
  def do_encode; end

  # source://mail//lib/mail/fields/common_address_field.rb#160
  def get_group_addresses(group_list); end

  # source://mail//lib/mail/fields/common_address_field.rb#123
  def utf8_if_needed(val, val_charset); end

  class << self
    # source://mail//lib/mail/fields/common_address_field.rb#18
    def singular?; end
  end
end

# source://mail//lib/mail/fields/common_date_field.rb#6
class Mail::CommonDateField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/common_date_field.rb#30
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/common_date_field.rb#35
  def date_time; end

  # source://mail//lib/mail/fields/common_date_field.rb#41
  def default; end

  # source://mail//lib/mail/fields/common_date_field.rb#45
  def element; end

  private

  # source://mail//lib/mail/fields/common_date_field.rb#54
  def do_decode; end

  # source://mail//lib/mail/fields/common_date_field.rb#50
  def do_encode; end

  class << self
    # source://mail//lib/mail/fields/common_date_field.rb#11
    def normalize_datetime(string); end

    # source://mail//lib/mail/fields/common_date_field.rb#7
    def singular?; end
  end
end

# source://mail//lib/mail/fields/common_field.rb#6
class Mail::CommonField
  # source://mail//lib/mail/fields/common_field.rb#20
  def initialize(name = T.unsafe(nil), value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/common_field.rb#17
  def charset; end

  # source://mail//lib/mail/fields/common_field.rb#17
  def charset=(_arg0); end

  # source://mail//lib/mail/fields/common_field.rb#54
  def decoded; end

  # source://mail//lib/mail/fields/common_field.rb#50
  def default; end

  # source://mail//lib/mail/fields/common_field.rb#42
  def element; end

  # source://mail//lib/mail/fields/common_field.rb#58
  def encoded; end

  # source://mail//lib/mail/fields/common_field.rb#18
  def errors; end

  # source://mail//lib/mail/fields/common_field.rb#15
  def name; end

  # source://mail//lib/mail/fields/common_field.rb#15
  def name=(_arg0); end

  # source://mail//lib/mail/fields/common_field.rb#38
  def parse; end

  # source://mail//lib/mail/fields/common_field.rb#62
  def responsible_for?(field_name); end

  # source://mail//lib/mail/fields/common_field.rb#28
  def singular?; end

  # source://mail//lib/mail/fields/common_field.rb#46
  def to_s; end

  # source://mail//lib/mail/fields/common_field.rb#16
  def value; end

  # source://mail//lib/mail/fields/common_field.rb#32
  def value=(value); end

  private

  # source://mail//lib/mail/fields/common_field.rb#69
  def ensure_filename_quoted(value); end

  class << self
    # source://mail//lib/mail/fields/common_field.rb#11
    def parse(*args); end

    # source://mail//lib/mail/fields/common_field.rb#7
    def singular?; end
  end
end

# source://mail//lib/mail/fields/common_field.rb#68
Mail::CommonField::FILENAME_RE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/fields/common_message_id_field.rb#7
class Mail::CommonMessageIdField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/common_message_id_field.rb#20
  def default; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#8
  def element; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#12
  def message_id; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#16
  def message_ids; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#25
  def to_s; end

  private

  # source://mail//lib/mail/fields/common_message_id_field.rb#34
  def do_decode; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#30
  def do_encode; end

  # source://mail//lib/mail/fields/common_message_id_field.rb#38
  def formatted_message_ids(join = T.unsafe(nil)); end
end

# source://mail//lib/mail/configuration.rb#15
class Mail::Configuration
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://mail//lib/mail/configuration.rb#18
  def initialize; end

  # source://mail//lib/mail/configuration.rb#24
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://mail//lib/mail/configuration.rb#29
  def lookup_delivery_method(method); end

  # source://mail//lib/mail/configuration.rb#57
  def lookup_retriever_method(method); end

  # source://mail//lib/mail/configuration.rb#72
  def param_encode_language(value = T.unsafe(nil)); end

  # source://mail//lib/mail/configuration.rb#52
  def retriever_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end
end

# source://mail//lib/mail/constants.rb#4
module Mail::Constants; end

# source://mail//lib/mail/constants.rb#66
Mail::Constants::ASTERISK = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#35
Mail::Constants::ATOM_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#77
Mail::Constants::B_VALUES = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/constants.rb#72
Mail::Constants::CAPITAL_M = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#65
Mail::Constants::COLON = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#34
Mail::Constants::CONTROL_CHAR = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#68
Mail::Constants::CR = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#67
Mail::Constants::CRLF = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#70
Mail::Constants::CR_ENCODED = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#61
Mail::Constants::EMPTY = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#39
Mail::Constants::ENCODED_VALUE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#73
Mail::Constants::EQUAL_LF = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#26
Mail::Constants::FIELD_BODY = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#27
Mail::Constants::FIELD_LINE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#24
Mail::Constants::FIELD_NAME = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#25
Mail::Constants::FIELD_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#28
Mail::Constants::FIELD_SPLIT = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#49
Mail::Constants::FULL_ENCODED_VALUE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#21
Mail::Constants::FWS = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#29
Mail::Constants::HEADER_LINE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#30
Mail::Constants::HEADER_SPLIT = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#64
Mail::Constants::HYPHEN = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#19
Mail::Constants::LAX_CRLF = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#69
Mail::Constants::LF = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#71
Mail::Constants::LF_ENCODED = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#74
Mail::Constants::NULL_SENDER = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#36
Mail::Constants::PHRASE_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#33
Mail::Constants::QP_SAFE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#32
Mail::Constants::QP_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#76
Mail::Constants::Q_VALUES = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/constants.rb#62
Mail::Constants::SPACE = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#23
Mail::Constants::TEXT = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#37
Mail::Constants::TOKEN_UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#63
Mail::Constants::UNDERSCORE = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/constants.rb#22
Mail::Constants::UNFOLD_WS = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/constants.rb#20
Mail::Constants::WSP = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/fields/content_description_field.rb#6
class Mail::ContentDescriptionField < ::Mail::NamedUnstructuredField
  class << self
    # source://mail//lib/mail/fields/content_description_field.rb#9
    def singular?; end
  end
end

# source://mail//lib/mail/fields/content_description_field.rb#7
Mail::ContentDescriptionField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/content_disposition_element.rb#6
class Mail::ContentDispositionElement
  # source://mail//lib/mail/elements/content_disposition_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/content_disposition_element.rb#7
  def disposition_type; end

  # source://mail//lib/mail/elements/content_disposition_element.rb#7
  def parameters; end

  private

  # source://mail//lib/mail/elements/content_disposition_element.rb#16
  def cleaned(string); end
end

# source://mail//lib/mail/fields/content_disposition_field.rb#7
class Mail::ContentDispositionField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/content_disposition_field.rb#14
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/content_disposition_field.rb#41
  def decoded; end

  # source://mail//lib/mail/fields/content_disposition_field.rb#22
  def disposition_type; end

  # source://mail//lib/mail/fields/content_disposition_field.rb#18
  def element; end

  # source://mail//lib/mail/fields/content_disposition_field.rb#36
  def encoded; end

  # source://mail//lib/mail/fields/content_disposition_field.rb#32
  def filename; end

  # source://mail//lib/mail/fields/content_disposition_field.rb#26
  def parameters; end

  class << self
    # source://mail//lib/mail/fields/content_disposition_field.rb#10
    def singular?; end
  end
end

# source://mail//lib/mail/fields/content_disposition_field.rb#8
Mail::ContentDispositionField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/content_id_field.rb#7
class Mail::ContentIdField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/content_id_field.rb#14
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/content_id_field.rb#23
  def content_id; end

  # source://mail//lib/mail/fields/content_id_field.rb#19
  def element; end

  private

  # source://mail//lib/mail/fields/content_id_field.rb#28
  def do_decode; end

  # source://mail//lib/mail/fields/content_id_field.rb#32
  def do_encode; end

  class << self
    # source://mail//lib/mail/fields/content_id_field.rb#10
    def singular?; end
  end
end

# source://mail//lib/mail/fields/content_id_field.rb#8
Mail::ContentIdField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/content_location_element.rb#6
class Mail::ContentLocationElement
  # source://mail//lib/mail/elements/content_location_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/content_location_element.rb#7
  def location; end

  # source://mail//lib/mail/elements/content_location_element.rb#13
  def to_s(*args); end
end

# source://mail//lib/mail/fields/content_location_field.rb#6
class Mail::ContentLocationField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/content_location_field.rb#25
  def decoded; end

  # source://mail//lib/mail/fields/content_location_field.rb#13
  def element; end

  # source://mail//lib/mail/fields/content_location_field.rb#21
  def encoded; end

  # source://mail//lib/mail/fields/content_location_field.rb#17
  def location; end

  class << self
    # source://mail//lib/mail/fields/content_location_field.rb#9
    def singular?; end
  end
end

# source://mail//lib/mail/fields/content_location_field.rb#7
Mail::ContentLocationField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/content_transfer_encoding_element.rb#6
class Mail::ContentTransferEncodingElement
  # source://mail//lib/mail/elements/content_transfer_encoding_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/content_transfer_encoding_element.rb#7
  def encoding; end
end

# source://mail//lib/mail/fields/content_transfer_encoding_field.rb#6
class Mail::ContentTransferEncodingField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#24
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#28
  def element; end

  # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#32
  def encoding; end

  private

  # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#41
  def do_decode; end

  # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#37
  def do_encode; end

  class << self
    # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#13
    def normalize_content_transfer_encoding(value); end

    # source://mail//lib/mail/fields/content_transfer_encoding_field.rb#9
    def singular?; end
  end
end

# source://mail//lib/mail/fields/content_transfer_encoding_field.rb#7
Mail::ContentTransferEncodingField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/content_type_element.rb#6
class Mail::ContentTypeElement
  # source://mail//lib/mail/elements/content_type_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/content_type_element.rb#7
  def main_type; end

  # source://mail//lib/mail/elements/content_type_element.rb#7
  def parameters; end

  # source://mail//lib/mail/elements/content_type_element.rb#7
  def sub_type; end

  private

  # source://mail//lib/mail/elements/content_type_element.rb#17
  def cleaned(string); end
end

# source://mail//lib/mail/fields/content_type_field.rb#7
class Mail::ContentTypeField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/content_type_field.rb#24
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/content_type_field.rb#47
  def attempt_to_clean; end

  # source://mail//lib/mail/fields/content_type_field.rb#63
  def content_type; end

  # source://mail//lib/mail/fields/content_type_field.rb#101
  def decoded; end

  # source://mail//lib/mail/fields/content_type_field.rb#68
  def default; end

  # source://mail//lib/mail/fields/content_type_field.rb#38
  def element; end

  # source://mail//lib/mail/fields/content_type_field.rb#96
  def encoded; end

  # source://mail//lib/mail/fields/content_type_field.rb#92
  def filename; end

  # source://mail//lib/mail/fields/content_type_field.rb#55
  def main_type; end

  # source://mail//lib/mail/fields/content_type_field.rb#72
  def parameters; end

  # source://mail//lib/mail/fields/content_type_field.rb#63
  def string; end

  # source://mail//lib/mail/fields/content_type_field.rb#88
  def stringify(params); end

  # source://mail//lib/mail/fields/content_type_field.rb#59
  def sub_type; end

  # source://mail//lib/mail/fields/content_type_field.rb#80
  def value; end

  private

  # source://mail//lib/mail/fields/content_type_field.rb#163
  def get_mime_type(val); end

  # source://mail//lib/mail/fields/content_type_field.rb#108
  def method_missing(name, *args, &block); end

  # source://mail//lib/mail/fields/content_type_field.rb#119
  def sanitize(val); end

  class << self
    # source://mail//lib/mail/fields/content_type_field.rb#19
    def generate_boundary; end

    # source://mail//lib/mail/fields/content_type_field.rb#11
    def singular?; end

    # source://mail//lib/mail/fields/content_type_field.rb#15
    def with_boundary(type); end
  end
end

# source://mail//lib/mail/fields/content_type_field.rb#8
Mail::ContentTypeField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/date_field.rb#26
class Mail::DateField < ::Mail::CommonDateField; end

# source://mail//lib/mail/fields/date_field.rb#27
Mail::DateField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/date_time_element.rb#6
class Mail::DateTimeElement
  # source://mail//lib/mail/elements/date_time_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/date_time_element.rb#7
  def date_string; end

  # source://mail//lib/mail/elements/date_time_element.rb#7
  def time_string; end
end

# source://mail//lib/mail/encodings.rb#9
module Mail::Encodings
  include ::Mail::Constants
  extend ::Mail::Utilities

  class << self
    # source://mail//lib/mail/encodings.rb#162
    def address_encode(address, charset = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings.rb#234
    def b_value_decode(str); end

    # source://mail//lib/mail/encodings.rb#199
    def b_value_encode(string, encoding = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings.rb#258
    def collapse_adjacent_encodings(str); end

    # source://mail//lib/mail/encodings.rb#105
    def decode_encode(str, output_type); end

    # source://mail//lib/mail/encodings.rb#29
    def defined?(name); end

    # source://mail//lib/mail/encodings.rb#280
    def each_base64_chunk_byterange(str, max_bytesize_per_base64_chunk, &block); end

    # source://mail//lib/mail/encodings.rb#293
    def each_chunk_byterange(str, max_bytesize_per_chunk); end

    # source://mail//lib/mail/encodings.rb#170
    def encode_non_usascii(address, charset); end

    # source://mail//lib/mail/encodings.rb#45
    def get_all; end

    # source://mail//lib/mail/encodings.rb#41
    def get_encoding(name); end

    # source://mail//lib/mail/encodings.rb#49
    def get_name(name); end

    # source://mail//lib/mail/encodings.rb#93
    def param_decode(str, encoding); end

    # source://mail//lib/mail/encodings.rb#73
    def param_encode(str); end

    # source://mail//lib/mail/encodings.rb#244
    def q_value_decode(str); end

    # source://mail//lib/mail/encodings.rb#217
    def q_value_encode(encoded_str, encoding = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings.rb#20
    def register(name, cls); end

    # source://mail//lib/mail/encodings.rb#53
    def transcode_charset(str, from_charset, to_charset = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings.rb#140
    def unquote_and_convert_to(str, to_encoding); end

    # source://mail//lib/mail/encodings.rb#122
    def value_decode(str); end

    # source://mail//lib/mail/encodings.rb#249
    def value_encoding_from_string(str); end
  end
end

# source://mail//lib/mail/encodings/base64.rb#9
class Mail::Encodings::Base64 < ::Mail::Encodings::SevenBit
  class << self
    # source://mail//lib/mail/encodings/base64.rb#14
    def can_encode?(enc); end

    # source://mail//lib/mail/encodings/base64.rb#33
    def compatible_input?(str); end

    # source://mail//lib/mail/encodings/base64.rb#27
    def cost(str); end

    # source://mail//lib/mail/encodings/base64.rb#18
    def decode(str); end

    # source://mail//lib/mail/encodings/base64.rb#22
    def encode(str); end
  end
end

# source://mail//lib/mail/encodings/base64.rb#10
Mail::Encodings::Base64::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/base64.rb#11
Mail::Encodings::Base64::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/binary.rb#7
class Mail::Encodings::Binary < ::Mail::Encodings::Identity; end

# source://mail//lib/mail/encodings/binary.rb#8
Mail::Encodings::Binary::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/binary.rb#9
Mail::Encodings::Binary::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/8bit.rb#7
class Mail::Encodings::EightBit < ::Mail::Encodings::Binary
  class << self
    # source://mail//lib/mail/encodings/8bit.rb#13
    def compatible_input?(str); end
  end
end

# source://mail//lib/mail/encodings/8bit.rb#8
Mail::Encodings::EightBit::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/8bit.rb#9
Mail::Encodings::EightBit::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/identity.rb#9
class Mail::Encodings::Identity < ::Mail::Encodings::TransferEncoding
  class << self
    # source://mail//lib/mail/encodings/identity.rb#19
    def cost(str); end

    # source://mail//lib/mail/encodings/identity.rb#10
    def decode(str); end

    # source://mail//lib/mail/encodings/identity.rb#14
    def encode(str); end
  end
end

# source://mail//lib/mail/encodings/quoted_printable.rb#7
class Mail::Encodings::QuotedPrintable < ::Mail::Encodings::SevenBit
  class << self
    # source://mail//lib/mail/encodings/quoted_printable.rb#12
    def can_encode?(enc); end

    # source://mail//lib/mail/encodings/quoted_printable.rb#36
    def compatible_input?(str); end

    # source://mail//lib/mail/encodings/quoted_printable.rb#26
    def cost(str); end

    # source://mail//lib/mail/encodings/quoted_printable.rb#18
    def decode(str); end

    # source://mail//lib/mail/encodings/quoted_printable.rb#22
    def encode(str); end
  end
end

# source://mail//lib/mail/encodings/quoted_printable.rb#8
Mail::Encodings::QuotedPrintable::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/quoted_printable.rb#10
Mail::Encodings::QuotedPrintable::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/7bit.rb#8
class Mail::Encodings::SevenBit < ::Mail::Encodings::EightBit
  class << self
    # source://mail//lib/mail/encodings/7bit.rb#22
    def compatible_input?(str); end

    # source://mail//lib/mail/encodings/7bit.rb#13
    def decode(str); end

    # source://mail//lib/mail/encodings/7bit.rb#17
    def encode(str); end
  end
end

# source://mail//lib/mail/encodings/7bit.rb#9
Mail::Encodings::SevenBit::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/7bit.rb#10
Mail::Encodings::SevenBit::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/transfer_encoding.rb#5
class Mail::Encodings::TransferEncoding
  class << self
    # source://mail//lib/mail/encodings/transfer_encoding.rb#19
    def can_encode?(enc); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#12
    def can_transport?(enc); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#27
    def compatible_input?(str); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#23
    def cost(str); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#56
    def lowest_cost(str, encodings); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#35
    def negotiate(message_encoding, source_encoding, str, allowed_encodings = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#46
    def renegotiate(message_encoding, source_encoding, str, allowed_encodings = T.unsafe(nil)); end

    # source://mail//lib/mail/encodings/transfer_encoding.rb#31
    def to_s; end
  end
end

# source://mail//lib/mail/encodings/transfer_encoding.rb#6
Mail::Encodings::TransferEncoding::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings/transfer_encoding.rb#8
Mail::Encodings::TransferEncoding::PRIORITY = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/encodings/unix_to_unix.rb#4
class Mail::Encodings::UnixToUnix < ::Mail::Encodings::TransferEncoding
  class << self
    # source://mail//lib/mail/encodings/unix_to_unix.rb#7
    def decode(str); end

    # source://mail//lib/mail/encodings/unix_to_unix.rb#11
    def encode(str); end
  end
end

# source://mail//lib/mail/encodings/unix_to_unix.rb#5
Mail::Encodings::UnixToUnix::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/envelope.rb#13
class Mail::Envelope < ::Mail::NamedStructuredField
  # source://mail//lib/mail/envelope.rb#24
  def date; end

  # source://mail//lib/mail/envelope.rb#16
  def element; end

  # source://mail//lib/mail/envelope.rb#20
  def from; end
end

# source://mail//lib/mail/envelope.rb#14
Mail::Envelope::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/envelope_from_element.rb#7
class Mail::EnvelopeFromElement
  # source://mail//lib/mail/elements/envelope_from_element.rb#10
  def initialize(string); end

  # source://mail//lib/mail/elements/envelope_from_element.rb#8
  def address; end

  # source://mail//lib/mail/elements/envelope_from_element.rb#8
  def date_time; end

  # source://mail//lib/mail/elements/envelope_from_element.rb#21
  def formatted_date_time; end

  # source://mail//lib/mail/elements/envelope_from_element.rb#31
  def to_s; end
end

# source://mail//lib/mail/network/delivery_methods/exim.rb#39
class Mail::Exim < ::Mail::Sendmail
  # source://mail//lib/mail/network/delivery_methods/exim.rb#46
  def destinations_for(envelope); end
end

# source://mail//lib/mail/network/delivery_methods/exim.rb#40
Mail::Exim::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/field.rb#25
class Mail::Field
  include ::Comparable

  # source://mail//lib/mail/field.rb#166
  def initialize(name, value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/field.rb#224
  def <=>(other); end

  # source://mail//lib/mail/field.rb#216
  def ==(other); end

  # source://mail//lib/mail/field.rb#186
  def field; end

  # source://mail//lib/mail/field.rb#182
  def field=(field); end

  # source://mail//lib/mail/field.rb#228
  def field_order_id; end

  # source://mail//lib/mail/field.rb#206
  def inspect; end

  # source://mail//lib/mail/field.rb#232
  def method_missing(name, *args, &block); end

  # source://mail//lib/mail/field.rb#190
  def name; end

  # source://mail//lib/mail/field.rb#220
  def responsible_for?(field_name); end

  # source://mail//lib/mail/field.rb#212
  def same(other); end

  # source://mail//lib/mail/field.rb#202
  def to_s; end

  # source://mail//lib/mail/field.rb#152
  def unparsed_value; end

  # source://mail//lib/mail/field.rb#194
  def value; end

  # source://mail//lib/mail/field.rb#198
  def value=(val); end

  private

  # source://mail//lib/mail/field.rb#253
  def create_field(name, value, charset); end

  # source://mail//lib/mail/field.rb#261
  def parse_field(name, value, charset); end

  # source://mail//lib/mail/field.rb#236
  def respond_to_missing?(method_name, include_private); end

  # source://mail//lib/mail/field.rb#279
  def unfold(string); end

  class << self
    # source://mail//lib/mail/field.rb#147
    def field_class_for(name); end

    # source://mail//lib/mail/field.rb#122
    def parse(field, charset = T.unsafe(nil)); end

    # source://mail//lib/mail/field.rb#129
    def split(raw_field); end
  end
end

# source://mail//lib/mail/field.rb#38
Mail::Field::FIELDS_MAP = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/field.rb#70
Mail::Field::FIELD_NAME_MAP = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/field.rb#240
Mail::Field::FIELD_ORDER_LOOKUP = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/field.rb#75
class Mail::Field::FieldError < ::StandardError; end

# source://mail//lib/mail/field.rb#106
class Mail::Field::IncompleteParseError < ::Mail::Field::ParseError
  # source://mail//lib/mail/field.rb#107
  def initialize(element, original_text, unparsed_index); end
end

# source://mail//lib/mail/field.rb#36
Mail::Field::KNOWN_FIELDS = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/field.rb#100
class Mail::Field::NilParseError < ::Mail::Field::ParseError
  # source://mail//lib/mail/field.rb#101
  def initialize(element); end
end

# source://mail//lib/mail/field.rb#80
class Mail::Field::ParseError < ::Mail::Field::FieldError
  # source://mail//lib/mail/field.rb#83
  def initialize(element, value, reason); end

  # source://mail//lib/mail/field.rb#81
  def element; end

  # source://mail//lib/mail/field.rb#81
  def element=(_arg0); end

  # source://mail//lib/mail/field.rb#81
  def reason; end

  # source://mail//lib/mail/field.rb#81
  def reason=(_arg0); end

  # source://mail//lib/mail/field.rb#81
  def value; end

  # source://mail//lib/mail/field.rb#81
  def value=(_arg0); end

  private

  # source://mail//lib/mail/field.rb#91
  def to_utf8(text); end
end

# source://mail//lib/mail/field.rb#28
Mail::Field::STRUCTURED_FIELDS = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/field.rb#114
class Mail::Field::SyntaxError < ::Mail::Field::FieldError; end

# source://mail//lib/mail/field_list.rb#8
class Mail::FieldList < ::Array
  # source://mail//lib/mail/field_list.rb#22
  def <<(field); end

  # source://mail//lib/mail/field_list.rb#22
  def add_field(field); end

  # source://mail//lib/mail/field_list.rb#60
  def delete_field(name); end

  # source://mail//lib/mail/field_list.rb#13
  def get_field(field_name); end

  # source://mail//lib/mail/field_list.rb#9
  def has_field?(field_name); end

  # source://mail//lib/mail/field_list.rb#46
  def insert_field(field); end

  # source://mail//lib/mail/field_list.rb#31
  def replace_field(field); end

  # source://mail//lib/mail/field_list.rb#64
  def summary; end

  private

  # source://mail//lib/mail/field_list.rb#70
  def select_fields(field_name); end

  # source://mail//lib/mail/field_list.rb#79
  def singular?(field_name); end
end

# source://mail//lib/mail/network/delivery_methods/file_delivery.rb#15
class Mail::FileDelivery
  # source://mail//lib/mail/network/delivery_methods/file_delivery.rb#20
  def initialize(values); end

  # source://mail//lib/mail/network/delivery_methods/file_delivery.rb#24
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/file_delivery.rb#18
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/file_delivery.rb#18
  def settings=(_arg0); end
end

# source://mail//lib/mail/fields/from_field.rb#31
class Mail::FromField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/from_field.rb#32
Mail::FromField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/header.rb#22
class Mail::Header
  include ::Enumerable

  # source://mail//lib/mail/header.rb#53
  def initialize(header_text = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/header.rb#130
  def [](name); end

  # source://mail//lib/mail/header.rb#147
  def []=(name, value); end

  # source://mail//lib/mail/header.rb#39
  def charset; end

  # source://mail//lib/mail/header.rb#169
  def charset=(val); end

  # source://mail//lib/mail/header.rb#195
  def decoded; end

  # source://mail//lib/mail/header.rb#182
  def encoded; end

  # source://mail//lib/mail/header.rb#105
  def errors; end

  # source://mail//lib/mail/header.rb#199
  def field_summary; end

  # source://mail//lib/mail/header.rb#67
  def fields; end

  # source://mail//lib/mail/header.rb#90
  def fields=(unfolded_fields); end

  # source://mail//lib/mail/header.rb#209
  def has_content_id?; end

  # source://mail//lib/mail/header.rb#214
  def has_date?; end

  # source://mail//lib/mail/header.rb#204
  def has_message_id?; end

  # source://mail//lib/mail/header.rb#219
  def has_mime_version?; end

  # source://mail//lib/mail/header.rb#39
  def raw_source; end

  # source://mail//lib/mail/header.rb#191
  def to_s; end

  private

  # source://mail//lib/mail/header.rb#233
  def each(&block); end

  # source://mail//lib/mail/header.rb#59
  def initialize_copy(original); end

  # source://mail//lib/mail/header.rb#227
  def split_header; end

  class << self
    # source://mail//lib/mail/header.rb#31
    def maximum_amount; end

    # source://mail//lib/mail/header.rb#35
    def maximum_amount=(value); end
  end
end

# source://mail//lib/mail/network/retriever_methods/imap.rb#39
class Mail::IMAP < ::Mail::Retriever
  # source://mail//lib/mail/network/retriever_methods/imap.rb#42
  def initialize(values); end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#133
  def connection(&block); end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#119
  def delete_all(mailbox = T.unsafe(nil)); end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#73
  def find(options = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#52
  def settings; end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#52
  def settings=(_arg0); end

  private

  # source://mail//lib/mail/network/retriever_methods/imap.rb#160
  def start(config = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/imap.rb#144
  def validate_options(options); end
end

# source://mail//lib/mail/fields/in_reply_to_field.rb#31
class Mail::InReplyToField < ::Mail::CommonMessageIdField
  # source://mail//lib/mail/fields/in_reply_to_field.rb#38
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  class << self
    # source://mail//lib/mail/fields/in_reply_to_field.rb#34
    def singular?; end
  end
end

# source://mail//lib/mail/fields/in_reply_to_field.rb#32
Mail::InReplyToField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/indifferent_hash.rb#8
class Mail::IndifferentHash < ::Hash
  # source://mail//lib/mail/indifferent_hash.rb#10
  def initialize(constructor = T.unsafe(nil)); end

  # source://mail//lib/mail/indifferent_hash.rb#41
  def []=(key, value); end

  # source://mail//lib/mail/indifferent_hash.rb#19
  def default(key = T.unsafe(nil)); end

  # source://mail//lib/mail/indifferent_hash.rb#117
  def delete(key); end

  # source://mail//lib/mail/indifferent_hash.rb#96
  def dup; end

  # source://mail//lib/mail/indifferent_hash.rb#80
  def fetch(key, *extras); end

  # source://mail//lib/mail/indifferent_hash.rb#71
  def has_key?(key); end

  # source://mail//lib/mail/indifferent_hash.rb#71
  def include?(key); end

  # source://mail//lib/mail/indifferent_hash.rb#71
  def key?(key); end

  # source://mail//lib/mail/indifferent_hash.rb#71
  def member?(key); end

  # source://mail//lib/mail/indifferent_hash.rb#102
  def merge(hash); end

  # source://mail//lib/mail/indifferent_hash.rb#57
  def merge!(other_hash); end

  def regular_update(*_arg0); end
  def regular_writer(_arg0, _arg1); end

  # source://mail//lib/mail/indifferent_hash.rb#108
  def reverse_merge(other_hash); end

  # source://mail//lib/mail/indifferent_hash.rb#112
  def reverse_merge!(other_hash); end

  # source://mail//lib/mail/indifferent_hash.rb#41
  def store(key, value); end

  # source://mail//lib/mail/indifferent_hash.rb#122
  def stringify_keys; end

  # source://mail//lib/mail/indifferent_hash.rb#121
  def stringify_keys!; end

  # source://mail//lib/mail/indifferent_hash.rb#123
  def symbolize_keys; end

  # source://mail//lib/mail/indifferent_hash.rb#126
  def to_hash; end

  # source://mail//lib/mail/indifferent_hash.rb#124
  def to_options!; end

  # source://mail//lib/mail/indifferent_hash.rb#57
  def update(other_hash); end

  # source://mail//lib/mail/indifferent_hash.rb#91
  def values_at(*indices); end

  protected

  # source://mail//lib/mail/indifferent_hash.rb#132
  def convert_key(key); end

  # source://mail//lib/mail/indifferent_hash.rb#136
  def convert_value(value); end

  class << self
    # source://mail//lib/mail/indifferent_hash.rb#27
    def new_from_hash_copying_default(hash); end
  end
end

# source://mail//lib/mail/fields/keywords_field.rb#7
class Mail::KeywordsField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/keywords_field.rb#18
  def default; end

  # source://mail//lib/mail/fields/keywords_field.rb#10
  def element; end

  # source://mail//lib/mail/fields/keywords_field.rb#14
  def keywords; end

  private

  # source://mail//lib/mail/fields/keywords_field.rb#23
  def do_decode; end

  # source://mail//lib/mail/fields/keywords_field.rb#27
  def do_encode; end
end

# source://mail//lib/mail/fields/keywords_field.rb#8
Mail::KeywordsField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#4
class Mail::LoggerDelivery
  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#7
  def initialize(settings); end

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#13
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#5
  def logger; end

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#5
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#5
  def severity; end

  private

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#18
  def default_logger; end

  # source://mail//lib/mail/network/delivery_methods/logger_delivery.rb#23
  def derive_severity(severity); end
end

# source://mail//lib/mail/matchers/has_sent_mail.rb#3
module Mail::Matchers
  # source://mail//lib/mail/matchers/attachment_matchers.rb#8
  def an_attachment_with_filename(filename); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#12
  def an_attachment_with_mime_type(filename); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#4
  def any_attachment; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#4
  def have_sent_email; end
end

# source://mail//lib/mail/matchers/attachment_matchers.rb#16
class Mail::Matchers::AnyAttachmentMatcher
  # source://mail//lib/mail/matchers/attachment_matchers.rb#17
  def ===(other); end
end

# source://mail//lib/mail/matchers/attachment_matchers.rb#22
class Mail::Matchers::AttachmentFilenameMatcher
  # source://mail//lib/mail/matchers/attachment_matchers.rb#24
  def initialize(filename); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#28
  def ===(other); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#23
  def filename; end
end

# source://mail//lib/mail/matchers/attachment_matchers.rb#33
class Mail::Matchers::AttachmentMimeTypeMatcher
  # source://mail//lib/mail/matchers/attachment_matchers.rb#35
  def initialize(mime_type); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#39
  def ===(other); end

  # source://mail//lib/mail/matchers/attachment_matchers.rb#34
  def mime_type; end
end

# source://mail//lib/mail/matchers/has_sent_mail.rb#8
class Mail::Matchers::HasSentEmailMatcher
  # source://mail//lib/mail/matchers/has_sent_mail.rb#9
  def initialize(_context); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#44
  def bcc(recipient_or_list); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#33
  def cc(recipient_or_list); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#96
  def description; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#101
  def failure_message; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#108
  def failure_message_when_negated; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#17
  def from(sender); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#12
  def matches?(subject); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#81
  def matching_body(body_matcher); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#71
  def matching_subject(subject_matcher); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#22
  def to(recipient_or_list); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#61
  def with_any_attachments; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#50
  def with_attachments(attachments); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#76
  def with_body(body); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#86
  def with_html(body); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#56
  def with_no_attachments; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#66
  def with_subject(subject); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#91
  def with_text(body); end

  protected

  # source://mail//lib/mail/matchers/has_sent_mail.rb#196
  def dump_deliveries; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#181
  def explain_expectations; end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#117
  def filter_matched_deliveries(deliveries); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#159
  def matches_on_attachments?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#142
  def matches_on_blind_copy_recipients?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#165
  def matches_on_body?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#169
  def matches_on_body_matcher?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#138
  def matches_on_copy_recipients?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#154
  def matches_on_having_attachments?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#173
  def matches_on_html_part_body?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#134
  def matches_on_recipients?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#130
  def matches_on_sender?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#146
  def matches_on_subject?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#150
  def matches_on_subject_matcher?(delivery); end

  # source://mail//lib/mail/matchers/has_sent_mail.rb#177
  def matches_on_text_part_body?(delivery); end
end

# source://mail//lib/mail/message.rb#50
class Mail::Message
  # source://mail//lib/mail/message.rb#107
  def initialize(*args, &block); end

  # source://mail//lib/mail/message.rb#334
  def <=>(other); end

  # source://mail//lib/mail/message.rb#373
  def ==(other); end

  # source://mail//lib/mail/message.rb#1334
  def [](name); end

  # source://mail//lib/mail/message.rb#1316
  def []=(name, value); end

  # source://mail//lib/mail/message.rb#1558
  def action; end

  # source://mail//lib/mail/message.rb#1472
  def add_charset; end

  # source://mail//lib/mail/message.rb#1487
  def add_content_transfer_encoding; end

  # source://mail//lib/mail/message.rb#1465
  def add_content_type; end

  # source://mail//lib/mail/message.rb#1448
  def add_date(date_val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1757
  def add_file(values); end

  # source://mail//lib/mail/message.rb#1438
  def add_message_id(msg_id_val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1458
  def add_mime_version(ver_val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1701
  def add_part(part); end

  # source://mail//lib/mail/message.rb#1927
  def all_parts; end

  # source://mail//lib/mail/message.rb#1918
  def attachment; end

  # source://mail//lib/mail/message.rb#1913
  def attachment?; end

  # source://mail//lib/mail/message.rb#1626
  def attachments; end

  # source://mail//lib/mail/message.rb#500
  def bcc(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#512
  def bcc=(val); end

  # source://mail//lib/mail/message.rb#1306
  def bcc_addrs; end

  # source://mail//lib/mail/message.rb#1251
  def body(value = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1237
  def body=(value); end

  # source://mail//lib/mail/message.rb#1260
  def body_encoding(value = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1268
  def body_encoding=(value); end

  # source://mail//lib/mail/message.rb#1554
  def bounced?; end

  # source://mail//lib/mail/message.rb#1583
  def boundary; end

  # source://mail//lib/mail/message.rb#541
  def cc(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#553
  def cc=(val); end

  # source://mail//lib/mail/message.rb#1300
  def cc_addrs; end

  # source://mail//lib/mail/message.rb#1497
  def charset; end

  # source://mail//lib/mail/message.rb#1506
  def charset=(value); end

  # source://mail//lib/mail/message.rb#557
  def comments(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#561
  def comments=(val); end

  # source://mail//lib/mail/message.rb#565
  def content_description(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#569
  def content_description=(val); end

  # source://mail//lib/mail/message.rb#573
  def content_disposition(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#577
  def content_disposition=(val); end

  # source://mail//lib/mail/message.rb#581
  def content_id(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#585
  def content_id=(val); end

  # source://mail//lib/mail/message.rb#589
  def content_location(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#593
  def content_location=(val); end

  # source://mail//lib/mail/message.rb#597
  def content_transfer_encoding(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#601
  def content_transfer_encoding=(val); end

  # source://mail//lib/mail/message.rb#605
  def content_type(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#609
  def content_type=(val); end

  # source://mail//lib/mail/message.rb#1523
  def content_type_parameters; end

  # source://mail//lib/mail/message.rb#1773
  def convert_to_multipart; end

  # source://mail//lib/mail/message.rb#613
  def date(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#617
  def date=(val); end

  # source://mail//lib/mail/message.rb#1907
  def decode_body; end

  # source://mail//lib/mail/message.rb#1886
  def decoded; end

  # source://mail//lib/mail/message.rb#1204
  def default(sym, val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#250
  def deliver; end

  # source://mail//lib/mail/message.rb#267
  def deliver!; end

  # source://mail//lib/mail/message.rb#199
  def delivery_handler; end

  # source://mail//lib/mail/message.rb#199
  def delivery_handler=(_arg0); end

  # source://mail//lib/mail/message.rb#274
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1543
  def delivery_status_part; end

  # source://mail//lib/mail/message.rb#1538
  def delivery_status_report?; end

  # source://mail//lib/mail/message.rb#1282
  def destinations; end

  # source://mail//lib/mail/message.rb#1570
  def diagnostic_code; end

  # source://mail//lib/mail/message.rb#1803
  def encoded; end

  # source://mail//lib/mail/message.rb#418
  def envelope_date; end

  # source://mail//lib/mail/message.rb#414
  def envelope_from; end

  # source://mail//lib/mail/message.rb#1566
  def error_status; end

  # source://mail//lib/mail/message.rb#471
  def errors; end

  # source://mail//lib/mail/message.rb#1923
  def filename; end

  # source://mail//lib/mail/message.rb#1562
  def final_recipient; end

  # source://mail//lib/mail/message.rb#1931
  def find_first_mime_type(mt); end

  # source://mail//lib/mail/message.rb#658
  def from(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#670
  def from=(val); end

  # source://mail//lib/mail/message.rb#1288
  def from_addrs; end

  # source://mail//lib/mail/message.rb#1630
  def has_attachments?; end

  # source://mail//lib/mail/message.rb#1423
  def has_charset?; end

  # source://mail//lib/mail/message.rb#1428
  def has_content_transfer_encoding?; end

  # source://mail//lib/mail/message.rb#1418
  def has_content_type?; end

  # source://mail//lib/mail/message.rb#1408
  def has_date?; end

  # source://mail//lib/mail/message.rb#1402
  def has_message_id?; end

  # source://mail//lib/mail/message.rb#1414
  def has_mime_version?; end

  # source://mail//lib/mail/message.rb#443
  def header(value = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#428
  def header=(value); end

  # source://mail//lib/mail/message.rb#1396
  def header_fields; end

  # source://mail//lib/mail/message.rb#448
  def headers(hash = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1635
  def html_part(&block); end

  # source://mail//lib/mail/message.rb#1655
  def html_part=(msg); end

  # source://mail//lib/mail/message.rb#674
  def in_reply_to(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#678
  def in_reply_to=(val); end

  # source://mail//lib/mail/message.rb#240
  def inform_interceptors; end

  # source://mail//lib/mail/message.rb#236
  def inform_observers; end

  # source://mail//lib/mail/message.rb#1873
  def inspect; end

  # source://mail//lib/mail/message.rb#1877
  def inspect_structure; end

  # source://mail//lib/mail/message.rb#1960
  def is_marked_for_delete?; end

  # source://mail//lib/mail/message.rb#682
  def keywords(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#686
  def keywords=(val); end

  # source://mail//lib/mail/message.rb#1513
  def main_type; end

  # source://mail//lib/mail/message.rb#1947
  def mark_for_delete=(value = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#703
  def message_id(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#712
  def message_id=(val); end

  # source://mail//lib/mail/message.rb#1377
  def method_missing(name, *args, &block); end

  # source://mail//lib/mail/message.rb#1492
  def mime_type; end

  # source://mail//lib/mail/message.rb#729
  def mime_version(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#739
  def mime_version=(val); end

  # source://mail//lib/mail/message.rb#1528
  def multipart?; end

  # source://mail//lib/mail/message.rb#1533
  def multipart_report?; end

  # source://mail//lib/mail/message.rb#1722
  def part(params = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1588
  def parts; end

  # source://mail//lib/mail/message.rb#223
  def perform_deliveries; end

  # source://mail//lib/mail/message.rb#223
  def perform_deliveries=(_arg0); end

  # source://mail//lib/mail/message.rb#230
  def raise_delivery_errors; end

  # source://mail//lib/mail/message.rb#230
  def raise_delivery_errors=(_arg0); end

  # source://mail//lib/mail/message.rb#410
  def raw_envelope; end

  # source://mail//lib/mail/message.rb#397
  def raw_source; end

  # source://mail//lib/mail/message.rb#1899
  def read; end

  # source://mail//lib/mail/message.rb#1791
  def ready_to_send!; end

  # source://mail//lib/mail/message.rb#743
  def received(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#751
  def received=(val); end

  # source://mail//lib/mail/message.rb#755
  def references(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#759
  def references=(val); end

  # source://mail//lib/mail/message.rb#1574
  def remote_mta; end

  # source://mail//lib/mail/message.rb#282
  def reply(*args, &block); end

  # source://mail//lib/mail/message.rb#788
  def reply_to(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#800
  def reply_to=(val); end

  # source://mail//lib/mail/message.rb#829
  def resent_bcc(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#841
  def resent_bcc=(val); end

  # source://mail//lib/mail/message.rb#870
  def resent_cc(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#882
  def resent_cc=(val); end

  # source://mail//lib/mail/message.rb#886
  def resent_date(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#890
  def resent_date=(val); end

  # source://mail//lib/mail/message.rb#919
  def resent_from(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#931
  def resent_from=(val); end

  # source://mail//lib/mail/message.rb#935
  def resent_message_id(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#939
  def resent_message_id=(val); end

  # source://mail//lib/mail/message.rb#958
  def resent_sender(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#968
  def resent_sender=(val); end

  # source://mail//lib/mail/message.rb#997
  def resent_to(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1009
  def resent_to=(val); end

  # source://mail//lib/mail/message.rb#1578
  def retryable?; end

  # source://mail//lib/mail/message.rb#1014
  def return_path(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1019
  def return_path=(val); end

  # source://mail//lib/mail/message.rb#1037
  def sender(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1047
  def sender=(val); end

  # source://mail//lib/mail/message.rb#402
  def set_envelope(val); end

  # source://mail//lib/mail/message.rb#1939
  def skip_deletion; end

  # source://mail//lib/mail/message.rb#1067
  def smtp_envelope_from(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1081
  def smtp_envelope_from=(val); end

  # source://mail//lib/mail/message.rb#1100
  def smtp_envelope_to(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1117
  def smtp_envelope_to=(val); end

  # source://mail//lib/mail/message.rb#1518
  def sub_type; end

  # source://mail//lib/mail/message.rb#1142
  def subject(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1152
  def subject=(val); end

  # source://mail//lib/mail/message.rb#1964
  def text?; end

  # source://mail//lib/mail/message.rb#1644
  def text_part(&block); end

  # source://mail//lib/mail/message.rb#1679
  def text_part=(msg); end

  # source://mail//lib/mail/message.rb#1181
  def to(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#1193
  def to=(val); end

  # source://mail//lib/mail/message.rb#1294
  def to_addrs; end

  # source://mail//lib/mail/message.rb#1869
  def to_s; end

  # source://mail//lib/mail/message.rb#1823
  def to_yaml(opts = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#621
  def transport_encoding(val = T.unsafe(nil)); end

  # source://mail//lib/mail/message.rb#629
  def transport_encoding=(val); end

  # source://mail//lib/mail/message.rb#1811
  def without_attachments!; end

  private

  # source://mail//lib/mail/message.rb#2067
  def add_boundary; end

  # source://mail//lib/mail/message.rb#2032
  def add_encoding_to_body; end

  # source://mail//lib/mail/message.rb#2062
  def add_multipart_alternate_header; end

  # source://mail//lib/mail/message.rb#2079
  def add_multipart_mixed_header; end

  # source://mail//lib/mail/message.rb#2048
  def add_required_fields; end

  # source://mail//lib/mail/message.rb#2056
  def add_required_message_fields; end

  # source://mail//lib/mail/message.rb#2025
  def allowed_encodings; end

  # source://mail//lib/mail/message.rb#1990
  def body_lazy(value); end

  # source://mail//lib/mail/message.rb#2152
  def decode_body_as_text; end

  # source://mail//lib/mail/message.rb#2142
  def do_delivery; end

  # source://mail//lib/mail/message.rb#2124
  def find_attachment; end

  # source://mail//lib/mail/message.rb#2038
  def identify_and_set_transfer_encoding; end

  # source://mail//lib/mail/message.rb#2086
  def init_with_hash(hash); end

  # source://mail//lib/mail/message.rb#2116
  def init_with_string(string); end

  # source://mail//lib/mail/message.rb#384
  def initialize_copy(original); end

  # source://mail//lib/mail/message.rb#1979
  def parse_message; end

  # source://mail//lib/mail/message.rb#2005
  def process_body_raw; end

  # source://mail//lib/mail/message.rb#1985
  def raw_source=(value); end

  # source://mail//lib/mail/message.rb#2021
  def separate_parts; end

  # source://mail//lib/mail/message.rb#2013
  def set_envelope_header; end

  class << self
    # source://mail//lib/mail/message.rb#232
    def default_charset; end

    # source://mail//lib/mail/message.rb#233
    def default_charset=(charset); end

    # source://mail//lib/mail/message.rb#1865
    def from_hash(hash); end

    # source://mail//lib/mail/message.rb#1843
    def from_yaml(str); end
  end
end

# source://mail//lib/mail/message.rb#1970
Mail::Message::HEADER_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/message.rb#1770
Mail::Message::MULTIPART_CONVERSION_CONTENT_FIELDS = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/fields/message_id_field.rb#21
class Mail::MessageIdField < ::Mail::CommonMessageIdField
  # source://mail//lib/mail/fields/message_id_field.rb#28
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/message_id_field.rb#33
  def message_ids; end

  class << self
    # source://mail//lib/mail/fields/message_id_field.rb#24
    def singular?; end
  end
end

# source://mail//lib/mail/fields/message_id_field.rb#22
Mail::MessageIdField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/message_ids_element.rb#7
class Mail::MessageIdsElement
  # source://mail//lib/mail/elements/message_ids_element.rb#14
  def initialize(string); end

  # source://mail//lib/mail/elements/message_ids_element.rb#18
  def message_id; end

  # source://mail//lib/mail/elements/message_ids_element.rb#12
  def message_ids; end

  private

  # source://mail//lib/mail/elements/message_ids_element.rb#23
  def parse(string); end

  class << self
    # source://mail//lib/mail/elements/message_ids_element.rb#8
    def parse(string); end
  end
end

# source://mail//lib/mail/elements/mime_version_element.rb#6
class Mail::MimeVersionElement
  # source://mail//lib/mail/elements/mime_version_element.rb#9
  def initialize(string); end

  # source://mail//lib/mail/elements/mime_version_element.rb#7
  def major; end

  # source://mail//lib/mail/elements/mime_version_element.rb#7
  def minor; end
end

# source://mail//lib/mail/fields/mime_version_field.rb#7
class Mail::MimeVersionField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/mime_version_field.rb#14
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/mime_version_field.rb#39
  def decoded; end

  # source://mail//lib/mail/fields/mime_version_field.rb#19
  def element; end

  # source://mail//lib/mail/fields/mime_version_field.rb#35
  def encoded; end

  # source://mail//lib/mail/fields/mime_version_field.rb#27
  def major; end

  # source://mail//lib/mail/fields/mime_version_field.rb#31
  def minor; end

  # source://mail//lib/mail/fields/mime_version_field.rb#23
  def version; end

  class << self
    # source://mail//lib/mail/fields/mime_version_field.rb#10
    def singular?; end
  end
end

# source://mail//lib/mail/fields/mime_version_field.rb#8
Mail::MimeVersionField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/multibyte/unicode.rb#3
module Mail::Multibyte
  class << self
    # source://mail//lib/mail/multibyte/utils.rb#36
    def clean(string); end

    # source://mail//lib/mail/multibyte/utils.rb#12
    def is_utf8?(string); end

    # source://mail//lib/mail/multibyte.rb#55
    def mb_chars(str); end

    # source://mail//lib/mail/multibyte.rb#17
    def proxy_class; end

    # source://mail//lib/mail/multibyte.rb#17
    def proxy_class=(_arg0); end

    # source://mail//lib/mail/multibyte/utils.rb#40
    def to_utf8(string); end

    # source://mail//lib/mail/multibyte/utils.rb#7
    def valid_character; end

    # source://mail//lib/mail/multibyte/utils.rb#24
    def verify(string); end

    # source://mail//lib/mail/multibyte/utils.rb#29
    def verify!(string); end
  end
end

# source://mail//lib/mail/multibyte/chars.rb#36
class Mail::Multibyte::Chars
  include ::Comparable

  # source://mail//lib/mail/multibyte/chars.rb#42
  def initialize(string); end

  # source://mail//lib/mail/multibyte/chars.rb#78
  def <=>(other); end

  # source://mail//lib/mail/multibyte/chars.rb#82
  def =~(other); end

  # source://mail//lib/mail/multibyte/chars.rb#148
  def [](*args); end

  # source://mail//lib/mail/multibyte/chars.rb#108
  def []=(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#65
  def acts_like_string?; end

  # source://mail//lib/mail/multibyte/chars.rb#201
  def capitalize; end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def capitalize!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#239
  def compose; end

  # source://mail//lib/mail/multibyte/chars.rb#230
  def decompose; end

  # source://mail//lib/mail/multibyte/chars.rb#193
  def downcase; end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def downcase!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#248
  def g_length; end

  # source://mail//lib/mail/multibyte/chars.rb#177
  def limit(limit); end

  # source://mail//lib/mail/multibyte/chars.rb#48
  def method_missing(method, *args, &block); end

  # source://mail//lib/mail/multibyte/chars.rb#221
  def normalize(form = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/chars.rb#60
  def respond_to?(method, include_private = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/chars.rb#139
  def reverse; end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def reverse!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#148
  def slice(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def slice!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#91
  def split(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#255
  def tidy_bytes(force = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def tidy_bytes!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#210
  def titlecase; end

  # source://mail//lib/mail/multibyte/chars.rb#210
  def titleize; end

  # source://mail//lib/mail/multibyte/chars.rb#37
  def to_s; end

  # source://mail//lib/mail/multibyte/chars.rb#37
  def to_str; end

  # source://mail//lib/mail/multibyte/chars.rb#185
  def upcase; end

  # source://mail//lib/mail/multibyte/chars.rb#263
  def upcase!(*args); end

  # source://mail//lib/mail/multibyte/chars.rb#37
  def wrapped_string; end

  protected

  # source://mail//lib/mail/multibyte/chars.rb#313
  def chars(string); end

  # source://mail//lib/mail/multibyte/chars.rb#288
  def justify(integer, way, padstr = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/chars.rb#305
  def padding(padsize, padstr = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/chars.rb#272
  def translate_offset(byte_offset); end
end

# source://mail//lib/mail/multibyte.rb#8
class Mail::Multibyte::EncodingError < ::StandardError; end

# source://mail//lib/mail/multibyte/unicode.rb#4
module Mail::Multibyte::Unicode
  extend ::Mail::Multibyte::Unicode

  # source://mail//lib/mail/multibyte/unicode.rb#318
  def apply_mapping(string, mapping); end

  # source://mail//lib/mail/multibyte/unicode.rb#184
  def compose_codepoints(codepoints); end

  # source://mail//lib/mail/multibyte/unicode.rb#163
  def decompose_codepoints(type, codepoints); end

  # source://mail//lib/mail/multibyte/unicode.rb#37
  def default_normalization_form; end

  # source://mail//lib/mail/multibyte/unicode.rb#37
  def default_normalization_form=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#142
  def g_pack(unpacked); end

  # source://mail//lib/mail/multibyte/unicode.rb#108
  def g_unpack(string); end

  # source://mail//lib/mail/multibyte/unicode.rb#99
  def in_char_class?(codepoint, classes); end

  # source://mail//lib/mail/multibyte/unicode.rb#300
  def normalize(string, form = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/unicode.rb#147
  def reorder_characters(codepoints); end

  # source://mail//lib/mail/multibyte/unicode.rb#245
  def tidy_bytes(string, force = T.unsafe(nil)); end

  # source://mail//lib/mail/multibyte/unicode.rb#86
  def u_unpack(string); end

  private

  # source://mail//lib/mail/multibyte/unicode.rb#399
  def database; end

  # source://mail//lib/mail/multibyte/unicode.rb#389
  def tidy_byte(byte); end

  class << self
    # source://mail//lib/mail/multibyte/unicode.rb#75
    def codepoints_to_pattern(array_of_codepoints); end
  end
end

# source://mail//lib/mail/multibyte/unicode.rb#11
class Mail::Multibyte::Unicode::Codepoint
  # source://mail//lib/mail/multibyte/unicode.rb#15
  def initialize; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def code; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def code=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def combining_class; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def combining_class=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def decomp_mapping; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def decomp_mapping=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def decomp_type; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def decomp_type=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def lowercase_mapping; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def lowercase_mapping=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#21
  def swapcase_mapping; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def uppercase_mapping; end

  # source://mail//lib/mail/multibyte/unicode.rb#12
  def uppercase_mapping=(_arg0); end
end

# source://mail//lib/mail/multibyte/unicode.rb#51
Mail::Multibyte::Unicode::HANGUL_JAMO_FIRST = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#52
Mail::Multibyte::Unicode::HANGUL_JAMO_LAST = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#42
Mail::Multibyte::Unicode::HANGUL_LBASE = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#45
Mail::Multibyte::Unicode::HANGUL_LCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#48
Mail::Multibyte::Unicode::HANGUL_NCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#41
Mail::Multibyte::Unicode::HANGUL_SBASE = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#49
Mail::Multibyte::Unicode::HANGUL_SCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#50
Mail::Multibyte::Unicode::HANGUL_SLAST = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#44
Mail::Multibyte::Unicode::HANGUL_TBASE = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#47
Mail::Multibyte::Unicode::HANGUL_TCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#43
Mail::Multibyte::Unicode::HANGUL_VBASE = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#46
Mail::Multibyte::Unicode::HANGUL_VCOUNT = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/multibyte/unicode.rb#72
Mail::Multibyte::Unicode::LEADERS_AND_TRAILERS = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/multibyte/unicode.rb#79
Mail::Multibyte::Unicode::LEADERS_PAT = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/multibyte/unicode.rb#30
Mail::Multibyte::Unicode::NORMALIZATION_FORMS = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/multibyte/unicode.rb#78
Mail::Multibyte::Unicode::TRAILERS_PAT = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/multibyte/unicode.rb#8
Mail::Multibyte::Unicode::UNICODE_VERSION = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/multibyte/unicode.rb#330
class Mail::Multibyte::Unicode::UnicodeDatabase
  # source://mail//lib/mail/multibyte/unicode.rb#335
  def initialize; end

  # source://mail//lib/mail/multibyte/unicode.rb#346
  def boundary; end

  # source://mail//lib/mail/multibyte/unicode.rb#333
  def boundary=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#346
  def codepoints; end

  # source://mail//lib/mail/multibyte/unicode.rb#333
  def codepoints=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#346
  def composition_exclusion; end

  # source://mail//lib/mail/multibyte/unicode.rb#333
  def composition_exclusion=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#346
  def composition_map; end

  # source://mail//lib/mail/multibyte/unicode.rb#333
  def composition_map=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#346
  def cp1252; end

  # source://mail//lib/mail/multibyte/unicode.rb#333
  def cp1252=(_arg0); end

  # source://mail//lib/mail/multibyte/unicode.rb#354
  def load; end

  class << self
    # source://mail//lib/mail/multibyte/unicode.rb#377
    def dirname; end

    # source://mail//lib/mail/multibyte/unicode.rb#382
    def filename; end
  end
end

# source://mail//lib/mail/multibyte/unicode.rb#331
Mail::Multibyte::Unicode::UnicodeDatabase::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/multibyte/unicode.rb#55
Mail::Multibyte::Unicode::WHITESPACE = T.let(T.unsafe(nil), Array)

# source://mail//lib/mail/multibyte.rb#64
Mail::Multibyte::VALID_CHARACTER = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/fields/named_structured_field.rb#6
class Mail::NamedStructuredField < ::Mail::StructuredField
  # source://mail//lib/mail/fields/named_structured_field.rb#7
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

# source://mail//lib/mail/fields/named_unstructured_field.rb#6
class Mail::NamedUnstructuredField < ::Mail::UnstructuredField
  # source://mail//lib/mail/fields/named_unstructured_field.rb#7
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end
end

# source://mail//lib/mail/fields/optional_field.rb#10
class Mail::OptionalField < ::Mail::UnstructuredField
  private

  # source://mail//lib/mail/fields/optional_field.rb#12
  def do_encode; end
end

# source://mail//lib/mail/network/retriever_methods/pop3.rb#35
class Mail::POP3 < ::Mail::Retriever
  # source://mail//lib/mail/network/retriever_methods/pop3.rb#38
  def initialize(values); end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#104
  def connection(&block); end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#94
  def delete_all; end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#60
  def find(options = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#48
  def settings; end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#48
  def settings=(_arg0); end

  private

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#127
  def start(config = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/pop3.rb#115
  def validate_options(options); end
end

# source://mail//lib/mail/fields/parameter_hash.rb#15
class Mail::ParameterHash < ::Mail::IndifferentHash
  # source://mail//lib/mail/fields/parameter_hash.rb#16
  def [](key_name); end

  # source://mail//lib/mail/fields/parameter_hash.rb#55
  def decoded; end

  # source://mail//lib/mail/fields/parameter_hash.rb#45
  def encoded; end
end

# source://mail//lib/mail/parser_tools.rb#3
module Mail::ParserTools
  # source://mail//lib/mail/parser_tools.rb#6
  def chars(data, from_bytes, to_bytes); end
end

# source://mail//lib/mail/parsers/date_time_parser.rb#9
module Mail::Parsers; end

# source://mail//lib/mail/parsers/address_lists_parser.rb#10
module Mail::Parsers::AddressListsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/address_lists_parser.rb#31951
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31951
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31955
    def en_main; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31955
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31946
    def error; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31946
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31942
    def first_final; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31942
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31959
    def parse(data); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31938
    def start; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31938
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31614
    def _eof_actions; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#31614
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#1300
    def _index_offsets; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#1300
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#1624
    def _indicies; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#1624
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#976
    def _key_spans; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#976
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#30983
    def _trans_actions; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#30983
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#18
    def _trans_keys; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#18
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#30352
    def _trans_targs; end

    # source://mail//lib/mail/parsers/address_lists_parser.rb#30352
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/address_lists_parser.rb#13
class Mail::Parsers::AddressListsParser::AddressListStruct < ::Struct
  def addresses; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#13
  def addresses=(_); end

  def error; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#13
  def error=(_); end

  def group_names; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#13
  def group_names=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/address_lists_parser.rb#14
class Mail::Parsers::AddressListsParser::AddressStruct < ::Struct
  def comments; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def comments=(_); end

  def display_name; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def display_name=(_); end

  def domain; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def domain=(_); end

  def error; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def error=(_); end

  def group; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def group=(_); end

  def local; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def local=(_); end

  def obs_domain_list; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def obs_domain_list=(_); end

  def raw; end

  # source://mail//lib/mail/parsers/address_lists_parser.rb#14
  def raw=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_disposition_parser.rb#10
module Mail::Parsers::ContentDispositionParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/content_disposition_parser.rb#556
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#556
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#560
    def en_main; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#560
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#551
    def error; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#551
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#547
    def first_final; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#547
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#564
    def parse(data); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#543
    def start; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#543
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#530
    def _eof_actions; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#530
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#54
    def _index_offsets; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#54
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#67
    def _indicies; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#67
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#41
    def _key_spans; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#41
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#510
    def _trans_actions; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#510
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#490
    def _trans_targs; end

    # source://mail//lib/mail/parsers/content_disposition_parser.rb#490
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_disposition_parser.rb#13
class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct < ::Struct
  def disposition_type; end

  # source://mail//lib/mail/parsers/content_disposition_parser.rb#13
  def disposition_type=(_); end

  def error; end

  # source://mail//lib/mail/parsers/content_disposition_parser.rb#13
  def error=(_); end

  def parameters; end

  # source://mail//lib/mail/parsers/content_disposition_parser.rb#13
  def parameters=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_location_parser.rb#10
module Mail::Parsers::ContentLocationParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/content_location_parser.rb#577
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#577
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#581
    def en_main; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#581
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#572
    def error; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#572
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#568
    def first_final; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#568
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#585
    def parse(data); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#564
    def start; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#564
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/content_location_parser.rb#551
    def _eof_actions; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#551
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#52
    def _index_offsets; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#52
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#65
    def _indicies; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#65
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#39
    def _key_spans; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#39
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#533
    def _trans_actions; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#533
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/content_location_parser.rb#515
    def _trans_targs; end

    # source://mail//lib/mail/parsers/content_location_parser.rb#515
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_location_parser.rb#13
class Mail::Parsers::ContentLocationParser::ContentLocationStruct < ::Struct
  def error; end

  # source://mail//lib/mail/parsers/content_location_parser.rb#13
  def error=(_); end

  def location; end

  # source://mail//lib/mail/parsers/content_location_parser.rb#13
  def location=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#10
module Mail::Parsers::ContentTransferEncodingParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#328
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#328
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#332
    def en_main; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#332
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#323
    def error; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#323
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#319
    def first_final; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#319
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#336
    def parse(data); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#315
    def start; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#315
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#304
    def _eof_actions; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#304
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#45
    def _index_offsets; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#45
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#56
    def _indicies; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#56
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#34
    def _key_spans; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#34
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#290
    def _trans_actions; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#290
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#276
    def _trans_targs; end

    # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#276
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#13
class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct < ::Struct
  def encoding; end

  # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#13
  def encoding=(_); end

  def error; end

  # source://mail//lib/mail/parsers/content_transfer_encoding_parser.rb#13
  def error=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_type_parser.rb#10
module Mail::Parsers::ContentTypeParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/content_type_parser.rb#681
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#681
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#685
    def en_main; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#685
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#676
    def error; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#676
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#672
    def first_final; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#672
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#689
    def parse(data); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#668
    def start; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#668
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/content_type_parser.rb#654
    def _eof_actions; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#654
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#58
    def _index_offsets; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#58
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#72
    def _indicies; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#72
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#44
    def _key_spans; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#44
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#632
    def _trans_actions; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#632
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/content_type_parser.rb#610
    def _trans_targs; end

    # source://mail//lib/mail/parsers/content_type_parser.rb#610
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/content_type_parser.rb#13
class Mail::Parsers::ContentTypeParser::ContentTypeStruct < ::Struct
  def error; end

  # source://mail//lib/mail/parsers/content_type_parser.rb#13
  def error=(_); end

  def main_type; end

  # source://mail//lib/mail/parsers/content_type_parser.rb#13
  def main_type=(_); end

  def parameters; end

  # source://mail//lib/mail/parsers/content_type_parser.rb#13
  def parameters=(_); end

  def sub_type; end

  # source://mail//lib/mail/parsers/content_type_parser.rb#13
  def sub_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/date_time_parser.rb#10
module Mail::Parsers::DateTimeParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/date_time_parser.rb#660
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#660
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#664
    def en_main; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#664
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#655
    def error; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#655
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#651
    def first_final; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#651
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#668
    def parse(data); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#647
    def start; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#647
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/date_time_parser.rb#626
    def _eof_actions; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#626
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#86
    def _index_offsets; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#86
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#107
    def _indicies; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#107
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#65
    def _key_spans; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#65
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#595
    def _trans_actions; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#595
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/date_time_parser.rb#564
    def _trans_targs; end

    # source://mail//lib/mail/parsers/date_time_parser.rb#564
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/date_time_parser.rb#13
class Mail::Parsers::DateTimeParser::DateTimeStruct < ::Struct
  def date_string; end

  # source://mail//lib/mail/parsers/date_time_parser.rb#13
  def date_string=(_); end

  def error; end

  # source://mail//lib/mail/parsers/date_time_parser.rb#13
  def error=(_); end

  def time_string; end

  # source://mail//lib/mail/parsers/date_time_parser.rb#13
  def time_string=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/envelope_from_parser.rb#10
module Mail::Parsers::EnvelopeFromParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3211
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3211
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3215
    def en_main; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3215
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3206
    def error; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3206
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3202
    def first_final; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3202
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3219
    def parse(data); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3198
    def start; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3198
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3152
    def _eof_actions; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3152
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#185
    def _index_offsets; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#185
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#231
    def _indicies; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#231
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#139
    def _key_spans; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#139
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3077
    def _trans_actions; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3077
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3002
    def _trans_targs; end

    # source://mail//lib/mail/parsers/envelope_from_parser.rb#3002
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/envelope_from_parser.rb#13
class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct < ::Struct
  def address; end

  # source://mail//lib/mail/parsers/envelope_from_parser.rb#13
  def address=(_); end

  def ctime_date; end

  # source://mail//lib/mail/parsers/envelope_from_parser.rb#13
  def ctime_date=(_); end

  def error; end

  # source://mail//lib/mail/parsers/envelope_from_parser.rb#13
  def error=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/message_ids_parser.rb#10
module Mail::Parsers::MessageIdsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/message_ids_parser.rb#4818
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4818
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4822
    def en_main; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4822
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4813
    def error; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4813
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4809
    def first_final; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4809
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4826
    def parse(data); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4805
    def start; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4805
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4755
    def _eof_actions; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4755
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#202
    def _index_offsets; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#202
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#252
    def _indicies; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#252
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#152
    def _key_spans; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#152
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4675
    def _trans_actions; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4675
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4595
    def _trans_targs; end

    # source://mail//lib/mail/parsers/message_ids_parser.rb#4595
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/message_ids_parser.rb#13
class Mail::Parsers::MessageIdsParser::MessageIdsStruct < ::Struct
  def error; end

  # source://mail//lib/mail/parsers/message_ids_parser.rb#13
  def error=(_); end

  def message_ids; end

  # source://mail//lib/mail/parsers/message_ids_parser.rb#13
  def message_ids=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/mime_version_parser.rb#10
module Mail::Parsers::MimeVersionParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/mime_version_parser.rb#292
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#292
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#296
    def en_main; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#296
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#287
    def error; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#287
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#283
    def first_final; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#283
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#300
    def parse(data); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#279
    def start; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#279
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/mime_version_parser.rb#268
    def _eof_actions; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#268
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#45
    def _index_offsets; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#45
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#56
    def _indicies; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#56
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#34
    def _key_spans; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#34
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#254
    def _trans_actions; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#254
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#240
    def _trans_targs; end

    # source://mail//lib/mail/parsers/mime_version_parser.rb#240
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/mime_version_parser.rb#13
class Mail::Parsers::MimeVersionParser::MimeVersionStruct < ::Struct
  def error; end

  # source://mail//lib/mail/parsers/mime_version_parser.rb#13
  def error=(_); end

  def major; end

  # source://mail//lib/mail/parsers/mime_version_parser.rb#13
  def major=(_); end

  def minor; end

  # source://mail//lib/mail/parsers/mime_version_parser.rb#13
  def minor=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/phrase_lists_parser.rb#10
class Mail::Parsers::PhraseListsParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#672
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#672
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#676
    def en_main; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#676
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#667
    def error; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#667
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#663
    def first_final; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#663
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#680
    def parse(data); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#659
    def start; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#659
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#646
    def _eof_actions; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#646
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#54
    def _index_offsets; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#54
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#67
    def _indicies; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#67
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#41
    def _key_spans; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#41
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#626
    def _trans_actions; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#626
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#606
    def _trans_targs; end

    # source://mail//lib/mail/parsers/phrase_lists_parser.rb#606
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/phrase_lists_parser.rb#13
class Mail::Parsers::PhraseListsParser::PhraseListsStruct < ::Struct
  def error; end

  # source://mail//lib/mail/parsers/phrase_lists_parser.rb#13
  def error=(_); end

  def phrases; end

  # source://mail//lib/mail/parsers/phrase_lists_parser.rb#13
  def phrases=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/parsers/received_parser.rb#10
module Mail::Parsers::ReceivedParser
  extend ::Mail::ParserTools

  class << self
    # source://mail//lib/mail/parsers/received_parser.rb#7484
    def en_comment_tail; end

    # source://mail//lib/mail/parsers/received_parser.rb#7484
    def en_comment_tail=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7488
    def en_main; end

    # source://mail//lib/mail/parsers/received_parser.rb#7488
    def en_main=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7479
    def error; end

    # source://mail//lib/mail/parsers/received_parser.rb#7479
    def error=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7475
    def first_final; end

    # source://mail//lib/mail/parsers/received_parser.rb#7475
    def first_final=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7492
    def parse(data); end

    # source://mail//lib/mail/parsers/received_parser.rb#7471
    def start; end

    # source://mail//lib/mail/parsers/received_parser.rb#7471
    def start=(_arg0); end

    private

    # source://mail//lib/mail/parsers/received_parser.rb#7382
    def _eof_actions; end

    # source://mail//lib/mail/parsers/received_parser.rb#7382
    def _eof_actions=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#358
    def _index_offsets; end

    # source://mail//lib/mail/parsers/received_parser.rb#358
    def _index_offsets=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#447
    def _indicies; end

    # source://mail//lib/mail/parsers/received_parser.rb#447
    def _indicies=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#269
    def _key_spans; end

    # source://mail//lib/mail/parsers/received_parser.rb#269
    def _key_spans=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7199
    def _trans_actions; end

    # source://mail//lib/mail/parsers/received_parser.rb#7199
    def _trans_actions=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#16
    def _trans_keys; end

    # source://mail//lib/mail/parsers/received_parser.rb#16
    def _trans_keys=(_arg0); end

    # source://mail//lib/mail/parsers/received_parser.rb#7016
    def _trans_targs; end

    # source://mail//lib/mail/parsers/received_parser.rb#7016
    def _trans_targs=(_arg0); end
  end
end

# source://mail//lib/mail/parsers/received_parser.rb#13
class Mail::Parsers::ReceivedParser::ReceivedStruct < ::Struct
  def date; end

  # source://mail//lib/mail/parsers/received_parser.rb#13
  def date=(_); end

  def error; end

  # source://mail//lib/mail/parsers/received_parser.rb#13
  def error=(_); end

  def info; end

  # source://mail//lib/mail/parsers/received_parser.rb#13
  def info=(_); end

  def time; end

  # source://mail//lib/mail/parsers/received_parser.rb#13
  def time=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://mail//lib/mail/part.rb#13
class Mail::Part < ::Mail::Message
  # source://mail//lib/mail/part.rb#65
  def action; end

  # source://mail//lib/mail/part.rb#14
  def add_content_id(content_id_val = T.unsafe(nil)); end

  # source://mail//lib/mail/part.rb#37
  def add_required_fields; end

  # source://mail//lib/mail/part.rb#42
  def add_required_message_fields; end

  # source://mail//lib/mail/part.rb#54
  def bounced?; end

  # source://mail//lib/mail/part.rb#24
  def cid; end

  # source://mail//lib/mail/part.rb#50
  def delivery_status_data; end

  # source://mail//lib/mail/part.rb#46
  def delivery_status_report_part?; end

  # source://mail//lib/mail/part.rb#77
  def diagnostic_code; end

  # source://mail//lib/mail/part.rb#73
  def error_status; end

  # source://mail//lib/mail/part.rb#69
  def final_recipient; end

  # source://mail//lib/mail/part.rb#20
  def has_content_id?; end

  # source://mail//lib/mail/part.rb#33
  def inline?; end

  # source://mail//lib/mail/part.rb#81
  def remote_mta; end

  # source://mail//lib/mail/part.rb#85
  def retryable?; end

  # source://mail//lib/mail/part.rb#29
  def url; end

  private

  # source://mail//lib/mail/part.rb#91
  def get_return_values(key); end

  # source://mail//lib/mail/part.rb#113
  def parse_delivery_status_report; end

  # source://mail//lib/mail/part.rb#102
  def parse_message; end
end

# source://mail//lib/mail/parts_list.rb#5
class Mail::PartsList
  # source://mail//lib/mail/parts_list.rb#8
  def initialize(*args); end

  # source://mail//lib/mail/parts_list.rb#24
  def attachments; end

  # source://mail//lib/mail/parts_list.rb#28
  def collect; end

  # source://mail//lib/mail/parts_list.rb#43
  def collect!; end

  # source://mail//lib/mail/parts_list.rb#98
  def delete_attachments; end

  # source://mail//lib/mail/parts_list.rb#16
  def encode_with(coder); end

  # source://mail//lib/mail/parts_list.rb#47
  def inspect_structure(parent_id = T.unsafe(nil)); end

  # source://mail//lib/mail/parts_list.rb#28
  def map; end

  # source://mail//lib/mail/parts_list.rb#39
  def map!; end

  # source://mail//lib/mail/parts_list.rb#6
  def parts; end

  # source://mail//lib/mail/parts_list.rb#83
  def recursive_delete_if; end

  # source://mail//lib/mail/parts_list.rb#63
  def recursive_each(&block); end

  # source://mail//lib/mail/parts_list.rb#77
  def recursive_size; end

  # source://mail//lib/mail/parts_list.rb#104
  def sort; end

  # source://mail//lib/mail/parts_list.rb#108
  def sort!(order); end

  # source://mail//lib/mail/parts_list.rb#20
  def to_yaml(options = T.unsafe(nil)); end

  private

  # source://mail//lib/mail/parts_list.rb#123
  def get_order_value(part, order); end
end

# source://mail//lib/mail/elements/phrase_list.rb#7
class Mail::PhraseList
  # source://mail//lib/mail/elements/phrase_list.rb#10
  def initialize(string); end

  # source://mail//lib/mail/elements/phrase_list.rb#8
  def phrases; end
end

# source://mail//lib/mail/mail.rb#241
Mail::RANDOM_TAG = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/elements/received_element.rb#8
class Mail::ReceivedElement
  # source://mail//lib/mail/elements/received_element.rb#11
  def initialize(string); end

  # source://mail//lib/mail/elements/received_element.rb#9
  def date_time; end

  # source://mail//lib/mail/elements/received_element.rb#9
  def info; end

  # source://mail//lib/mail/elements/received_element.rb#22
  def to_s(*args); end

  private

  # source://mail//lib/mail/elements/received_element.rb#27
  def datetime_for(received); end
end

# source://mail//lib/mail/fields/received_field.rb#24
class Mail::ReceivedField < ::Mail::NamedStructuredField
  # source://mail//lib/mail/fields/received_field.rb#31
  def date_time; end

  # source://mail//lib/mail/fields/received_field.rb#27
  def element; end

  # source://mail//lib/mail/fields/received_field.rb#39
  def formatted_date; end

  # source://mail//lib/mail/fields/received_field.rb#35
  def info; end

  private

  # source://mail//lib/mail/fields/received_field.rb#54
  def do_decode; end

  # source://mail//lib/mail/fields/received_field.rb#46
  def do_encode; end
end

# source://mail//lib/mail/fields/received_field.rb#25
Mail::ReceivedField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/references_field.rb#31
class Mail::ReferencesField < ::Mail::CommonMessageIdField
  # source://mail//lib/mail/fields/references_field.rb#38
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  class << self
    # source://mail//lib/mail/fields/references_field.rb#34
    def singular?; end
  end
end

# source://mail//lib/mail/fields/references_field.rb#32
Mail::ReferencesField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/reply_to_field.rb#31
class Mail::ReplyToField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/reply_to_field.rb#32
Mail::ReplyToField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_bcc_field.rb#31
class Mail::ResentBccField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/resent_bcc_field.rb#32
Mail::ResentBccField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_cc_field.rb#31
class Mail::ResentCcField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/resent_cc_field.rb#32
Mail::ResentCcField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_date_field.rb#8
class Mail::ResentDateField < ::Mail::CommonDateField; end

# source://mail//lib/mail/fields/resent_date_field.rb#9
Mail::ResentDateField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_from_field.rb#31
class Mail::ResentFromField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/resent_from_field.rb#32
Mail::ResentFromField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_message_id_field.rb#8
class Mail::ResentMessageIdField < ::Mail::CommonMessageIdField; end

# source://mail//lib/mail/fields/resent_message_id_field.rb#9
Mail::ResentMessageIdField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_sender_field.rb#30
class Mail::ResentSenderField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/resent_sender_field.rb#31
Mail::ResentSenderField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/fields/resent_to_field.rb#31
class Mail::ResentToField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/resent_to_field.rb#32
Mail::ResentToField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/network/retriever_methods/base.rb#6
class Mail::Retriever
  # source://mail//lib/mail/network/retriever_methods/base.rb#39
  def all(options = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/base.rb#56
  def find_and_delete(options = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/base.rb#14
  def first(options = T.unsafe(nil), &block); end

  # source://mail//lib/mail/network/retriever_methods/base.rb#27
  def last(options = T.unsafe(nil), &block); end
end

# source://mail//lib/mail/fields/return_path_field.rb#33
class Mail::ReturnPathField < ::Mail::CommonAddressField
  # source://mail//lib/mail/fields/return_path_field.rb#40
  def initialize(value = T.unsafe(nil), charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/return_path_field.rb#48
  def default; end

  private

  # source://mail//lib/mail/fields/return_path_field.rb#57
  def do_decode; end

  # source://mail//lib/mail/fields/return_path_field.rb#53
  def do_encode; end

  class << self
    # source://mail//lib/mail/fields/return_path_field.rb#36
    def singular?; end
  end
end

# source://mail//lib/mail/fields/return_path_field.rb#34
Mail::ReturnPathField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/network/delivery_methods/smtp.rb#76
class Mail::SMTP
  # source://mail//lib/mail/network/delivery_methods/smtp.rb#95
  def initialize(values); end

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#99
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#77
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#77
  def settings=(_arg0); end

  private

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#112
  def build_smtp_session; end

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#151
  def ssl_context; end

  # source://mail//lib/mail/network/delivery_methods/smtp.rb#108
  def start_smtp_session(&block); end
end

# source://mail//lib/mail/network/delivery_methods/smtp.rb#79
Mail::SMTP::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#40
class Mail::SMTPConnection
  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#43
  def initialize(values); end

  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#51
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#41
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#41
  def settings=(_arg0); end

  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#41
  def smtp; end

  # source://mail//lib/mail/network/delivery_methods/smtp_connection.rb#41
  def smtp=(_arg0); end
end

# source://mail//lib/mail/fields/sender_field.rb#31
class Mail::SenderField < ::Mail::CommonAddressField
  # source://mail//lib/mail/fields/sender_field.rb#42
  def addresses; end

  # source://mail//lib/mail/fields/sender_field.rb#38
  def default; end

  class << self
    # source://mail//lib/mail/fields/sender_field.rb#34
    def singular?; end
  end
end

# source://mail//lib/mail/fields/sender_field.rb#32
Mail::SenderField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/network/delivery_methods/sendmail.rb#40
class Mail::Sendmail
  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#51
  def initialize(values); end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#64
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#60
  def destinations_for(envelope); end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#46
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#46
  def settings=(_arg0); end

  private

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#129
  def deprecation_warn; end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#97
  def old_deliver(envelope); end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#88
  def popen(command, &block); end

  # source://mail//lib/mail/network/delivery_methods/sendmail.rb#118
  def shellquote(address); end
end

# source://mail//lib/mail/network/delivery_methods/sendmail.rb#41
Mail::Sendmail::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://mail//lib/mail/network/delivery_methods/sendmail.rb#48
class Mail::Sendmail::DeliveryError < ::StandardError; end

# source://mail//lib/mail/smtp_envelope.rb#4
class Mail::SmtpEnvelope
  # source://mail//lib/mail/smtp_envelope.rb#11
  def initialize(mail); end

  # source://mail//lib/mail/smtp_envelope.rb#9
  def from; end

  # source://mail//lib/mail/smtp_envelope.rb#17
  def from=(addr); end

  # source://mail//lib/mail/smtp_envelope.rb#9
  def message; end

  # source://mail//lib/mail/smtp_envelope.rb#35
  def message=(message); end

  # source://mail//lib/mail/smtp_envelope.rb#9
  def to; end

  # source://mail//lib/mail/smtp_envelope.rb#25
  def to=(addr); end

  private

  # source://mail//lib/mail/smtp_envelope.rb#45
  def validate_addr(addr_name, addr); end
end

# source://mail//lib/mail/smtp_envelope.rb#7
Mail::SmtpEnvelope::MAX_ADDRESS_BYTESIZE = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/fields/structured_field.rb#23
class Mail::StructuredField < ::Mail::CommonField; end

# source://mail//lib/mail/fields/subject_field.rb#8
class Mail::SubjectField < ::Mail::NamedUnstructuredField
  class << self
    # source://mail//lib/mail/fields/subject_field.rb#11
    def singular?; end
  end
end

# source://mail//lib/mail/fields/subject_field.rb#9
Mail::SubjectField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/network/delivery_methods/test_mailer.rb#10
class Mail::TestMailer
  # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#33
  def initialize(values); end

  # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#37
  def deliver!(mail); end

  # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#31
  def settings; end

  # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#31
  def settings=(_arg0); end

  class << self
    # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#12
    def deliveries; end

    # source://mail//lib/mail/network/delivery_methods/test_mailer.rb#27
    def deliveries=(val); end
  end
end

# source://mail//lib/mail/network/retriever_methods/test_retriever.rb#6
class Mail::TestRetriever < ::Mail::Retriever
  # source://mail//lib/mail/network/retriever_methods/test_retriever.rb#16
  def initialize(values); end

  # source://mail//lib/mail/network/retriever_methods/test_retriever.rb#20
  def find(options = T.unsafe(nil), &block); end

  class << self
    # source://mail//lib/mail/network/retriever_methods/test_retriever.rb#8
    def emails; end

    # source://mail//lib/mail/network/retriever_methods/test_retriever.rb#12
    def emails=(val); end
  end
end

# source://mail//lib/mail/fields/to_field.rb#31
class Mail::ToField < ::Mail::CommonAddressField; end

# source://mail//lib/mail/fields/to_field.rb#32
Mail::ToField::NAME = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/encodings.rb#6
class Mail::UnknownEncodingType < ::StandardError; end

# source://mail//lib/mail/fields/unstructured_field.rb#19
class Mail::UnstructuredField < ::Mail::CommonField
  # source://mail//lib/mail/fields/unstructured_field.rb#20
  def initialize(name, value, charset = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/unstructured_field.rb#40
  def parse; end

  private

  # source://mail//lib/mail/fields/unstructured_field.rb#54
  def do_decode; end

  # source://mail//lib/mail/fields/unstructured_field.rb#46
  def do_encode; end

  # source://mail//lib/mail/fields/unstructured_field.rb#169
  def encode(value); end

  # source://mail//lib/mail/fields/unstructured_field.rb#180
  def encode_crlf(value); end

  # source://mail//lib/mail/fields/unstructured_field.rb#102
  def fold(prepend = T.unsafe(nil)); end

  # source://mail//lib/mail/fields/unstructured_field.rb#186
  def normalized_encoding; end

  # source://mail//lib/mail/fields/unstructured_field.rb#96
  def wrap_lines(name, folded_lines); end

  # source://mail//lib/mail/fields/unstructured_field.rb#84
  def wrapped_value; end
end

# source://mail//lib/mail/utilities.rb#7
module Mail::Utilities
  extend ::Mail::Utilities

  # source://mail//lib/mail/utilities.rb#11
  def atom_safe?(str); end

  # source://mail//lib/mail/utilities.rb#283
  def blank?(value); end

  # source://mail//lib/mail/utilities.rb#131
  def bracket(str); end

  # source://mail//lib/mail/utilities.rb#188
  def capitalize_field(str); end

  # source://mail//lib/mail/utilities.rb#199
  def constantize(str); end

  # source://mail//lib/mail/utilities.rb#210
  def dasherize(str); end

  # source://mail//lib/mail/utilities.rb#68
  def dquote(str); end

  # source://mail//lib/mail/utilities.rb#155
  def escape_paren(str); end

  # source://mail//lib/mail/utilities.rb#293
  def generate_message_id; end

  # source://mail//lib/mail/utilities.rb#225
  def map_lines(str, &block); end

  # source://mail//lib/mail/utilities.rb#229
  def map_with_index(enum, &block); end

  # source://mail//lib/mail/utilities.rb#178
  def match_to_s(obj1, obj2); end

  # source://mail//lib/mail/utilities.rb#108
  def paren(str); end

  # source://mail//lib/mail/utilities.rb#17
  def quote_atom(str); end

  # source://mail//lib/mail/utilities.rb#23
  def quote_phrase(str); end

  # source://mail//lib/mail/utilities.rb#44
  def quote_token(str); end

  # source://mail//lib/mail/utilities.rb#38
  def token_safe?(str); end

  # source://mail//lib/mail/utilities.rb#141
  def unbracket(str); end

  # source://mail//lib/mail/utilities.rb#221
  def underscoreize(str); end

  # source://mail//lib/mail/utilities.rb#99
  def unescape(str); end

  # source://mail//lib/mail/utilities.rb#118
  def unparen(str); end

  # source://mail//lib/mail/utilities.rb#82
  def unquote(str); end

  # source://mail//lib/mail/utilities.rb#159
  def uri_escape(str); end

  # source://mail//lib/mail/utilities.rb#167
  def uri_parser; end

  # source://mail//lib/mail/utilities.rb#163
  def uri_unescape(str); end

  class << self
    # source://mail//lib/mail/utilities.rb#414
    def b_value_decode(str); end

    # source://mail//lib/mail/utilities.rb#409
    def b_value_encode(str, encoding = T.unsafe(nil)); end

    # source://mail//lib/mail/utilities.rb#243
    def binary_unsafe_to_crlf(string); end

    # source://mail//lib/mail/utilities.rb#233
    def binary_unsafe_to_lf(string); end

    # source://mail//lib/mail/utilities.rb#356
    def bracket(str); end

    # source://mail//lib/mail/utilities.rb#334
    def charset_encoder; end

    # source://mail//lib/mail/utilities.rb#334
    def charset_encoder=(_arg0); end

    # source://mail//lib/mail/utilities.rb#362
    def decode_base64(str); end

    # source://mail//lib/mail/utilities.rb#399
    def decode_utf7(utf7); end

    # source://mail//lib/mail/utilities.rb#369
    def encode_base64(str); end

    # source://mail//lib/mail/utilities.rb#388
    def encode_utf7(string); end

    # source://mail//lib/mail/utilities.rb#351
    def escape_bracket(str); end

    # source://mail//lib/mail/utilities.rb#340
    def escape_paren(str); end

    # source://mail//lib/mail/utilities.rb#377
    def get_constant(klass, string); end

    # source://mail//lib/mail/utilities.rb#373
    def has_constant?(klass, string); end

    # source://mail//lib/mail/utilities.rb#451
    def param_decode(str, encoding); end

    # source://mail//lib/mail/utilities.rb#460
    def param_encode(str); end

    # source://mail//lib/mail/utilities.rb#345
    def paren(str); end

    # source://mail//lib/mail/utilities.rb#476
    def pick_encoding(charset); end

    # source://mail//lib/mail/utilities.rb#432
    def q_value_decode(str); end

    # source://mail//lib/mail/utilities.rb#427
    def q_value_encode(str, encoding = T.unsafe(nil)); end

    # source://mail//lib/mail/utilities.rb#247
    def safe_for_line_ending_conversion?(string); end

    # source://mail//lib/mail/utilities.rb#536
    def string_byteslice(str, *args); end

    # source://mail//lib/mail/utilities.rb#269
    def to_crlf(string); end

    # source://mail//lib/mail/utilities.rb#257
    def to_lf(string); end

    # source://mail//lib/mail/utilities.rb#381
    def transcode_charset(str, from_encoding, to_encoding = T.unsafe(nil)); end

    # source://mail//lib/mail/utilities.rb#466
    def uri_parser; end

    private

    # source://mail//lib/mail/utilities.rb#543
    def convert_to_encoding(encoding); end

    # source://mail//lib/mail/utilities.rb#556
    def transcode_to_scrubbed_utf8(str); end
  end
end

# source://mail//lib/mail/utilities.rb#308
class Mail::Utilities::BestEffortCharsetEncoder
  # source://mail//lib/mail/utilities.rb#309
  def encode(string, charset); end

  private

  # source://mail//lib/mail/utilities.rb#320
  def pick_encoding(charset); end
end

# source://mail//lib/mail/utilities.rb#297
class Mail::Utilities::StrictCharsetEncoder
  # source://mail//lib/mail/utilities.rb#298
  def encode(string, charset); end
end

# source://mail//lib/mail/utilities.rb#237
Mail::Utilities::TO_CRLF_REGEX = T.let(T.unsafe(nil), Regexp)

# source://mail//lib/mail/version.rb#3
module Mail::VERSION
  class << self
    # source://mail//lib/mail/version.rb#12
    def version; end
  end
end

# source://mail//lib/mail/version.rb#8
Mail::VERSION::BUILD = T.let(T.unsafe(nil), T.untyped)

# source://mail//lib/mail/version.rb#5
Mail::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/version.rb#6
Mail::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/version.rb#7
Mail::VERSION::PATCH = T.let(T.unsafe(nil), Integer)

# source://mail//lib/mail/version.rb#10
Mail::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://mail//lib/mail/yaml.rb#4
module Mail::YAML
  class << self
    # source://mail//lib/mail/yaml.rb#5
    def load(yaml); end
  end
end
