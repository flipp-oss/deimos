# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord-import` gem.
# Please instead update this file by running `bin/tapioca gem activerecord-import`.

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#5
module ActiveRecord
  class << self
    # source://activerecord/6.1.7.3/lib/active_record.rb#168
    def eager_load!; end

    # source://activerecord/6.1.7.3/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/6.1.7.3/lib/active_record/version.rb#7
    def version; end
  end
end

# source://activerecord-import//lib/activerecord-import/import.rb#129
class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#282
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#105
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord-import//lib/activerecord-import/import.rb#130
  def bulk_import(*args, &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#115
  def concat(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#189
  def delete(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#153
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#198
  def destroy(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#175
  def destroy_all; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#235
  def empty?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#82
  def find(*args); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#307
  def find_from_target?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#45
  def ids_reader; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#56
  def ids_writer(ids); end

  # source://activerecord-import//lib/activerecord-import/import.rb#130
  def import(*args, &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#261
  def include?(record); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#273
  def load_target; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#303
  def null_scope?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#30
  def reader; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#245
  def replace(other_array); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#75
  def reset; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#297
  def scope; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#212
  def size; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#286
  def target=(record); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#134
  def transaction(*args); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#40
  def writer(records); end

  private

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#346
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#484
  def callback(method, record); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#490
  def callbacks_for(callback_name); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#430
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#377
  def delete_or_destroy(records, method); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#406
  def delete_records(records, method); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#509
  def find_by_scan(*args); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#495
  def include_in_memory?(record); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#369
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#326
  def merge_target_lists(persisted, memory); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#391
  def remove_records(existing_records, records, method); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#422
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#449
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_association.rb#410
  def replace_records(new_target, original_target); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#122
class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#30
  def initialize(klass, association, **_arg2); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1026
  def <<(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#957
  def ==(other); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def _select!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def and(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def and!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def annotate(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def annotate!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def annotate_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def annotate_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1026
  def append(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def arel(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#316
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord-import//lib/activerecord-import/import.rb#123
  def bulk_import(*args, &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#722
  def calculate(operation, column_name); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1043
  def clear; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1026
  def concat(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def construct_join_dependency(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#347
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#363
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def create_with(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def create_with!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def create_with_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def create_with_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#618
  def delete(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#472
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#690
  def destroy(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#499
  def destroy_all; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def distinct(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def distinct!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def distinct_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def distinct_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def eager_load(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def eager_load!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def eager_load_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def eager_load_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#829
  def empty?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def except(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extending(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extending!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extending_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extending_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extensions(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def extract_associated(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#136
  def find(*args); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def from(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def from!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def from_clause(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def from_clause=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def group(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def group!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def group_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def group_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def having(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def having!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def having_clause(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def having_clause=(arg); end

  # source://activerecord-import//lib/activerecord-import/import.rb#123
  def import(*args, &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#920
  def include?(record); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def includes(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def includes!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def includes_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def includes_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def insert(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def insert!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def insert_all(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def insert_all!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1095
  def inspect; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def joins(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def joins!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def joins_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def joins_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#257
  def last(limit = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def left_joins(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def left_outer_joins(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def left_outer_joins!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def left_outer_joins_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def left_outer_joins_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def limit(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def limit!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def limit_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def limit_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#42
  def load_target; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#51
  def loaded; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#51
  def loaded?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def lock(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def lock!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def lock_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def lock_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def merge(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def merge!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#316
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def none(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def none!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def offset(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def offset!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def offset_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def offset_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def only(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def optimizer_hints(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def optimizer_hints!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def optimizer_hints_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def optimizer_hints_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def or(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def or!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def order(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def order!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def order_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def order_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#726
  def pluck(*column_names); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def preload(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def preload!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def preload_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def preload_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1033
  def prepend(*args); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#924
  def proxy_association; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1026
  def push(*records); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def readonly(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def readonly!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def readonly_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def readonly_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1001
  def records; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def references(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def references!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def references_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def references_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1062
  def reload; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reorder(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reorder!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reordering_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reordering_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#389
  def replace(other_array); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reselect(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reselect!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1083
  def reset; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1089
  def reset_scope; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reverse_order(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reverse_order!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reverse_order_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def reverse_order_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def rewhere(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#929
  def scope; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def scoping(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def select_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def select_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#780
  def size; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def skip_preloading!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def skip_query_cache!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def skip_query_cache_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def skip_query_cache_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def spawn(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def strict_loading(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def strict_loading!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def strict_loading_value(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def strict_loading_value=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#287
  def take(limit = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#38
  def target; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def uniq!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def unscope(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def unscope!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def unscope_values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def unscope_values=(arg); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def upsert(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def upsert_all(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def values(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def where(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def where!(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def where_clause(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1109
  def where_clause=(arg); end

  private

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1130
  def exec_queries; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1126
  def find_from_target?; end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1117
  def find_nth_from_last(index); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1112
  def find_nth_with_limit(index, limit); end

  # source://activerecord/6.1.7.3/lib/active_record/associations/collection_proxy.rb#1122
  def null_scope?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#258
class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::ActiveRecord::Import::Connection

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks?; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _before_commit_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _commit_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _create_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _destroy_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _find_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _initialize_callbacks; end

  # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _rollback_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_commit_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_create_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_destroy_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_find_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_initialize_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_rollback_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_save_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_touch_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_update_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_validate_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_validation_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _save_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _touch_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _update_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _validate_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _validation_callbacks; end

  # source://activemodel/6.1.7.3/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/6.1.7.3/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers; end

  # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers?; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/6.1.7.3/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#144
  def column_for_attribute(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#150
  def default_connection_handler; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#150
  def default_connection_handler?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#152
  def default_role; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#152
  def default_role?; end

  # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#11
  def default_scope_override; end

  # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#10
  def default_scopes; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#154
  def default_shard; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#154
  def default_shard?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#77
  def default_timezone; end

  # source://activerecord/6.1.7.3/lib/active_record/enum.rb#109
  def defined_enums; end

  # source://activerecord/6.1.7.3/lib/active_record/enum.rb#109
  def defined_enums?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#39
  def destroy_association_async_job; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#107
  def dump_schema_after_migration; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#116
  def dump_schemas; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#94
  def error_on_ignored_order; end

  # source://activemodel/6.1.7.3/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/6.1.7.3/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/6.1.7.3/lib/active_record/autosave_association.rb#153
  def index_nested_attribute_errors; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#156
  def legacy_connection_handling; end

  # source://activerecord/6.1.7.3/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/6.1.7.3/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#20
  def logger; end

  # source://activemodel/6.1.7.3/lib/active_model/naming.rb#237
  def model_name(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/6.1.7.3/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/dirty.rb#17
  def partial_writes; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/dirty.rb#17
  def partial_writes?; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#136
  def pluralize_table_names; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#136
  def pluralize_table_names?; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#130
  def primary_key_prefix_type; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#171
  def raise_int_wider_than_64bit; end

  # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#87
  def schema_format; end

  # source://activerecord/6.1.7.3/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#41
  def store_full_class_name; end

  # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#41
  def store_full_class_name?; end

  # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#45
  def store_full_sti_class; end

  # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#45
  def store_full_sti_class?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#130
  def suppress_multiple_database_warning; end

  # source://activerecord-import//lib/activerecord-import/synchronize.rb#64
  def synchronize(instances, key = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#132
  def table_name_prefix; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#132
  def table_name_prefix?; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#133
  def table_name_suffix; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#133
  def table_name_suffix?; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#64
  def time_zone_aware_attributes; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def time_zone_aware_types; end

  # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def time_zone_aware_types?; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#99
  def timestamped_migrations; end

  # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#144
  def type_for_attribute(*_arg0, &_arg1); end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#160
  def use_yaml_unsafe_load; end

  # source://activemodel/6.1.7.3/lib/active_model/validations.rb#48
  def validation_context; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#27
  def verbose_query_logs; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#124
  def warn_on_records_fetched_greater_than; end

  # source://activerecord/6.1.7.3/lib/active_record/core.rb#164
  def yaml_column_permitted_classes; end

  private

  # source://activemodel/6.1.7.3/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks?; end

    # source://activerecord/6.1.7.3/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/6.1.7.3/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _before_commit_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _before_commit_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _commit_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _commit_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _create_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _create_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _destroy_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _destroy_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _find_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _find_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _initialize_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _initialize_callbacks=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _rollback_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _rollback_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _save_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _save_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _touch_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _touch_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _update_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _update_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _validate_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _validate_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _validation_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _validation_callbacks=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/6.1.7.3/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#140
    def action_on_strict_loading_violation; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#140
    def action_on_strict_loading_violation=(val); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#295
    def allow_unsafe_raw_sql; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#299
    def allow_unsafe_raw_sql=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers; end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers?; end

    # source://activerecord/6.1.7.3/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/6.1.7.3/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/6.1.7.3/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#134
    def belongs_to_required_by_default; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#134
    def belongs_to_required_by_default=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#134
    def belongs_to_required_by_default?; end

    # source://activerecord-import//lib/activerecord-import/import.rb#526
    def bulk_import(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#542
    def bulk_import!(*args); end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#69
    def configurations; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#63
    def configurations=(config); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#262
    def connected_to_stack; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#276
    def connection_class; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#272
    def connection_class=(b); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#280
    def connection_class?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#284
    def connection_classes; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#175
    def connection_handler; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#179
    def connection_handler=(handler); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#183
    def connection_handlers; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#191
    def connection_handlers=(handlers); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#249
    def current_preventing_writes; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#208
    def current_role; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#230
    def current_shard; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#150
    def default_connection_handler; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#150
    def default_connection_handler=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#150
    def default_connection_handler?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#152
    def default_role; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#152
    def default_role=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#152
    def default_role?; end

    # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#11
    def default_scope_override; end

    # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#11
    def default_scope_override=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#10
    def default_scopes; end

    # source://activerecord/6.1.7.3/lib/active_record/scoping/default.rb#10
    def default_scopes=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#154
    def default_shard; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#154
    def default_shard=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#154
    def default_shard?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#77
    def default_timezone; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#77
    def default_timezone=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/enum.rb#109
    def defined_enums; end

    # source://activerecord/6.1.7.3/lib/active_record/enum.rb#109
    def defined_enums=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/enum.rb#109
    def defined_enums?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#39
    def destroy_association_async_job; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#39
    def destroy_association_async_job=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#107
    def dump_schema_after_migration; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#107
    def dump_schema_after_migration=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#116
    def dump_schemas; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#116
    def dump_schemas=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#94
    def error_on_ignored_order; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#94
    def error_on_ignored_order=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#148
    def has_many_inversing; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#148
    def has_many_inversing=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#138
    def immutable_strings_by_default?; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#137
    def implicit_order_column; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#137
    def implicit_order_column=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#137
    def implicit_order_column?; end

    # source://activerecord-import//lib/activerecord-import/import.rb#526
    def import(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#542
    def import!(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#551
    def import_helper(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#755
    def import_with_validations(column_names, array_of_attributes, options = T.unsafe(nil)); end

    # source://activerecord-import//lib/activerecord-import/import.rb#774
    def import_without_validations_or_callbacks(column_names, array_of_attributes, options = T.unsafe(nil)); end

    # source://activemodel/6.1.7.3/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/6.1.7.3/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/6.1.7.3/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/6.1.7.3/lib/active_record/autosave_association.rb#153
    def index_nested_attribute_errors; end

    # source://activerecord/6.1.7.3/lib/active_record/autosave_association.rb#153
    def index_nested_attribute_errors=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#135
    def internal_metadata_table_name?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#156
    def legacy_connection_handling; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#156
    def legacy_connection_handling=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/6.1.7.3/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/6.1.7.3/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/6.1.7.3/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#20
    def logger=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#132
    def maintain_test_schema; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#132
    def maintain_test_schema=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/6.1.7.3/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/dirty.rb#17
    def partial_writes?; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#136
    def pluralize_table_names; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#136
    def pluralize_table_names=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#136
    def pluralize_table_names?; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#130
    def primary_key_prefix_type; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#130
    def primary_key_prefix_type=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#33
    def queues; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#33
    def queues=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#171
    def raise_int_wider_than_64bit; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#171
    def raise_int_wider_than_64bit=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#146
    def reading_role; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#146
    def reading_role=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#87
    def schema_format; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#87
    def schema_format=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#134
    def schema_migrations_table_name?; end

    # source://activerecord/6.1.7.3/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/6.1.7.3/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#41
    def store_full_class_name; end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#41
    def store_full_class_name=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#41
    def store_full_class_name?; end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#45
    def store_full_sti_class; end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#45
    def store_full_sti_class=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/inheritance.rb#45
    def store_full_sti_class?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#142
    def strict_loading_by_default; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#142
    def strict_loading_by_default=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#142
    def strict_loading_by_default?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#307
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord-import//lib/activerecord-import/import.rb#264
    def supports_import?(*args); end

    # source://activerecord-import//lib/activerecord-import/import.rb#271
    def supports_on_duplicate_key_update?; end

    # source://activerecord-import//lib/activerecord-import/import.rb#278
    def supports_setting_primary_key_of_imported_objects?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#130
    def suppress_multiple_database_warning; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#130
    def suppress_multiple_database_warning=(val); end

    # source://activerecord-import//lib/activerecord-import/synchronize.rb#25
    def synchronize(instances, keys = T.unsafe(nil)); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#132
    def table_name_prefix; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#132
    def table_name_prefix=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#132
    def table_name_prefix?; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#133
    def table_name_suffix; end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#133
    def table_name_suffix=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/model_schema.rb#133
    def table_name_suffix?; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#64
    def time_zone_aware_attributes; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#64
    def time_zone_aware_attributes=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types; end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def time_zone_aware_types?; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#99
    def timestamped_migrations; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#99
    def timestamped_migrations=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#160
    def use_yaml_unsafe_load; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#160
    def use_yaml_unsafe_load=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#27
    def verbose_query_logs; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#27
    def verbose_query_logs=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#124
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#124
    def warn_on_records_fetched_greater_than=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#144
    def writing_role; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#144
    def writing_role=(val); end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#164
    def yaml_column_permitted_classes; end

    # source://activerecord/6.1.7.3/lib/active_record/core.rb#164
    def yaml_column_permitted_classes=(val); end

    private

    # source://activerecord-import//lib/activerecord-import/import.rb#1037
    def add_special_rails_stamps(column_names, array_of_attributes, options); end

    # source://activerecord-import//lib/activerecord-import/import.rb#964
    def find_associated_objects_for_import(associated_objects_by_class, model); end

    # source://activerecord-import//lib/activerecord-import/import.rb#941
    def import_associations(models, options); end

    # source://activerecord-import//lib/activerecord-import/import.rb#921
    def load_association_ids(model); end

    # source://activerecord-import//lib/activerecord-import/import.rb#851
    def set_attributes_and_mark_clean(models, import_result, timestamps, options); end

    # source://activerecord-import//lib/activerecord-import/import.rb#1089
    def validate_hash_import(hash, required_keys, allow_extra_keys); end

    # source://activerecord-import//lib/activerecord-import/import.rb#1082
    def validations_array_for_column_names_and_attributes(column_names, array_of_attributes); end

    # source://activerecord-import//lib/activerecord-import/import.rb#1000
    def values_sql_for_columns_and_attributes(columns, array_of_attributes); end
  end
end

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#6
module ActiveRecord::ConnectionAdapters; end

# source://activerecord-import//lib/activerecord-import/active_record/adapters/abstract_adapter.rb#7
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Import::AbstractAdapter::InstanceMethods

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#82
  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
  def __callbacks?; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _checkin_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#835
  def _checkout_callbacks; end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_checkin_callbacks(&block); end

  # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#823
  def _run_checkout_callbacks(&block); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#469
  def active?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#261
  def adapter_name; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#429
  def advisory_locks_enabled?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#584
  def build_insert_sql(insert); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#555
  def case_insensitive_comparison(attribute, value); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#551
  def case_sensitive_comparison(attribute, value); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#599
  def check_version; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#520
  def clear_cache!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#571
  def close; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#204
  def connection_klass; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def create(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#595
  def database_version; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#575
  def default_index_type?(index); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#547
  def default_uniqueness_comparison(attribute, value); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def delete(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#422
  def disable_extension(name); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#460
  def disable_referential_integrity; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#493
  def discard!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#482
  def disconnect!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#426
  def enable_extension(name); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def exec_insert_all(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#218
  def expire; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#448
  def extensions; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#437
  def get_advisory_lock(lock_id); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#592
  def get_database_version; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def in_use?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#453
  def index_algorithms; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def insert(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#189
  def lease; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def lock; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def logger; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#134
  def migration_context; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#130
  def migrations_paths; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def owner; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool=(_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#293
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#156
  def prepared_statements; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#156
  def prepared_statements?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#161
  def prepared_statements_disabled_cache; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#122
  def preventing_writes?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#542
  def raw_connection; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#475
  def reconnect!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#444
  def release_advisory_lock(lock_id); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#105
  def replica?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#525
  def requires_reloading?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#509
  def reset!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_db_transaction(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_to_savepoint(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#208
  def schema_cache; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#212
  def schema_cache=(cache); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#138
  def schema_migration; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#247
  def seconds_idle; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#234
  def steal!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#286
  def supports_advisory_locks?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#276
  def supports_bulk_alter?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#348
  def supports_check_constraints?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#373
  def supports_comments?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#378
  def supports_comments_in_create?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#397
  def supports_common_table_expressions?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#363
  def supports_datetime_with_precision?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#272
  def supports_ddl_transactions?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#317
  def supports_explain?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#312
  def supports_expression_index?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#327
  def supports_extensions?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#338
  def supports_foreign_keys?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#388
  def supports_foreign_tables?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#302
  def supports_index_sort_order?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#333
  def supports_indexes_in_create?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#417
  def supports_insert_conflict_target?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#409
  def supports_insert_on_duplicate_skip?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#413
  def supports_insert_on_duplicate_update?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#405
  def supports_insert_returning?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#368
  def supports_json?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#401
  def supports_lazy_transactions?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#358
  def supports_materialized_views?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#393
  def supports_optimizer_hints?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#307
  def supports_partial_index?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#297
  def supports_partitioned_indexes?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#281
  def supports_savepoints?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#322
  def supports_transaction_isolation?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#343
  def supports_validate_constraints?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#353
  def supports_views?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#383
  def supports_virtual_columns?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#514
  def throw_away!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate_tables(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#252
  def unprepared_statement; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def update(*_arg0); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#109
  def use_metadata_table?; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#184
  def valid_type?(type); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#532
  def verify!; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def visitor; end

  private

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#742
  def arel_visitor; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#753
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#746
  def build_statement_pool; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#565
  def can_perform_case_insensitive_comparison_for?(column); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#728
  def collector; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#717
  def column_for(table_name, column_name); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#723
  def column_for_attribute(attribute); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#672
  def extract_limit(sql_type); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#668
  def extract_precision(sql_type); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#661
  def extract_scale(sql_type); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#609
  def initialize_type_map(m = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#686
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil)); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#647
  def register_class_with_limit(mapping, key, klass); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#654
  def register_class_with_precision(mapping, key, klass); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#642
  def reload_type_map; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#703
  def translate_exception(exception, message:, sql:, binds:); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#676
  def translate_exception_class(e, sql, binds); end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#603
  def type_map; end

  # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#713
  def without_prepared_statement?(binds); end

  class << self
    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#67
    def __callbacks?; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _checkin_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _checkin_callbacks=(value); end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#827
    def _checkout_callbacks; end

    # source://activesupport/6.1.7.3/lib/active_support/callbacks.rb#831
    def _checkout_callbacks=(value); end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#68
    def build_read_query_regexp(*parts); end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#266
    def database_exists?(config); end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#74
    def quoted_column_names; end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#78
    def quoted_table_names; end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#57
    def type_cast_config_to_boolean(config); end

    # source://activerecord/6.1.7.3/lib/active_record/connection_adapters/abstract_adapter.rb#47
    def type_cast_config_to_integer(config); end
  end
end

# source://activerecord-import//lib/activerecord-import/base.rb#7
module ActiveRecord::Import
  class << self
    # source://activerecord-import//lib/activerecord-import/base.rb#10
    def base_adapter(adapter); end

    # source://activerecord-import//lib/activerecord-import/base.rb#31
    def load_from_connection_pool(connection_pool); end

    # source://activerecord-import//lib/activerecord-import/base.rb#24
    def require_adapter(adapter); end
  end
end

# source://activerecord-import//lib/activerecord-import/base.rb#8
ActiveRecord::Import::ADAPTER_PATH = T.let(T.unsafe(nil), String)

# source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#3
module ActiveRecord::Import::AbstractAdapter; end

# source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#4
module ActiveRecord::Import::AbstractAdapter::InstanceMethods
  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#41
  def after_import_synchronize(instances); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#64
  def increment_locking_column!(table_name, results, locking_column); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#9
  def insert_many(sql, values, _options = T.unsafe(nil), *args); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#5
  def next_value_for_sequence(sequence_name); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#46
  def post_sql_statements(table_name, options); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#24
  def pre_sql_statements(options); end

  # source://activerecord-import//lib/activerecord-import/adapters/abstract_adapter.rb#70
  def supports_on_duplicate_key_update?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#250
module ActiveRecord::Import::Connection
  # source://activerecord-import//lib/activerecord-import/import.rb#251
  def establish_connection(args = T.unsafe(nil)); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#5
module ActiveRecord::Import::ConnectionAdapters; end

# source://activerecord-import//lib/activerecord-import/import.rb#10
module ActiveRecord::Import::ImportSupport
  # source://activerecord-import//lib/activerecord-import/import.rb#11
  def supports_import?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#22
class ActiveRecord::Import::MissingColumnError < ::StandardError
  # source://activerecord-import//lib/activerecord-import/import.rb#23
  def initialize(name, index); end
end

# source://activerecord-import//lib/activerecord-import/import.rb#16
module ActiveRecord::Import::OnDuplicateKeyUpdateSupport
  # source://activerecord-import//lib/activerecord-import/import.rb#17
  def supports_on_duplicate_key_update?; end
end

# source://activerecord-import//lib/activerecord-import/import.rb#8
class ActiveRecord::Import::Result < ::Struct
  def failed_instances; end

  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def failed_instances=(_); end

  def ids; end

  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def ids=(_); end

  def num_inserts; end

  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def num_inserts=(_); end

  def results; end

  # source://activerecord-import//lib/activerecord-import/import.rb#8
  def results=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://activerecord-import//lib/activerecord-import/import.rb#28
class ActiveRecord::Import::Validator
  # source://activerecord-import//lib/activerecord-import/import.rb#29
  def initialize(klass, options = T.unsafe(nil)); end

  # source://activerecord-import//lib/activerecord-import/import.rb#35
  def init_validations(klass); end

  # source://activerecord-import//lib/activerecord-import/import.rb#75
  def valid_model?(model); end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#6
class ActiveRecord::Import::ValueSetTooLargeError < ::StandardError
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#8
  def initialize(msg = T.unsafe(nil), size = T.unsafe(nil)); end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#7
  def size; end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#14
class ActiveRecord::Import::ValueSetsBytesParser
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#21
  def initialize(values, options); end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def max_bytes; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#27
  def parse; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def reserved_bytes; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#15
  def values; end

  private

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#58
  def default_max_bytes; end

  class << self
    # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#17
    def parse(values, options); end
  end
end

# source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#65
class ActiveRecord::Import::ValueSetsRecordsParser
  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#72
  def initialize(values, options); end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#66
  def max_records; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#77
  def parse; end

  # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#66
  def values; end

  class << self
    # source://activerecord-import//lib/activerecord-import/value_sets_parser.rb#68
    def parse(values, options); end
  end
end
