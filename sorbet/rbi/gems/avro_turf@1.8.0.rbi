# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `avro_turf` gem.
# Please instead update this file by running `bin/tapioca gem avro_turf`.

# source://avro_turf//lib/avro_turf/version.rb#1
class AvroTurf
  # source://avro_turf//lib/avro_turf.rb#34
  def initialize(schemas_path: T.unsafe(nil), schema_store: T.unsafe(nil), namespace: T.unsafe(nil), codec: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf.rb#96
  def decode(encoded_data, schema_name: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf.rb#109
  def decode_stream(stream, schema_name: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf.rb#50
  def encode(data, schema_name: T.unsafe(nil), namespace: T.unsafe(nil), validate: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf.rb#71
  def encode_to_stream(data, schema_name: T.unsafe(nil), stream: T.unsafe(nil), namespace: T.unsafe(nil), validate: T.unsafe(nil), validate_options: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf.rb#131
  def load_schemas!; end

  # source://avro_turf//lib/avro_turf.rb#124
  def valid?(data, schema_name: T.unsafe(nil), namespace: T.unsafe(nil)); end
end

# source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#6
class AvroTurf::CachedConfluentSchemaRegistry
  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#14
  def initialize(upstream, cache: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def check(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def compatible?(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#27
  def fetch(id); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def global_config(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#31
  def register(subject, schema); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def subject_config(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#35
  def subject_version(subject, version = T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def subject_versions(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def subjects(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def update_global_config(*args); end

  # source://avro_turf//lib/avro_turf/cached_confluent_schema_registry.rb#22
  def update_subject_config(*args); end
end

# source://avro_turf//lib/avro_turf/cached_schema_registry.rb#6
AvroTurf::CachedSchemaRegistry = AvroTurf::CachedConfluentSchemaRegistry

# source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#3
class AvroTurf::ConfluentSchemaRegistry
  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#6
  def initialize(url, logger: T.unsafe(nil), proxy: T.unsafe(nil), user: T.unsafe(nil), password: T.unsafe(nil), ssl_ca_file: T.unsafe(nil), client_cert: T.unsafe(nil), client_key: T.unsafe(nil), client_key_pass: T.unsafe(nil), client_cert_data: T.unsafe(nil), client_key_data: T.unsafe(nil), path_prefix: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#72
  def check(subject, schema); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#85
  def compatible?(subject, schema, version = T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#40
  def fetch(id); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#92
  def global_config; end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#46
  def register(subject, schema); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#102
  def subject_config(subject); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#67
  def subject_version(subject, version = T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#62
  def subject_versions(subject); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#57
  def subjects; end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#97
  def update_global_config(config); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#107
  def update_subject_config(subject, config); end

  private

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#113
  def get(path, **options); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#121
  def post(path, **options); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#117
  def put(path, **options); end

  # source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#125
  def request(path, **options); end
end

# source://avro_turf//lib/avro_turf/confluent_schema_registry.rb#4
AvroTurf::ConfluentSchemaRegistry::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://avro_turf//lib/avro_turf.rb#24
AvroTurf::DEFAULT_SCHEMAS_PATH = T.let(T.unsafe(nil), String)

# source://avro_turf//lib/avro_turf/disk_cache.rb#3
class AvroTurf::DiskCache
  # source://avro_turf//lib/avro_turf/disk_cache.rb#5
  def initialize(disk_path, logger: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#24
  def lookup_by_id(id); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#38
  def lookup_by_schema(subject, schema); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#56
  def lookup_by_version(subject, version); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#29
  def store_by_id(id, schema); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#44
  def store_by_schema(subject, schema, id); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#74
  def store_by_version(subject, version, schema); end

  private

  # source://avro_turf//lib/avro_turf/disk_cache.rb#91
  def read_from_disk_cache(path); end

  # source://avro_turf//lib/avro_turf/disk_cache.rb#109
  def write_to_disk_cache(path, hash); end
end

# source://avro_turf//lib/avro_turf.rb#18
class AvroTurf::Error < ::StandardError; end

# source://avro_turf//lib/avro_turf/in_memory_cache.rb#3
class AvroTurf::InMemoryCache
  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#5
  def initialize; end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#11
  def lookup_by_id(id); end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#19
  def lookup_by_schema(subject, schema); end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#29
  def lookup_by_version(subject, version); end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#15
  def store_by_id(id, schema); end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#24
  def store_by_schema(subject, schema, id); end

  # source://avro_turf//lib/avro_turf/in_memory_cache.rb#34
  def store_by_version(subject, version, schema); end
end

# source://avro_turf//lib/avro_turf/messaging.rb#22
class AvroTurf::Messaging
  # source://avro_turf//lib/avro_turf/messaging.rb#58
  def initialize(registry: T.unsafe(nil), registry_url: T.unsafe(nil), schema_store: T.unsafe(nil), schemas_path: T.unsafe(nil), namespace: T.unsafe(nil), registry_path_prefix: T.unsafe(nil), logger: T.unsafe(nil), proxy: T.unsafe(nil), user: T.unsafe(nil), password: T.unsafe(nil), ssl_ca_file: T.unsafe(nil), client_cert: T.unsafe(nil), client_key: T.unsafe(nil), client_key_pass: T.unsafe(nil), client_cert_data: T.unsafe(nil), client_key_data: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/messaging.rb#161
  def decode(data, schema_name: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/messaging.rb#175
  def decode_message(data, schema_name: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/messaging.rb#116
  def encode(message, schema_name: T.unsafe(nil), namespace: T.unsafe(nil), subject: T.unsafe(nil), version: T.unsafe(nil), schema_id: T.unsafe(nil), validate: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/messaging.rb#206
  def fetch_schema(subject:, version: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/messaging.rb#214
  def fetch_schema_by_id(schema_id); end

  # source://avro_turf//lib/avro_turf/messaging.rb#224
  def register_schema(schema_name:, subject: T.unsafe(nil), namespace: T.unsafe(nil)); end
end

# source://avro_turf//lib/avro_turf/messaging.rb#25
class AvroTurf::Messaging::DecodedMessage
  # source://avro_turf//lib/avro_turf/messaging.rb#31
  def initialize(schema_id, writer_schema, reader_schema, message); end

  # source://avro_turf//lib/avro_turf/messaging.rb#29
  def message; end

  # source://avro_turf//lib/avro_turf/messaging.rb#28
  def reader_schema; end

  # source://avro_turf//lib/avro_turf/messaging.rb#26
  def schema_id; end

  # source://avro_turf//lib/avro_turf/messaging.rb#27
  def writer_schema; end
end

# source://avro_turf//lib/avro_turf/messaging.rb#23
AvroTurf::Messaging::MAGIC_BYTE = T.let(T.unsafe(nil), String)

# source://avro_turf//lib/avro_turf/mutable_schema_store.rb#6
class AvroTurf::MutableSchemaStore < ::AvroTurf::SchemaStore
  # source://avro_turf//lib/avro_turf/mutable_schema_store.rb#10
  def add_schema(schema_hash); end

  # source://avro_turf//lib/avro_turf/mutable_schema_store.rb#7
  def schemas; end

  # source://avro_turf//lib/avro_turf/mutable_schema_store.rb#7
  def schemas=(_arg0); end
end

# source://avro_turf//lib/avro_turf.rb#20
class AvroTurf::SchemaError < ::AvroTurf::Error; end

# source://avro_turf//lib/avro_turf.rb#22
class AvroTurf::SchemaNotFoundError < ::AvroTurf::Error; end

# source://avro_turf//lib/avro_turf/schema_registry.rb#6
AvroTurf::SchemaRegistry = AvroTurf::ConfluentSchemaRegistry

# source://avro_turf//lib/avro_turf/schema_store.rb#1
class AvroTurf::SchemaStore
  # source://avro_turf//lib/avro_turf/schema_store.rb#3
  def initialize(path: T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/schema_store.rb#14
  def find(name, namespace = T.unsafe(nil)); end

  # source://avro_turf//lib/avro_turf/schema_store.rb#30
  def load_schemas!; end

  protected

  # source://avro_turf//lib/avro_turf/schema_store.rb#99
  def build_schema_path(fullname); end

  # source://avro_turf//lib/avro_turf/schema_store.rb#49
  def load_schema!(fullname, local_schemas_cache = T.unsafe(nil)); end
end

# source://avro_turf//lib/avro_turf/version.rb#2
AvroTurf::VERSION = T.let(T.unsafe(nil), String)

# source://avro_turf//lib/avro_turf/core_ext/date.rb#1
class Date
  include ::Comparable

  # source://avro_turf//lib/avro_turf/core_ext/date.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/enumerable.rb#1
module Enumerable
  # source://avro_turf//lib/avro_turf/core_ext/enumerable.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/false_class.rb#1
class FalseClass
  # source://avro_turf//lib/avro_turf/core_ext/false_class.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/hash.rb#1
class Hash
  include ::Enumerable

  # source://avro_turf//lib/avro_turf/core_ext/hash.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/nil_class.rb#1
class NilClass
  # source://avro_turf//lib/avro_turf/core_ext/nil_class.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/numeric.rb#1
class Numeric
  include ::Comparable

  # source://avro_turf//lib/avro_turf/core_ext/numeric.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/string.rb#1
class String
  include ::Comparable

  # source://avro_turf//lib/avro_turf/core_ext/string.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/symbol.rb#1
class Symbol
  include ::Comparable

  # source://avro_turf//lib/avro_turf/core_ext/symbol.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/time.rb#1
class Time
  include ::Comparable

  # source://avro_turf//lib/avro_turf/core_ext/time.rb#2
  def as_avro; end
end

# source://avro_turf//lib/avro_turf/core_ext/true_class.rb#1
class TrueClass
  # source://avro_turf//lib/avro_turf/core_ext/true_class.rb#2
  def as_avro; end
end
