# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-test` gem.
# Please instead update this file by running `bin/tapioca gem rack-test`.

# source://rack-test//lib/rack/test/cookie_jar.rb#6
module Rack
  class << self
    # source://rack/2.2.7/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.7/lib/rack/version.rb#19
    def version; end
  end
end

# source://rack-test//lib/rack/test.rb#381
Rack::MockSession = Rack::Test::Session

# source://rack-test//lib/rack/test/cookie_jar.rb#7
module Rack::Test
  class << self
    # source://rack-test//lib/rack/test.rb#375
    def encoding_aware_strings?; end
  end
end

# source://rack-test//lib/rack/test/cookie_jar.rb#10
class Rack::Test::Cookie
  include ::Rack::Utils

  # source://rack-test//lib/rack/test/cookie_jar.rb#23
  def initialize(raw, uri = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#107
  def <=>(other); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#59
  def domain; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#54
  def empty?; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#86
  def expired?; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#81
  def expires; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#71
  def http_only?; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#102
  def matches?(uri); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#14
  def name; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#76
  def path; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#21
  def raw; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#49
  def replaces?(other); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#65
  def secure?; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#112
  def to_h; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#112
  def to_hash; end

  # source://rack-test//lib/rack/test/cookie_jar.rb#91
  def valid?(uri); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#17
  def value; end

  private

  # source://rack-test//lib/rack/test/cookie_jar.rb#124
  def default_uri; end
end

# source://rack-test//lib/rack/test/cookie_jar.rb#133
class Rack::Test::CookieJar
  # source://rack-test//lib/rack/test/cookie_jar.rb#136
  def initialize(cookies = T.unsafe(nil), default_host = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#198
  def <<(new_cookie); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#149
  def [](name); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#159
  def []=(name, value); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#173
  def delete(name); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#209
  def for(uri); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#165
  def get_cookie(name); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#183
  def merge(raw_cookies, uri = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#226
  def to_hash; end

  private

  # source://rack-test//lib/rack/test/cookie_jar.rb#245
  def each_cookie_for(uri); end

  # source://rack-test//lib/rack/test/cookie_jar.rb#142
  def initialize_copy(other); end
end

# source://rack-test//lib/rack/test/cookie_jar.rb#134
Rack::Test::CookieJar::DELIMITER = T.let(T.unsafe(nil), String)

# source://rack-test//lib/rack/test.rb#33
Rack::Test::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://rack-test//lib/rack/test.rb#42
Rack::Test::END_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack-test//lib/rack/test.rb#45
class Rack::Test::Error < ::StandardError; end

# source://rack-test//lib/rack/test.rb#36
Rack::Test::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack-test//lib/rack/test/methods.rb#24
module Rack::Test::Methods
  extend ::Forwardable

  # source://rack-test//lib/rack/test/methods.rb#90
  def _rack_test_current_session=(_arg0); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def authorize(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def basic_authorize(*args, &block); end

  # source://rack-test//lib/rack/test/methods.rb#40
  def build_rack_test_session(_name); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def clear_cookies(*args, &block); end

  # source://rack-test//lib/rack/test/methods.rb#55
  def current_session; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def custom_request(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def delete(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def env(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def follow_redirect!(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def get(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def head(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def header(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def last_request(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def last_response(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def options(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def patch(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def post(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def put(*args, &block); end

  # source://rack-test//lib/rack/test/methods.rb#29
  def rack_mock_session(name = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/methods.rb#29
  def rack_test_session(name = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def request(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def set_cookie(*args, &block); end

  # source://rack-test//lib/rack/test/methods.rb#61
  def with_session(name); end

  private

  # source://rack-test//lib/rack/test/methods.rb#90
  def _rack_test_current_session; end
end

# source://rack-test//lib/rack/test.rb#39
Rack::Test::START_BOUNDARY = T.let(T.unsafe(nil), String)

# source://rack-test//lib/rack/test.rb#53
class Rack::Test::Session
  include ::Rack::Utils
  include ::Rack::Test::Utils
  extend ::Forwardable

  # source://rack-test//lib/rack/test.rb#99
  def initialize(app, default_host = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test.rb#118
  def after_request(&block); end

  # source://rack-test//lib/rack/test.rb#198
  def authorize(username, password); end

  # source://rack-test//lib/rack/test.rb#198
  def basic_authorize(username, password); end

  # source://rack-test//lib/rack/test.rb#123
  def clear_cookies; end

  # source://rack-test//lib/rack/test.rb#67
  def cookie_jar; end

  # source://rack-test//lib/rack/test.rb#67
  def cookie_jar=(_arg0); end

  # source://rack-test//lib/rack/test.rb#160
  def custom_request(verb, uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#70
  def default_host; end

  # source://rack-test//lib/rack/test.rb#111
  def delete(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#185
  def env(name, value); end

  # source://rack-test//lib/rack/test.rb#209
  def follow_redirect!; end

  # source://rack-test//lib/rack/test.rb#111
  def get(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#111
  def head(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#173
  def header(name, value); end

  # source://rack-test//lib/rack/test.rb#134
  def last_request; end

  # source://rack-test//lib/rack/test.rb#141
  def last_response; end

  # source://rack-test//lib/rack/test.rb#111
  def options(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#111
  def patch(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#111
  def post(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#111
  def put(uri, params = T.unsafe(nil), env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#150
  def request(uri, env = T.unsafe(nil), &block); end

  # source://rack-test//lib/rack/test.rb#240
  def restore_state; end

  # source://rack-test//lib/rack/test.rb#128
  def set_cookie(cookie, uri = T.unsafe(nil)); end

  private

  # source://rack-test//lib/rack/test.rb#340
  def append_query_params(query_array, query_params); end

  # source://rack-test//lib/rack/test.rb#266
  def close_body(body); end

  # source://rack-test//lib/rack/test.rb#293
  def env_for(uri, env); end

  # source://rack-test//lib/rack/test.rb#346
  def multipart_content_type(env); end

  # source://rack-test//lib/rack/test.rb#271
  def parse_uri(path, env); end

  # source://rack-test//lib/rack/test.rb#357
  def process_request(uri, env); end

  class << self
    # source://rack-test//lib/rack/test.rb#57
    def new(app, default_host = T.unsafe(nil)); end
  end
end

# source://rack-test//lib/rack/test.rb#279
Rack::Test::Session::DEFAULT_ENV = T.let(T.unsafe(nil), Hash)

# source://rack-test//lib/rack/test/uploaded_file.rb#14
class Rack::Test::UploadedFile
  # source://rack-test//lib/rack/test/uploaded_file.rb#31
  def initialize(content, content_type = T.unsafe(nil), binary = T.unsafe(nil), original_filename: T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#60
  def append_to(buffer); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#22
  def content_type; end

  # source://rack-test//lib/rack/test/uploaded_file.rb#22
  def content_type=(_arg0); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#46
  def local_path; end

  # source://rack-test//lib/rack/test/uploaded_file.rb#52
  def method_missing(method_name, *args, &block); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#16
  def original_filename; end

  # source://rack-test//lib/rack/test/uploaded_file.rb#46
  def path; end

  # source://rack-test//lib/rack/test/uploaded_file.rb#19
  def tempfile; end

  private

  # source://rack-test//lib/rack/test/uploaded_file.rb#98
  def initialize_from_file_path(path); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#90
  def initialize_from_stringio(stringio); end

  # source://rack-test//lib/rack/test/uploaded_file.rb#71
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # source://rack-test//lib/rack/test/uploaded_file.rb#82
    def actually_finalize(file); end

    # source://rack-test//lib/rack/test/uploaded_file.rb#76
    def finalize(file); end
  end
end

# source://rack-test//lib/rack/test/utils.rb#5
module Rack::Test::Utils
  include ::Rack::Utils
  extend ::Rack::Utils
  extend ::Rack::Test::Utils

  # source://rack-test//lib/rack/test/utils.rb#34
  def build_multipart(params, _first = T.unsafe(nil), multipart = T.unsafe(nil)); end

  # source://rack-test//lib/rack/test/utils.rb#11
  def build_nested_query(value, prefix = T.unsafe(nil)); end

  private

  # source://rack-test//lib/rack/test/utils.rb#100
  def _build_parts(buffer, parameters); end

  # source://rack-test//lib/rack/test/utils.rb#133
  def build_file_part(buffer, parameter_name, uploaded_file); end

  # source://rack-test//lib/rack/test/utils.rb#94
  def build_parts(buffer, parameters); end

  # source://rack-test//lib/rack/test/utils.rb#121
  def build_primitive_part(buffer, parameter_name, value); end

  # source://rack-test//lib/rack/test/utils.rb#62
  def normalize_multipart_params(params, first = T.unsafe(nil)); end
end

# source://rack-test//lib/rack/test/version.rb#3
Rack::Test::VERSION = T.let(T.unsafe(nil), String)
