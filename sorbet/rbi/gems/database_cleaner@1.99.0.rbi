# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `database_cleaner` gem.
# Please instead update this file by running `bin/tapioca gem database_cleaner`.

# source://database_cleaner//lib/database_cleaner/version.rb#1
module DatabaseCleaner
  private

  # source://database_cleaner//lib/database_cleaner/deprecation.rb#9
  def called_externally?(file, caller); end

  # source://database_cleaner//lib/database_cleaner/deprecation.rb#2
  def deprecate(message); end

  class << self
    # source://forwardable/1.3.1/forwardable.rb#226
    def [](*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def add_cleaner(*args, &block); end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def allow_production; end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def allow_production=(_arg0); end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def allow_remote_database_url; end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def allow_remote_database_url=(_arg0); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def app_root(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def app_root=(*args, &block); end

    # source://database_cleaner//lib/database_cleaner/deprecation.rb#9
    def called_externally?(file, caller); end

    # source://database_cleaner//lib/database_cleaner.rb#36
    def can_detect_orm?; end

    # source://forwardable/1.3.1/forwardable.rb#226
    def clean(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def clean!(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def clean_with(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def clean_with!(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def cleaners(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def cleaners=(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def cleaning(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def connections(*args, &block); end

    # source://database_cleaner//lib/database_cleaner/deprecation.rb#2
    def deprecate(message); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def init_cleaners(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def logger(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def logger=(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def orm=(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def remove_duplicates(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def start(*args, &block); end

    # source://forwardable/1.3.1/forwardable.rb#226
    def strategy=(*args, &block); end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def url_whitelist; end

    # source://database_cleaner//lib/database_cleaner.rb#34
    def url_whitelist=(_arg0); end

    private

    # source://database_cleaner//lib/database_cleaner.rb#43
    def configuration; end
  end
end

# source://database_cleaner//lib/database_cleaner/base.rb#8
class DatabaseCleaner::Base
  include ::Comparable
  extend ::Forwardable

  # source://database_cleaner//lib/database_cleaner/base.rb#15
  def initialize(desired_orm = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://database_cleaner//lib/database_cleaner/base.rb#11
  def <=>(other); end

  # source://database_cleaner//lib/database_cleaner/base.rb#83
  def auto_detected?; end

  # source://database_cleaner//lib/database_cleaner/base.rb#88
  def autodetect_orm; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def clean(*args, &block); end

  # source://database_cleaner//lib/database_cleaner/base.rb#93
  def clean!; end

  # source://database_cleaner//lib/database_cleaner/base.rb#74
  def clean_with(*args); end

  # source://database_cleaner//lib/database_cleaner/base.rb#98
  def clean_with!; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def cleaning(*args, &block); end

  # source://database_cleaner//lib/database_cleaner/base.rb#123
  def create_strategy(*args); end

  # source://database_cleaner//lib/database_cleaner/base.rb#33
  def db; end

  # source://database_cleaner//lib/database_cleaner/base.rb#29
  def db=(desired_db); end

  # source://database_cleaner//lib/database_cleaner/base.rb#61
  def orm; end

  # source://database_cleaner//lib/database_cleaner/base.rb#63
  def orm=(desired_orm); end

  # source://database_cleaner//lib/database_cleaner/base.rb#112
  def set_strategy_db(strategy, desired_db); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def start(*args, &block); end

  # source://database_cleaner//lib/database_cleaner/base.rb#57
  def strategy; end

  # source://database_cleaner//lib/database_cleaner/base.rb#37
  def strategy=(args); end

  # source://database_cleaner//lib/database_cleaner/base.rb#105
  def strategy_db=(desired_db); end

  private

  # source://database_cleaner//lib/database_cleaner/base.rb#140
  def adapter_loaded?(orm); end

  # source://database_cleaner//lib/database_cleaner/base.rb#144
  def load_adapter(orm); end

  # source://database_cleaner//lib/database_cleaner/base.rb#133
  def orm_module; end

  # source://database_cleaner//lib/database_cleaner/base.rb#149
  def orm_strategy(strategy); end

  # source://database_cleaner//lib/database_cleaner/base.rb#162
  def require_orm_strategy(orm, strategy); end
end

# source://database_cleaner//lib/database_cleaner/configuration.rb#11
class DatabaseCleaner::Cleaners < ::Hash
  # source://database_cleaner//lib/database_cleaner/configuration.rb#12
  def [](orm, opts = T.unsafe(nil)); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#32
  def add_cleaner(orm, opts = T.unsafe(nil)); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#23
  def orm=(orm); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#36
  def remove_duplicates; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#17
  def strategy=(strategy); end
end

# source://database_cleaner//lib/database_cleaner/configuration.rb#44
class DatabaseCleaner::Configuration
  extend ::Forwardable

  # source://database_cleaner//lib/database_cleaner/configuration.rb#45
  def initialize; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#122
  def add_cleaner(orm, opts = T.unsafe(nil)); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#58
  def app_root; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#63
  def app_root=(value); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#82
  def clean; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#98
  def clean!; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#92
  def clean_with(*args); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#103
  def clean_with!(*args); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#56
  def cleaners; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#56
  def cleaners=(_arg0); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#86
  def cleaning(&inner_block); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#112
  def connections; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#108
  def init_cleaners; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#68
  def logger; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#73
  def logger=(value); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def orm=(*args, &block); end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#129
  def remove_duplicates; end

  # source://database_cleaner//lib/database_cleaner/configuration.rb#78
  def start; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def strategy=(*args, &block); end
end

# source://database_cleaner//lib/database_cleaner/deprecation.rb#14
class DatabaseCleaner::Deprecator
  # source://database_cleaner//lib/database_cleaner/deprecation.rb#15
  def initialize; end

  # source://database_cleaner//lib/database_cleaner/deprecation.rb#19
  def deprecate(method, message); end
end

# source://database_cleaner//lib/database_cleaner/configuration.rb#7
class DatabaseCleaner::NoORMDetected < ::StandardError; end

# source://database_cleaner//lib/database_cleaner/null_strategy.rb#2
class DatabaseCleaner::NullStrategy
  # source://database_cleaner//lib/database_cleaner/null_strategy.rb#11
  def clean; end

  # source://database_cleaner//lib/database_cleaner/null_strategy.rb#15
  def cleaning(&block); end

  # source://database_cleaner//lib/database_cleaner/null_strategy.rb#7
  def db=(connection); end

  # source://database_cleaner//lib/database_cleaner/null_strategy.rb#3
  def start; end
end

# source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#2
class DatabaseCleaner::ORMAutodetector
  # source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#23
  def autodetected?; end

  # source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#17
  def orm; end

  private

  # source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#29
  def autodetected_orm; end

  # source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#35
  def no_orm_detected_error; end
end

# source://database_cleaner//lib/database_cleaner/orm_autodetector.rb#3
DatabaseCleaner::ORMAutodetector::ORMS = T.let(T.unsafe(nil), Hash)

# source://database_cleaner//lib/database_cleaner/safeguard.rb#2
class DatabaseCleaner::Safeguard
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#103
  def run; end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#97
DatabaseCleaner::Safeguard::CHECKS = T.let(T.unsafe(nil), Array)

# source://database_cleaner//lib/database_cleaner/safeguard.rb#3
class DatabaseCleaner::Safeguard::Error < ::Exception; end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#16
class DatabaseCleaner::Safeguard::Error::NotWhitelistedUrl < ::DatabaseCleaner::Safeguard::Error
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#17
  def initialize; end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#10
class DatabaseCleaner::Safeguard::Error::ProductionEnv < ::DatabaseCleaner::Safeguard::Error
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#11
  def initialize(env); end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#4
class DatabaseCleaner::Safeguard::Error::RemoteDatabaseUrl < ::DatabaseCleaner::Safeguard::Error
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#5
  def initialize; end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#74
class DatabaseCleaner::Safeguard::Production
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#77
  def run; end

  private

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#83
  def given?; end

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#87
  def key; end

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#91
  def skip?; end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#75
DatabaseCleaner::Safeguard::Production::KEYS = T.let(T.unsafe(nil), Array)

# source://database_cleaner//lib/database_cleaner/safeguard.rb#41
class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#44
  def run; end

  private

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#50
  def given?; end

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#54
  def remote?(url); end

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#67
  def skip?; end
end

# source://database_cleaner//lib/database_cleaner/safeguard.rb#42
DatabaseCleaner::Safeguard::RemoteDatabaseUrl::LOCAL = T.let(T.unsafe(nil), Array)

# source://database_cleaner//lib/database_cleaner/safeguard.rb#23
class DatabaseCleaner::Safeguard::WhitelistedUrl
  # source://database_cleaner//lib/database_cleaner/safeguard.rb#24
  def run; end

  private

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#31
  def database_url_not_whitelisted?; end

  # source://database_cleaner//lib/database_cleaner/safeguard.rb#35
  def skip?; end
end

# source://database_cleaner//lib/database_cleaner/configuration.rb#8
class DatabaseCleaner::UnknownStrategySpecified < ::ArgumentError; end

# source://database_cleaner//lib/database_cleaner/version.rb#2
DatabaseCleaner::VERSION = T.let(T.unsafe(nil), String)
