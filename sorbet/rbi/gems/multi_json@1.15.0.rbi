# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `multi_json` gem.
# Please instead update this file by running `bin/tapioca gem multi_json`.

# source://multi_json//lib/multi_json/options.rb#1
module MultiJson
  include ::MultiJson::Options
  extend ::MultiJson::Options
  extend ::MultiJson

  # source://multi_json//lib/multi_json.rb#70
  def adapter; end

  # source://multi_json//lib/multi_json.rb#90
  def adapter=(new_adapter); end

  # source://multi_json//lib/multi_json.rb#26
  def cached_options(*_arg0); end

  # source://multi_json//lib/multi_json.rb#129
  def current_adapter(options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json.rb#119
  def decode(string, options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json.rb#46
  def default_adapter; end

  # source://multi_json//lib/multi_json.rb#46
  def default_engine; end

  # source://multi_json//lib/multi_json.rb#18
  def default_options; end

  # source://multi_json//lib/multi_json.rb#11
  def default_options=(value); end

  # source://multi_json//lib/multi_json.rb#138
  def dump(object, options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json.rb#138
  def encode(object, options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json.rb#70
  def engine; end

  # source://multi_json//lib/multi_json.rb#90
  def engine=(new_adapter); end

  # source://multi_json//lib/multi_json.rb#119
  def load(string, options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json.rb#98
  def load_adapter(new_adapter); end

  # source://multi_json//lib/multi_json.rb#26
  def reset_cached_options!(*_arg0); end

  # source://multi_json//lib/multi_json.rb#90
  def use(new_adapter); end

  # source://multi_json//lib/multi_json.rb#144
  def with_adapter(new_adapter); end

  # source://multi_json//lib/multi_json.rb#144
  def with_engine(new_adapter); end

  private

  # source://multi_json//lib/multi_json.rb#155
  def load_adapter_from_string_name(name); end
end

# source://multi_json//lib/multi_json.rb#31
MultiJson::ALIASES = T.let(T.unsafe(nil), Hash)

# source://multi_json//lib/multi_json/adapter.rb#5
class MultiJson::Adapter
  include ::Singleton
  extend ::MultiJson::Options
  extend ::Singleton::SingletonClassMethods

  class << self
    # source://multi_json//lib/multi_json/adapter.rb#10
    def defaults(action, value); end

    # source://multi_json//lib/multi_json/adapter.rb#24
    def dump(object, options = T.unsafe(nil)); end

    # source://multi_json//lib/multi_json/adapter.rb#18
    def load(string, options = T.unsafe(nil)); end

    private

    # source://multi_json//lib/multi_json/adapter.rb#30
    def blank?(input); end

    # source://multi_json//lib/multi_json/adapter.rb#36
    def cached_dump_options(options); end

    # source://multi_json//lib/multi_json/adapter.rb#42
    def cached_load_options(options); end
  end
end

# source://multi_json//lib/multi_json/adapter_error.rb#2
class MultiJson::AdapterError < ::ArgumentError
  # source://multi_json//lib/multi_json/adapter_error.rb#3
  def cause; end

  class << self
    # source://multi_json//lib/multi_json/adapter_error.rb#5
    def build(original_exception); end
  end
end

# source://multi_json//lib/multi_json/adapters/json_common.rb#4
module MultiJson::Adapters; end

# source://multi_json//lib/multi_json/adapters/json_common.rb#5
class MultiJson::Adapters::JsonCommon < ::MultiJson::Adapter
  # source://multi_json//lib/multi_json/adapters/json_common.rb#17
  def dump(object, options = T.unsafe(nil)); end

  # source://multi_json//lib/multi_json/adapters/json_common.rb#8
  def load(string, options = T.unsafe(nil)); end

  class << self
    # source://multi_json//lib/multi_json/adapter.rb#14
    def default_load_options; end
  end
end

# source://multi_json//lib/multi_json/adapters/json_gem.rb#7
class MultiJson::Adapters::JsonGem < ::MultiJson::Adapters::JsonCommon; end

# source://multi_json//lib/multi_json/adapters/json_gem.rb#8
MultiJson::Adapters::JsonGem::ParseError = JSON::ParserError

# source://multi_json//lib/multi_json/parse_error.rb#16
MultiJson::DecodeError = MultiJson::ParseError

# source://multi_json//lib/multi_json/parse_error.rb#16
MultiJson::LoadError = MultiJson::ParseError

# source://multi_json//lib/multi_json/options.rb#2
module MultiJson::Options
  # source://multi_json//lib/multi_json/options.rb#25
  def default_dump_options; end

  # source://multi_json//lib/multi_json/options.rb#21
  def default_load_options; end

  # source://multi_json//lib/multi_json/options.rb#17
  def dump_options(*args); end

  # source://multi_json//lib/multi_json/options.rb#8
  def dump_options=(options); end

  # source://multi_json//lib/multi_json/options.rb#13
  def load_options(*args); end

  # source://multi_json//lib/multi_json/options.rb#3
  def load_options=(options); end

  private

  # source://multi_json//lib/multi_json/options.rb#31
  def get_options(options, *args); end
end

# source://multi_json//lib/multi_json/options_cache.rb#2
module MultiJson::OptionsCache
  extend ::MultiJson::OptionsCache

  # source://multi_json//lib/multi_json/options_cache.rb#10
  def fetch(type, key, &block); end

  # source://multi_json//lib/multi_json/options_cache.rb#5
  def reset; end

  private

  # source://multi_json//lib/multi_json/options_cache.rb#24
  def write(cache, key); end
end

# source://multi_json//lib/multi_json/options_cache.rb#22
MultiJson::OptionsCache::MAX_CACHE_SIZE = T.let(T.unsafe(nil), Integer)

# source://multi_json//lib/multi_json/parse_error.rb#2
class MultiJson::ParseError < ::StandardError
  # source://multi_json//lib/multi_json/parse_error.rb#3
  def cause; end

  # source://multi_json//lib/multi_json/parse_error.rb#3
  def data; end

  class << self
    # source://multi_json//lib/multi_json/parse_error.rb#5
    def build(original_exception, data); end
  end
end

# source://multi_json//lib/multi_json.rb#33
MultiJson::REQUIREMENT_MAP = T.let(T.unsafe(nil), Array)

# source://multi_json//lib/multi_json/version.rb#16
MultiJson::VERSION = T.let(T.unsafe(nil), String)

# source://multi_json//lib/multi_json/version.rb#2
class MultiJson::Version
  class << self
    # source://multi_json//lib/multi_json/version.rb#10
    def to_s; end
  end
end

# source://multi_json//lib/multi_json/version.rb#3
MultiJson::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://multi_json//lib/multi_json/version.rb#4
MultiJson::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://multi_json//lib/multi_json/version.rb#5
MultiJson::Version::PATCH = T.let(T.unsafe(nil), Integer)

# source://multi_json//lib/multi_json/version.rb#6
MultiJson::Version::PRE = T.let(T.unsafe(nil), T.untyped)
