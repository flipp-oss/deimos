# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sqlite3` gem.
# Please instead update this file by running `bin/tapioca gem sqlite3`.

# source://sqlite3//lib/sqlite3/constants.rb#1
module SQLite3
  class << self
    # source://sqlite3//lib/sqlite3/version.rb#16
    def const_missing(name); end

    def libversion; end
    def sqlcipher?; end
    def threadsafe; end

    # source://sqlite3//lib/sqlite3.rb#14
    def threadsafe?; end
  end
end

# source://sqlite3//lib/sqlite3/errors.rb#12
class SQLite3::AbortException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#31
class SQLite3::AuthorizationException < ::SQLite3::Exception; end

class SQLite3::Backup
  def initialize(_arg0, _arg1, _arg2, _arg3); end

  def finish; end
  def pagecount; end
  def remaining; end
  def step(_arg0); end
end

class SQLite3::Blob < ::String; end

# source://sqlite3//lib/sqlite3/errors.rb#13
class SQLite3::BusyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#22
class SQLite3::CantOpenException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/constants.rb#1
module SQLite3::Constants; end

# source://sqlite3//lib/sqlite3/constants.rb#12
module SQLite3::Constants::ColumnType; end

# source://sqlite3//lib/sqlite3/constants.rb#16
SQLite3::Constants::ColumnType::BLOB = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#14
SQLite3::Constants::ColumnType::FLOAT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#13
SQLite3::Constants::ColumnType::INTEGER = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#17
SQLite3::Constants::ColumnType::NULL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#15
SQLite3::Constants::ColumnType::TEXT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#20
module SQLite3::Constants::ErrorCode; end

# source://sqlite3//lib/sqlite3/constants.rb#25
SQLite3::Constants::ErrorCode::ABORT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#44
SQLite3::Constants::ErrorCode::AUTH = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#26
SQLite3::Constants::ErrorCode::BUSY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#35
SQLite3::Constants::ErrorCode::CANTOPEN = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#40
SQLite3::Constants::ErrorCode::CONSTRAINT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#32
SQLite3::Constants::ErrorCode::CORRUPT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#47
SQLite3::Constants::ErrorCode::DONE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#37
SQLite3::Constants::ErrorCode::EMPTY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#22
SQLite3::Constants::ErrorCode::ERROR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#34
SQLite3::Constants::ErrorCode::FULL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#23
SQLite3::Constants::ErrorCode::INTERNAL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#30
SQLite3::Constants::ErrorCode::INTERRUPT = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#31
SQLite3::Constants::ErrorCode::IOERR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#27
SQLite3::Constants::ErrorCode::LOCKED = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#41
SQLite3::Constants::ErrorCode::MISMATCH = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#42
SQLite3::Constants::ErrorCode::MISUSE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#43
SQLite3::Constants::ErrorCode::NOLFS = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#28
SQLite3::Constants::ErrorCode::NOMEM = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#33
SQLite3::Constants::ErrorCode::NOTFOUND = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#21
SQLite3::Constants::ErrorCode::OK = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#24
SQLite3::Constants::ErrorCode::PERM = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#36
SQLite3::Constants::ErrorCode::PROTOCOL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#29
SQLite3::Constants::ErrorCode::READONLY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#46
SQLite3::Constants::ErrorCode::ROW = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#38
SQLite3::Constants::ErrorCode::SCHEMA = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#39
SQLite3::Constants::ErrorCode::TOOBIG = T.let(T.unsafe(nil), Integer)

module SQLite3::Constants::Open; end
SQLite3::Constants::Open::AUTOPROXY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::CREATE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::DELETEONCLOSE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::EXCLUSIVE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::FULLMUTEX = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MAIN_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MAIN_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MASTER_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::MEMORY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::NOMUTEX = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::PRIVATECACHE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::READONLY = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::READWRITE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::SHAREDCACHE = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::SUBJOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TEMP_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TEMP_JOURNAL = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::TRANSIENT_DB = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::URI = T.let(T.unsafe(nil), Integer)
SQLite3::Constants::Open::WAL = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#3
module SQLite3::Constants::TextRep; end

# source://sqlite3//lib/sqlite3/constants.rb#8
SQLite3::Constants::TextRep::ANY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#9
SQLite3::Constants::TextRep::DETERMINISTIC = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#7
SQLite3::Constants::TextRep::UTF16 = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#6
SQLite3::Constants::TextRep::UTF16BE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#5
SQLite3::Constants::TextRep::UTF16LE = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/constants.rb#4
SQLite3::Constants::TextRep::UTF8 = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/errors.rb#27
class SQLite3::ConstraintException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#19
class SQLite3::CorruptException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/database.rb#35
class SQLite3::Database
  include ::SQLite3::Pragmas

  # source://sqlite3//lib/sqlite3/database.rb#65
  def initialize(file, options = T.unsafe(nil), zvfs = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#142
  def authorizer(&block); end

  def authorizer=(_arg0); end
  def busy_handler(*_arg0); end
  def busy_timeout(_arg0); end
  def busy_timeout=(_arg0); end
  def changes; end
  def close; end
  def closed?; end
  def collation(_arg0, _arg1); end

  # source://sqlite3//lib/sqlite3/database.rb#36
  def collations; end

  # source://sqlite3//lib/sqlite3/database.rb#654
  def commit; end

  def complete?(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#445
  def create_aggregate(name, arity, step = T.unsafe(nil), finalize = T.unsafe(nil), text_rep = T.unsafe(nil), &block); end

  # source://sqlite3//lib/sqlite3/database.rb#543
  def create_aggregate_handler(handler); end

  # source://sqlite3//lib/sqlite3/database.rb#400
  def create_function(name, arity, text_rep = T.unsafe(nil), &block); end

  # source://sqlite3//lib/sqlite3/database.rb#580
  def define_aggregator(name, aggregator); end

  def define_function(_arg0); end
  def define_function_with_flags(_arg0, _arg1); end
  def enable_load_extension(_arg0); end
  def encoding; end
  def errcode; end
  def errmsg; end

  # source://sqlite3//lib/sqlite3/database.rb#183
  def execute(sql, bind_vars = T.unsafe(nil), *args, &block); end

  # source://sqlite3//lib/sqlite3/database.rb#222
  def execute2(sql, *bind_vars); end

  # source://sqlite3//lib/sqlite3/database.rb#246
  def execute_batch(sql, bind_vars = T.unsafe(nil), *args); end

  # source://sqlite3//lib/sqlite3/database.rb#303
  def execute_batch2(sql, &block); end

  def extended_result_codes=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#165
  def filename(db_name = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/database.rb#357
  def get_first_row(sql, *bind_vars); end

  # source://sqlite3//lib/sqlite3/database.rb#366
  def get_first_value(sql, *bind_vars); end

  def interrupt; end
  def last_insert_row_id; end
  def load_extension(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#151
  def prepare(sql); end

  # source://sqlite3//lib/sqlite3/database.rb#325
  def query(sql, bind_vars = T.unsafe(nil), *args); end

  # source://sqlite3//lib/sqlite3/database.rb#670
  def readonly?; end

  # source://sqlite3//lib/sqlite3/database.rb#55
  def results_as_hash; end

  # source://sqlite3//lib/sqlite3/database.rb#55
  def results_as_hash=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#663
  def rollback; end

  def total_changes; end
  def trace(*_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#632
  def transaction(mode = T.unsafe(nil)); end

  def transaction_active?; end

  # source://sqlite3//lib/sqlite3/database.rb#721
  def translate_from_db(types, row); end

  # source://sqlite3//lib/sqlite3/database.rb#134
  def translator; end

  # source://sqlite3//lib/sqlite3/database.rb#126
  def type_translation; end

  # source://sqlite3//lib/sqlite3/database.rb#117
  def type_translation=(value); end

  private

  def db_filename(_arg0); end
  def define_aggregator2(_arg0, _arg1); end
  def disable_quirk_mode; end
  def exec_batch(_arg0, _arg1); end

  # source://sqlite3//lib/sqlite3/database.rb#729
  def make_type_translator(should_translate); end

  def open16(_arg0); end
  def open_v2(_arg0, _arg1, _arg2); end

  class << self
    def open(*_arg0); end

    # source://sqlite3//lib/sqlite3/database.rb#47
    def quote(string); end
  end
end

# source://sqlite3//lib/sqlite3/database.rb#682
class SQLite3::Database::FunctionProxy
  # source://sqlite3//lib/sqlite3/database.rb#689
  def initialize; end

  # source://sqlite3//lib/sqlite3/database.rb#709
  def [](key); end

  # source://sqlite3//lib/sqlite3/database.rb#715
  def []=(key, value); end

  # source://sqlite3//lib/sqlite3/database.rb#703
  def count; end

  # source://sqlite3//lib/sqlite3/database.rb#683
  def result; end

  # source://sqlite3//lib/sqlite3/database.rb#683
  def result=(_arg0); end

  # source://sqlite3//lib/sqlite3/database.rb#696
  def set_error(error); end
end

# source://sqlite3//lib/sqlite3/database.rb#727
SQLite3::Database::NULL_TRANSLATOR = T.let(T.unsafe(nil), Proc)

# source://sqlite3//lib/sqlite3/errors.rb#24
class SQLite3::EmptyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#5
class SQLite3::Exception < ::StandardError
  # source://sqlite3//lib/sqlite3/errors.rb#6
  def code; end
end

# source://sqlite3//lib/sqlite3/errors.rb#32
class SQLite3::FormatException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#21
class SQLite3::FullException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#18
class SQLite3::IOException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#10
class SQLite3::InternalException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#17
class SQLite3::InterruptException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#14
class SQLite3::LockedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#15
class SQLite3::MemoryException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#28
class SQLite3::MismatchException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#29
class SQLite3::MisuseException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#34
class SQLite3::NotADatabaseException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#20
class SQLite3::NotFoundException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#11
class SQLite3::PermissionException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/pragmas.rb#10
module SQLite3::Pragmas
  # source://sqlite3//lib/sqlite3/pragmas.rb#104
  def application_id; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#108
  def application_id=(integer); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#112
  def auto_vacuum; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#116
  def auto_vacuum=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#120
  def automatic_index; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#124
  def automatic_index=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#128
  def busy_timeout; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#132
  def busy_timeout=(milliseconds); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#136
  def cache_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#140
  def cache_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#144
  def cache_spill; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#148
  def cache_spill=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#152
  def case_sensitive_like=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#156
  def cell_size_check; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#160
  def cell_size_check=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#164
  def checkpoint_fullfsync; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#168
  def checkpoint_fullfsync=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#172
  def collation_list(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#176
  def compile_options(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#180
  def count_changes; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#184
  def count_changes=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#188
  def data_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#192
  def database_list(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#196
  def default_cache_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#200
  def default_cache_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#204
  def default_synchronous; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#208
  def default_synchronous=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#212
  def default_temp_store; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#216
  def default_temp_store=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#220
  def defer_foreign_keys; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#224
  def defer_foreign_keys=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#228
  def encoding; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#232
  def encoding=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#236
  def foreign_key_check(*table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#240
  def foreign_key_list(table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#244
  def foreign_keys; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#248
  def foreign_keys=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#252
  def freelist_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#256
  def full_column_names; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#260
  def full_column_names=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#264
  def fullfsync; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#268
  def fullfsync=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#13
  def get_boolean_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#55
  def get_enum_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#72
  def get_int_pragma(name); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#45
  def get_query_pragma(name, *params, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#272
  def ignore_check_constraints=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#276
  def incremental_vacuum(pages, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#280
  def index_info(index, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#284
  def index_list(table, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#288
  def index_xinfo(index, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#292
  def integrity_check(*num_errors, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#296
  def journal_mode; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#300
  def journal_mode=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#304
  def journal_size_limit; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#308
  def journal_size_limit=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#312
  def legacy_file_format; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#316
  def legacy_file_format=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#320
  def locking_mode; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#324
  def locking_mode=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#328
  def max_page_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#332
  def max_page_count=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#336
  def mmap_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#340
  def mmap_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#344
  def page_count; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#348
  def page_size; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#352
  def page_size=(size); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#356
  def parser_trace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#360
  def query_only; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#364
  def query_only=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#368
  def quick_check(*num_errors, &block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#372
  def read_uncommitted; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#376
  def read_uncommitted=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#380
  def recursive_triggers; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#384
  def recursive_triggers=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#388
  def reverse_unordered_selects; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#392
  def reverse_unordered_selects=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#396
  def schema_cookie; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#400
  def schema_cookie=(cookie); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#404
  def schema_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#408
  def schema_version=(version); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#412
  def secure_delete; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#416
  def secure_delete=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#20
  def set_boolean_pragma(name, mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#64
  def set_enum_pragma(name, mode, enums); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#78
  def set_int_pragma(name, value); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#420
  def short_column_names; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#424
  def short_column_names=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#428
  def shrink_memory; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#432
  def soft_heap_limit; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#436
  def soft_heap_limit=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#440
  def stats(&block); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#444
  def synchronous; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#448
  def synchronous=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#527
  def table_info(table); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#452
  def temp_store; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#456
  def temp_store=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#460
  def threads; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#464
  def threads=(count); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#468
  def user_cookie; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#472
  def user_cookie=(cookie); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#476
  def user_version; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#480
  def user_version=(version); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#484
  def vdbe_addoptrace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#488
  def vdbe_debug=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#492
  def vdbe_listing=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#496
  def vdbe_trace; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#500
  def vdbe_trace=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#504
  def wal_autocheckpoint; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#508
  def wal_autocheckpoint=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#512
  def wal_checkpoint; end

  # source://sqlite3//lib/sqlite3/pragmas.rb#516
  def wal_checkpoint=(mode); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#520
  def writable_schema=(mode); end

  private

  # source://sqlite3//lib/sqlite3/pragmas.rb#583
  def tweak_default(hash); end

  # source://sqlite3//lib/sqlite3/pragmas.rb#567
  def version_compare(v1, v2); end
end

# source://sqlite3//lib/sqlite3/pragmas.rb#89
SQLite3::Pragmas::AUTO_VACUUM_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#99
SQLite3::Pragmas::ENCODINGS = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#92
SQLite3::Pragmas::JOURNAL_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#96
SQLite3::Pragmas::LOCKING_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#83
SQLite3::Pragmas::SYNCHRONOUS_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#86
SQLite3::Pragmas::TEMP_STORE_MODES = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/pragmas.rb#102
SQLite3::Pragmas::WAL_CHECKPOINTS = T.let(T.unsafe(nil), Array)

# source://sqlite3//lib/sqlite3/errors.rb#23
class SQLite3::ProtocolException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#33
class SQLite3::RangeException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/errors.rb#16
class SQLite3::ReadOnlyException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/resultset.rb#10
class SQLite3::ResultSet
  include ::Enumerable

  # source://sqlite3//lib/sqlite3/resultset.rb#72
  def initialize(db, stmt); end

  # source://sqlite3//lib/sqlite3/resultset.rb#149
  def close; end

  # source://sqlite3//lib/sqlite3/resultset.rb#154
  def closed?; end

  # source://sqlite3//lib/sqlite3/resultset.rb#164
  def columns; end

  # source://sqlite3//lib/sqlite3/resultset.rb#132
  def each; end

  # source://sqlite3//lib/sqlite3/resultset.rb#140
  def each_hash; end

  # source://sqlite3//lib/sqlite3/resultset.rb#86
  def eof?; end

  # source://sqlite3//lib/sqlite3/resultset.rb#103
  def next; end

  # source://sqlite3//lib/sqlite3/resultset.rb#169
  def next_hash; end

  # source://sqlite3//lib/sqlite3/resultset.rb#79
  def reset(*bind_params); end

  # source://sqlite3//lib/sqlite3/resultset.rb#159
  def types; end
end

# source://sqlite3//lib/sqlite3/resultset.rb#13
class SQLite3::ResultSet::ArrayWithTypes < ::Array
  # source://sqlite3//lib/sqlite3/resultset.rb#14
  def types; end

  # source://sqlite3//lib/sqlite3/resultset.rb#14
  def types=(_arg0); end
end

# source://sqlite3//lib/sqlite3/resultset.rb#17
class SQLite3::ResultSet::ArrayWithTypesAndFields < ::Array
  # source://sqlite3//lib/sqlite3/resultset.rb#30
  def fields; end

  # source://sqlite3//lib/sqlite3/resultset.rb#19
  def fields=(_arg0); end

  # source://sqlite3//lib/sqlite3/resultset.rb#21
  def types; end

  # source://sqlite3//lib/sqlite3/resultset.rb#18
  def types=(_arg0); end
end

# source://sqlite3//lib/sqlite3/resultset.rb#42
class SQLite3::ResultSet::HashWithTypesAndFields < ::Hash
  # source://sqlite3//lib/sqlite3/resultset.rb#64
  def [](key); end

  # source://sqlite3//lib/sqlite3/resultset.rb#55
  def fields; end

  # source://sqlite3//lib/sqlite3/resultset.rb#44
  def fields=(_arg0); end

  # source://sqlite3//lib/sqlite3/resultset.rb#46
  def types; end

  # source://sqlite3//lib/sqlite3/resultset.rb#43
  def types=(_arg0); end
end

# source://sqlite3//lib/sqlite3/errors.rb#9
class SQLite3::SQLException < ::SQLite3::Exception; end

SQLite3::SQLITE_LOADED_VERSION = T.let(T.unsafe(nil), String)
SQLite3::SQLITE_VERSION = T.let(T.unsafe(nil), String)
SQLite3::SQLITE_VERSION_NUMBER = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/errors.rb#25
class SQLite3::SchemaChangedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/statement.rb#14
class SQLite3::Statement
  include ::Enumerable

  def initialize(_arg0, _arg1); end

  # source://sqlite3//lib/sqlite3/statement.rb#94
  def active?; end

  def bind_param(_arg0, _arg1); end
  def bind_parameter_count; end

  # source://sqlite3//lib/sqlite3/statement.rb#35
  def bind_params(*bind_vars); end

  def clear_bindings!; end
  def close; end
  def closed?; end
  def column_count; end
  def column_decltype(_arg0); end
  def column_name(_arg0); end

  # source://sqlite3//lib/sqlite3/statement.rb#101
  def columns; end

  def done?; end

  # source://sqlite3//lib/sqlite3/statement.rb#106
  def each; end

  # source://sqlite3//lib/sqlite3/statement.rb#61
  def execute(*bind_vars); end

  # source://sqlite3//lib/sqlite3/statement.rb#87
  def execute!(*bind_vars, &block); end

  # source://sqlite3//lib/sqlite3/statement.rb#125
  def must_be_open!; end

  # source://sqlite3//lib/sqlite3/statement.rb#20
  def remainder; end

  def reset!; end
  def step; end

  # source://sqlite3//lib/sqlite3/statement.rb#117
  def types; end

  private

  # source://sqlite3//lib/sqlite3/statement.rb#135
  def get_metadata; end
end

# source://sqlite3//lib/sqlite3/errors.rb#26
class SQLite3::TooBigException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/translator.rb#14
class SQLite3::Translator
  # source://sqlite3//lib/sqlite3/translator.rb#18
  def initialize; end

  # source://sqlite3//lib/sqlite3/translator.rb#37
  def add_translator(type, &block); end

  # source://sqlite3//lib/sqlite3/translator.rb#49
  def translate(type, value); end

  private

  # source://sqlite3//lib/sqlite3/translator.rb#73
  def register_default_translators; end

  # source://sqlite3//lib/sqlite3/translator.rb#62
  def type_name(type); end
end

# source://sqlite3//lib/sqlite3/errors.rb#30
class SQLite3::UnsupportedException < ::SQLite3::Exception; end

# source://sqlite3//lib/sqlite3/version.rb#3
SQLite3::VERSION = T.let(T.unsafe(nil), String)

# source://sqlite3//lib/sqlite3/value.rb#5
class SQLite3::Value
  # source://sqlite3//lib/sqlite3/value.rb#8
  def initialize(db, handle); end

  # source://sqlite3//lib/sqlite3/value.rb#6
  def handle; end

  # source://sqlite3//lib/sqlite3/value.rb#21
  def length(utf16 = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/value.rb#13
  def null?; end

  # source://sqlite3//lib/sqlite3/value.rb#17
  def to_blob; end

  # source://sqlite3//lib/sqlite3/value.rb#29
  def to_f; end

  # source://sqlite3//lib/sqlite3/value.rb#33
  def to_i; end

  # source://sqlite3//lib/sqlite3/value.rb#37
  def to_int64; end

  # source://sqlite3//lib/sqlite3/value.rb#41
  def to_s(utf16 = T.unsafe(nil)); end

  # source://sqlite3//lib/sqlite3/value.rb#45
  def type; end
end

# source://sqlite3//lib/sqlite3/version.rb#5
module SQLite3::VersionProxy; end

# source://sqlite3//lib/sqlite3/version.rb#9
SQLite3::VersionProxy::BUILD = T.let(T.unsafe(nil), T.untyped)

# source://sqlite3//lib/sqlite3/version.rb#6
SQLite3::VersionProxy::MAJOR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/version.rb#7
SQLite3::VersionProxy::MINOR = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/version.rb#11
SQLite3::VersionProxy::STRING = T.let(T.unsafe(nil), String)

# source://sqlite3//lib/sqlite3/version.rb#8
SQLite3::VersionProxy::TINY = T.let(T.unsafe(nil), Integer)

# source://sqlite3//lib/sqlite3/version.rb#13
SQLite3::VersionProxy::VERSION = T.let(T.unsafe(nil), String)

# source://sqlite3//lib/sqlite3/statement.rb#4
class String
  include ::Comparable

  # source://sqlite3//lib/sqlite3/statement.rb#5
  def to_blob; end
end
