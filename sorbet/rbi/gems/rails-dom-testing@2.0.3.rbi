# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails-dom-testing` gem.
# Please instead update this file by running `bin/tapioca gem rails-dom-testing`.

# source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#4
class HTMLSelector
  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#7
  def initialize(values, previous_selection = T.unsafe(nil), &root_fallback); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#33
  def context; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#5
  def css_selector; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#5
  def message; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#25
  def select; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#19
  def selecting_no_body?; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#5
  def tests; end

  private

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#87
  def extract_equality_tests; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#59
  def extract_root(previous_selection, root_fallback); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#76
  def extract_selectors; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#35
  def filter(matches); end

  class << self
    # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#33
    def context; end
  end
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/html_selector.rb#31
HTMLSelector::NO_STRIP = T.let(T.unsafe(nil), Array)

# source://rails-dom-testing//lib/rails/dom/testing/assertions.rb#4
module Rails
  class << self
    # source://railties/6.1.7.3/lib/rails.rb#38
    def app_class; end

    # source://railties/6.1.7.3/lib/rails.rb#38
    def app_class=(_arg0); end

    # source://railties/6.1.7.3/lib/rails.rb#39
    def application; end

    # source://railties/6.1.7.3/lib/rails.rb#37
    def application=(_arg0); end

    # source://railties/6.1.7.3/lib/rails.rb#112
    def autoloaders; end

    # source://railties/6.1.7.3/lib/rails.rb#50
    def backtrace_cleaner; end

    # source://railties/6.1.7.3/lib/rails.rb#38
    def cache; end

    # source://railties/6.1.7.3/lib/rails.rb#38
    def cache=(_arg0); end

    # source://railties/6.1.7.3/lib/rails.rb#46
    def configuration; end

    # source://railties/6.1.7.3/lib/rails.rb#72
    def env; end

    # source://railties/6.1.7.3/lib/rails.rb#79
    def env=(environment); end

    # source://railties/6.1.7.3/lib/rails/gem_version.rb#5
    def gem_version; end

    # source://railties/6.1.7.3/lib/rails.rb#92
    def groups(*groups); end

    # source://railties/6.1.7.3/lib/rails.rb#43
    def initialize!(*_arg0, &_arg1); end

    # source://railties/6.1.7.3/lib/rails.rb#43
    def initialized?(*_arg0, &_arg1); end

    # source://railties/6.1.7.3/lib/rails.rb#38
    def logger; end

    # source://railties/6.1.7.3/lib/rails.rb#38
    def logger=(_arg0); end

    # source://railties/6.1.7.3/lib/rails.rb#108
    def public_path; end

    # source://railties/6.1.7.3/lib/rails.rb#63
    def root; end

    # source://railties/6.1.7.3/lib/rails/version.rb#7
    def version; end
  end
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions.rb#5
module Rails::Dom; end

# source://rails-dom-testing//lib/rails/dom/testing/assertions.rb#6
module Rails::Dom::Testing; end

# source://rails-dom-testing//lib/rails/dom/testing/assertions.rb#7
module Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  extend ::ActiveSupport::Concern
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#5
module Rails::Dom::Testing::Assertions::DomAssertions
  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#10
  def assert_dom_equal(expected, actual, message = T.unsafe(nil)); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#20
  def assert_dom_not_equal(expected, actual, message = T.unsafe(nil)); end

  protected

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#28
  def compare_doms(expected, actual); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#63
  def equal_attribute?(attr, other_attr); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#50
  def equal_attribute_nodes?(nodes, other_nodes); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#38
  def equal_children?(child, other_child); end

  private

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/dom_assertions.rb#69
  def fragment(text); end
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#7
module Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#161
  def assert_select(*args, &block); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#247
  def assert_select_email(&block); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#211
  def assert_select_encoded(element = T.unsafe(nil), &block); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#59
  def css_select(*args); end

  private

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#270
  def assert_size_match!(size, equals, css_selector, message = T.unsafe(nil)); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#264
  def document_root_element; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#282
  def nest_selection(selection); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions.rb#291
  def nodeset(node); end
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#8
module Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  extend ::ActiveSupport::Concern

  private

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#12
  def count_description(min, max, count); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/count_describable.rb#24
  def pluralize_element(quantity); end
end

# source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#1
class SubstitutionContext
  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#2
  def initialize; end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#16
  def match(matches, attribute, matcher); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#6
  def substitute!(selector, values, format_for_presentation = T.unsafe(nil)); end

  private

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#21
  def matcher_for(value, format_for_presentation); end

  # source://rails-dom-testing//lib/rails/dom/testing/assertions/selector_assertions/substitution_context.rb#30
  def substitutable?(value); end
end
