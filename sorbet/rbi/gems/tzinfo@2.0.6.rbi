# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tzinfo` gem.
# Please instead update this file by running `bin/tapioca gem tzinfo`.

# source://tzinfo//lib/tzinfo.rb#5
module TZInfo
  class << self
    # source://tzinfo//lib/tzinfo.rb#14
    def eager_load!; end
  end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#129
class TZInfo::AbsoluteDayOfYearTransitionRule < ::TZInfo::DayOfYearTransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#130
  def initialize(day, transition_at = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#153
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#153
  def eql?(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#137
  def is_always_first_day_of_year?; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#142
  def is_always_last_day_of_year?; end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#168
  def get_day(offset, year); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#173
  def hash_args; end
end

# source://tzinfo//lib/tzinfo/timezone.rb#16
class TZInfo::AmbiguousTime < ::StandardError; end

# source://tzinfo//lib/tzinfo/annual_rules.rb#9
class TZInfo::AnnualRules
  # source://tzinfo//lib/tzinfo/annual_rules.rb#36
  def initialize(std_offset, dst_offset, dst_start_rule, dst_end_rule); end

  # source://tzinfo//lib/tzinfo/annual_rules.rb#24
  def dst_end_rule; end

  # source://tzinfo//lib/tzinfo/annual_rules.rb#16
  def dst_offset; end

  # source://tzinfo//lib/tzinfo/annual_rules.rb#20
  def dst_start_rule; end

  # source://tzinfo//lib/tzinfo/annual_rules.rb#12
  def std_offset; end

  # source://tzinfo//lib/tzinfo/annual_rules.rb#49
  def transitions(year); end

  private

  # source://tzinfo//lib/tzinfo/annual_rules.rb#65
  def apply_rule(rule, from_offset, to_offset, year); end
end

# source://tzinfo//lib/tzinfo/string_deduper.rb#50
class TZInfo::ConcurrentStringDeduper < ::TZInfo::StringDeduper
  protected

  # source://tzinfo//lib/tzinfo/string_deduper.rb#53
  def create_hash(&block); end
end

# source://tzinfo//lib/tzinfo/country.rb#26
class TZInfo::Country
  include ::Comparable

  # source://tzinfo//lib/tzinfo/country.rb#72
  def initialize(info); end

  # source://tzinfo//lib/tzinfo/country.rb#162
  def <=>(c); end

  # source://tzinfo//lib/tzinfo/country.rb#185
  def =~(regexp); end

  # source://tzinfo//lib/tzinfo/country.rb#194
  def _dump(limit); end

  # source://tzinfo//lib/tzinfo/country.rb#77
  def code; end

  # source://tzinfo//lib/tzinfo/country.rb#170
  def eql?(c); end

  # source://tzinfo//lib/tzinfo/country.rb#175
  def hash; end

  # source://tzinfo//lib/tzinfo/country.rb#94
  def inspect; end

  # source://tzinfo//lib/tzinfo/country.rb#82
  def name; end

  # source://tzinfo//lib/tzinfo/country.rb#88
  def to_s; end

  # source://tzinfo//lib/tzinfo/country.rb#111
  def zone_identifiers; end

  # source://tzinfo//lib/tzinfo/country.rb#152
  def zone_info; end

  # source://tzinfo//lib/tzinfo/country.rb#111
  def zone_names; end

  # source://tzinfo//lib/tzinfo/country.rb#132
  def zones; end

  class << self
    # source://tzinfo//lib/tzinfo/country.rb#204
    def _load(data); end

    # source://tzinfo//lib/tzinfo/country.rb#52
    def all; end

    # source://tzinfo//lib/tzinfo/country.rb#46
    def all_codes; end

    # source://tzinfo//lib/tzinfo/country.rb#40
    def get(code); end

    private

    # source://tzinfo//lib/tzinfo/country.rb#59
    def data_source; end
  end
end

# source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#62
TZInfo::CountryIndexDefinition = TZInfo::Format1::CountryIndexDefinition

# source://tzinfo//lib/tzinfo/country_timezone.rb#5
class TZInfo::CountryTimezone
  # source://tzinfo//lib/tzinfo/country_timezone.rb#44
  def initialize(identifier, latitude, longitude, description = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#72
  def ==(ct); end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#31
  def description; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#63
  def description_or_friendly_identifier; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#83
  def eql?(ct); end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#89
  def hash; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#7
  def identifier; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#16
  def latitude; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#25
  def longitude; end

  # source://tzinfo//lib/tzinfo/country_timezone.rb#57
  def timezone; end
end

# source://tzinfo//lib/tzinfo/data_source.rb#29
class TZInfo::DataSource
  # source://tzinfo//lib/tzinfo/data_source.rb#166
  def initialize; end

  # source://tzinfo//lib/tzinfo/data_source.rb#246
  def country_codes; end

  # source://tzinfo//lib/tzinfo/data_source.rb#218
  def data_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_source.rb#255
  def eager_load!; end

  # source://tzinfo//lib/tzinfo/data_source.rb#237
  def get_country_info(code); end

  # source://tzinfo//lib/tzinfo/data_source.rb#184
  def get_timezone_info(identifier); end

  # source://tzinfo//lib/tzinfo/data_source.rb#268
  def inspect; end

  # source://tzinfo//lib/tzinfo/data_source.rb#228
  def linked_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_source.rb#204
  def timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_source.rb#262
  def to_s; end

  protected

  # source://tzinfo//lib/tzinfo/data_source.rb#294
  def load_country_info(code); end

  # source://tzinfo//lib/tzinfo/data_source.rb#285
  def load_timezone_info(identifier); end

  # source://tzinfo//lib/tzinfo/data_source.rb#337
  def lookup_country_info(hash, code, encoding = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/data_source.rb#300
  def timezone_identifier_encoding; end

  # source://tzinfo//lib/tzinfo/data_source.rb#315
  def validate_timezone_identifier(identifier); end

  private

  # source://tzinfo//lib/tzinfo/data_source.rb#366
  def build_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_source.rb#382
  def find_timezone_identifier(identifier); end

  # source://tzinfo//lib/tzinfo/data_source.rb#352
  def raise_invalid_data_source(method_name); end

  # source://tzinfo//lib/tzinfo/data_source.rb#436
  def try_with_encoding(string, encoding); end

  class << self
    # source://tzinfo//lib/tzinfo/data_source.rb#42
    def get; end

    # source://tzinfo//lib/tzinfo/data_source.rb#127
    def set(data_source_or_type, *args); end

    private

    # source://tzinfo//lib/tzinfo/data_source.rb#145
    def create_default_data_source; end
  end
end

# source://tzinfo//lib/tzinfo/data_source.rb#16
class TZInfo::DataSourceNotFound < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources.rb#6
module TZInfo::DataSources; end

# source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#8
class TZInfo::DataSources::ConstantOffsetDataTimezoneInfo < ::TZInfo::DataSources::DataTimezoneInfo
  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#19
  def initialize(identifier, constant_offset); end

  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#9
  def constant_offset; end

  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#28
  def period_for(timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#35
  def periods_for_local(local_timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#43
  def transitions_up_to(to_timestamp, from_timestamp = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/constant_offset_data_timezone_info.rb#51
  def constant_period; end
end

# source://tzinfo//lib/tzinfo/data_sources/country_info.rb#8
class TZInfo::DataSources::CountryInfo
  # source://tzinfo//lib/tzinfo/data_sources/country_info.rb#26
  def initialize(code, name, zones); end

  # source://tzinfo//lib/tzinfo/data_sources/country_info.rb#10
  def code; end

  # source://tzinfo//lib/tzinfo/data_sources/country_info.rb#37
  def inspect; end

  # source://tzinfo//lib/tzinfo/data_sources/country_info.rb#13
  def name; end

  # source://tzinfo//lib/tzinfo/data_sources/country_info.rb#16
  def zones; end
end

# source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#17
class TZInfo::DataSources::DataTimezoneInfo < ::TZInfo::DataSources::TimezoneInfo
  # source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#76
  def create_timezone; end

  # source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#18
  def period_for(timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#34
  def periods_for_local(local_timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#70
  def transitions_up_to(to_timestamp, from_timestamp = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/data_timezone_info.rb#86
  def raise_not_implemented(method_name); end
end

# source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#12
class TZInfo::DataSources::InvalidPosixTimeZone < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#11
class TZInfo::DataSources::InvalidZoneinfoDirectory < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#8
class TZInfo::DataSources::InvalidZoneinfoFile < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources/linked_timezone_info.rb#9
class TZInfo::DataSources::LinkedTimezoneInfo < ::TZInfo::DataSources::TimezoneInfo
  # source://tzinfo//lib/tzinfo/data_sources/linked_timezone_info.rb#20
  def initialize(identifier, link_to_identifier); end

  # source://tzinfo//lib/tzinfo/data_sources/linked_timezone_info.rb#28
  def create_timezone; end

  # source://tzinfo//lib/tzinfo/data_sources/linked_timezone_info.rb#10
  def link_to_identifier; end
end

# source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#20
class TZInfo::DataSources::PosixTimeZoneParser
  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#25
  def initialize(string_deduper); end

  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#36
  def parse(tz_string); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#169
  def check_scan(s, pattern); end

  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#132
  def get_offset_from_hms(h, m, s); end

  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#153
  def get_seconds_after_midnight_from_hms(h, m, s); end

  # source://tzinfo//lib/tzinfo/data_sources/posix_time_zone_parser.rb#92
  def parse_rule(s, type); end
end

# source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#21
class TZInfo::DataSources::RubyDataSource < ::TZInfo::DataSource
  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#34
  def initialize; end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#28
  def country_codes; end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#22
  def data_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#72
  def inspect; end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#25
  def linked_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#67
  def to_s; end

  protected

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#104
  def load_country_info(code); end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#88
  def load_timezone_info(identifier); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#128
  def require_data(*file); end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#114
  def require_definition(identifier); end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#121
  def require_index(name); end

  # source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#134
  def version_info; end
end

# source://tzinfo//lib/tzinfo/data_sources/ruby_data_source.rb#9
class TZInfo::DataSources::TZInfoDataNotFound < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#9
class TZInfo::DataSources::TimezoneInfo
  # source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#18
  def initialize(identifier); end

  # source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#31
  def create_timezone; end

  # source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#11
  def identifier; end

  # source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#25
  def inspect; end

  private

  # source://tzinfo//lib/tzinfo/data_sources/timezone_info.rb#42
  def raise_not_implemented(method_name); end
end

# source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#10
class TZInfo::DataSources::TransitionsDataTimezoneInfo < ::TZInfo::DataSources::DataTimezoneInfo
  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#31
  def initialize(identifier, transitions); end

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#39
  def period_for(timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#70
  def periods_for_local(local_timestamp); end

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#11
  def transitions; end

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#111
  def transitions_up_to(to_timestamp, from_timestamp = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#159
  def find_minimum_transition(&block); end

  # source://tzinfo//lib/tzinfo/data_sources/transitions_data_timezone_info.rb#207
  def transition_on_or_after_timestamp?(transition, timestamp); end
end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#69
class TZInfo::DataSources::ZoneinfoDataSource < ::TZInfo::DataSource
  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#237
  def initialize(zoneinfo_dir = T.unsafe(nil), alternate_iso3166_tab_path = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#204
  def country_codes; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#271
  def data_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#290
  def inspect; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#280
  def linked_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#285
  def to_s; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#201
  def zoneinfo_dir; end

  protected

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#326
  def load_country_info(code); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#306
  def load_timezone_info(identifier); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#579
  def dms_to_rational(sign, degrees, minutes, seconds = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#434
  def enum_timezones(dir, exclude = T.unsafe(nil), &block); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#389
  def find_zoneinfo_dir; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#463
  def load_countries(iso3166_tab_path, zone_tab_path); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#414
  def load_timezone_identifiers; end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#372
  def resolve_tab_path(zoneinfo_path, standard_names, tab_name); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#345
  def validate_zoneinfo_dir(path, iso3166_tab_path = T.unsafe(nil)); end

  class << self
    # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#156
    def alternate_iso3166_tab_search_path; end

    # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#173
    def alternate_iso3166_tab_search_path=(alternate_iso3166_tab_search_path); end

    # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#123
    def search_path; end

    # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#141
    def search_path=(search_path); end

    private

    # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#187
    def process_search_path(path, default); end
  end
end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#74
TZInfo::DataSources::ZoneinfoDataSource::DEFAULT_ALTERNATE_ISO3166_TAB_SEARCH_PATH = T.let(T.unsafe(nil), Array)

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#70
TZInfo::DataSources::ZoneinfoDataSource::DEFAULT_SEARCH_PATH = T.let(T.unsafe(nil), Array)

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#88
TZInfo::DataSources::ZoneinfoDataSource::EXCLUDED_FILENAMES = T.let(T.unsafe(nil), Array)

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_data_source.rb#19
class TZInfo::DataSources::ZoneinfoDirectoryNotFound < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#12
class TZInfo::DataSources::ZoneinfoReader
  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#25
  def initialize(posix_tz_parser, string_deduper); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#41
  def read(file_path); end

  private

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#311
  def apply_rules_with_transitions(file, transitions, offsets, rules); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#199
  def apply_rules_without_transitions(file, first_offset, rules); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#76
  def check_read(file, bytes); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#94
  def derive_offsets(transitions, offsets); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#233
  def find_existing_offset(offsets, offset); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#52
  def make_signed_int32(long); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#63
  def make_signed_int64(high, low); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#179
  def offset_matches_rule?(offset, rule_offset); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#343
  def parse(file); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#250
  def replace_with_existing_offsets(offsets, annual_rules); end

  # source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#278
  def validate_and_fix_last_defined_transition_offset(file, last_defined, first_rule_offset); end
end

# source://tzinfo//lib/tzinfo/data_sources/zoneinfo_reader.rb#16
TZInfo::DataSources::ZoneinfoReader::GENERATE_UP_TO = T.let(T.unsafe(nil), Integer)

# source://tzinfo//lib/tzinfo/data_timezone.rb#8
class TZInfo::DataTimezone < ::TZInfo::InfoTimezone
  # source://tzinfo//lib/tzinfo/data_timezone.rb#40
  def canonical_zone; end

  # source://tzinfo//lib/tzinfo/data_timezone.rb#9
  def period_for(time); end

  # source://tzinfo//lib/tzinfo/data_timezone.rb#17
  def periods_for_local(local_time); end

  # source://tzinfo//lib/tzinfo/data_timezone.rb#23
  def transitions_up_to(to, from = T.unsafe(nil)); end
end

# source://tzinfo//lib/tzinfo/datetime_with_offset.rb#19
class TZInfo::DateTimeWithOffset < ::DateTime
  include ::TZInfo::WithOffset

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#61
  def downto(min); end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#75
  def england; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#85
  def gregorian; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#95
  def italy; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#105
  def julian; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#115
  def new_start(start = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#34
  def set_timezone_offset(timezone_offset); end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#121
  def step(limit, step = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#24
  def timezone_offset; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#48
  def to_time; end

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#133
  def upto(max); end

  protected

  # source://tzinfo//lib/tzinfo/datetime_with_offset.rb#148
  def clear_timezone_offset; end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#339
class TZInfo::DayOfMonthTransitionRule < ::TZInfo::DayOfWeekTransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#340
  def initialize(month, week, day_of_week, transition_at = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#353
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#353
  def eql?(r); end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#372
  def get_day(offset, year); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#386
  def hash_args; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#362
  def offset_start; end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#273
class TZInfo::DayOfWeekTransitionRule < ::TZInfo::TransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#274
  def initialize(month, day_of_week, transition_at); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#299
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#299
  def eql?(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#283
  def is_always_first_day_of_year?; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#288
  def is_always_last_day_of_year?; end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#310
  def day_of_week; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#313
  def hash_args; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#307
  def month; end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#81
class TZInfo::DayOfYearTransitionRule < ::TZInfo::TransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#82
  def initialize(day, transition_at); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#94
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#94
  def eql?(r); end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#105
  def hash_args; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#102
  def seconds; end
end

# source://tzinfo//lib/tzinfo/format1.rb#7
module TZInfo::Format1; end

# source://tzinfo//lib/tzinfo/format1/country_definer.rb#11
class TZInfo::Format1::CountryDefiner < ::TZInfo::Format2::CountryDefiner
  # source://tzinfo//lib/tzinfo/format1/country_definer.rb#12
  def initialize(identifier_deduper, description_deduper); end
end

# source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#11
module TZInfo::Format1::CountryIndexDefinition
  mixes_in_class_methods ::TZInfo::Format1::CountryIndexDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#16
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#25
module TZInfo::Format1::CountryIndexDefinition::ClassMethods
  # source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#29
  def countries; end

  private

  # source://tzinfo//lib/tzinfo/format1/country_index_definition.rb#42
  def country(code, name); end
end

# source://tzinfo//lib/tzinfo/format1/timezone_definer.rb#11
class TZInfo::Format1::TimezoneDefiner < ::TZInfo::Format2::TimezoneDefiner
  # source://tzinfo//lib/tzinfo/format1/timezone_definer.rb#26
  def offset(id, utc_offset, std_offset, abbreviation); end

  # source://tzinfo//lib/tzinfo/format1/timezone_definer.rb#58
  def transition(year, month, offset_id, timestamp_value, datetime_numerator = T.unsafe(nil), datetime_denominator = T.unsafe(nil)); end
end

# source://tzinfo//lib/tzinfo/format1/timezone_definition.rb#9
module TZInfo::Format1::TimezoneDefinition
  mixes_in_class_methods ::TZInfo::Format2::TimezoneDefinition::ClassMethods
  mixes_in_class_methods ::TZInfo::Format1::TimezoneDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format1/timezone_definition.rb#13
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format1/timezone_definition.rb#22
module TZInfo::Format1::TimezoneDefinition::ClassMethods
  private

  # source://tzinfo//lib/tzinfo/format1/timezone_definition.rb#27
  def timezone_definer_class; end
end

# source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#10
module TZInfo::Format1::TimezoneIndexDefinition
  mixes_in_class_methods ::TZInfo::Format1::TimezoneIndexDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#15
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#28
module TZInfo::Format1::TimezoneIndexDefinition::ClassMethods
  # source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#32
  def data_timezones; end

  # source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#42
  def linked_timezones; end

  private

  # source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#63
  def linked_timezone(identifier); end

  # source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#54
  def timezone(identifier); end
end

# source://tzinfo//lib/tzinfo/format2.rb#7
module TZInfo::Format2; end

# source://tzinfo//lib/tzinfo/format2/country_definer.rb#11
class TZInfo::Format2::CountryDefiner
  # source://tzinfo//lib/tzinfo/format2/country_definer.rb#24
  def initialize(shared_timezones, identifier_deduper, description_deduper); end

  # source://tzinfo//lib/tzinfo/format2/country_definer.rb#46
  def timezone(identifier_or_reference, latitude_numerator = T.unsafe(nil), latitude_denominator = T.unsafe(nil), longitude_numerator = T.unsafe(nil), longitude_denominator = T.unsafe(nil), description = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/format2/country_definer.rb#13
  def timezones; end
end

# source://tzinfo//lib/tzinfo/format2/country_index_definer.rb#10
class TZInfo::Format2::CountryIndexDefiner
  # source://tzinfo//lib/tzinfo/format2/country_index_definer.rb#21
  def initialize(identifier_deduper, description_deduper); end

  # source://tzinfo//lib/tzinfo/format2/country_index_definer.rb#13
  def countries; end

  # source://tzinfo//lib/tzinfo/format2/country_index_definer.rb#56
  def country(code, name); end

  # source://tzinfo//lib/tzinfo/format2/country_index_definer.rb#39
  def timezone(reference, identifier, latitude_numerator, latitude_denominator, longitude_numerator, longitude_denominator, description = T.unsafe(nil)); end
end

# source://tzinfo//lib/tzinfo/format2/country_index_definition.rb#11
module TZInfo::Format2::CountryIndexDefinition
  mixes_in_class_methods ::TZInfo::Format2::CountryIndexDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format2/country_index_definition.rb#16
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format2/country_index_definition.rb#25
module TZInfo::Format2::CountryIndexDefinition::ClassMethods
  # source://tzinfo//lib/tzinfo/format2/country_index_definition.rb#29
  def countries; end

  private

  # source://tzinfo//lib/tzinfo/format2/country_index_definition.rb#38
  def country_index; end
end

# source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#11
class TZInfo::Format2::TimezoneDefiner
  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#20
  def initialize(string_deduper); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#32
  def first_offset; end

  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#49
  def offset(id, base_utc_offset, std_offset, abbreviation); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#90
  def subsequent_rules(*args); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#74
  def transition(offset_id, timestamp_value); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definer.rb#14
  def transitions; end
end

# source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#9
module TZInfo::Format2::TimezoneDefinition
  mixes_in_class_methods ::TZInfo::Format2::TimezoneDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#13
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#21
module TZInfo::Format2::TimezoneDefinition::ClassMethods
  # source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#23
  def get; end

  private

  # source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#64
  def linked_timezone(identifier, link_to_identifier); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#41
  def timezone(identifier); end

  # source://tzinfo//lib/tzinfo/format2/timezone_definition.rb#31
  def timezone_definer_class; end
end

# source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#9
class TZInfo::Format2::TimezoneIndexDefiner
  # source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#20
  def initialize(string_deduper); end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#29
  def data_timezone(identifier); end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#11
  def data_timezones; end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#38
  def linked_timezone(identifier); end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definer.rb#14
  def linked_timezones; end
end

# source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#10
module TZInfo::Format2::TimezoneIndexDefinition
  mixes_in_class_methods ::TZInfo::Format2::TimezoneIndexDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#15
    def append_features(base); end
  end
end

# source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#29
module TZInfo::Format2::TimezoneIndexDefinition::ClassMethods
  # source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#33
  def data_timezones; end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#38
  def linked_timezones; end

  # source://tzinfo//lib/tzinfo/format2/timezone_index_definition.rb#46
  def timezone_index; end
end

# source://tzinfo//lib/tzinfo/info_timezone.rb#16
class TZInfo::InfoTimezone < ::TZInfo::Timezone
  # source://tzinfo//lib/tzinfo/info_timezone.rb#17
  def initialize(info); end

  # source://tzinfo//lib/tzinfo/info_timezone.rb#23
  def identifier; end

  protected

  # source://tzinfo//lib/tzinfo/info_timezone.rb#31
  def info; end
end

# source://tzinfo//lib/tzinfo/country.rb#7
class TZInfo::InvalidCountryCode < ::StandardError; end

# source://tzinfo//lib/tzinfo/data_source.rb#10
class TZInfo::InvalidDataSource < ::StandardError; end

# source://tzinfo//lib/tzinfo/timezone.rb#26
class TZInfo::InvalidTimezoneIdentifier < ::StandardError; end

# source://tzinfo//lib/tzinfo/transition_rule.rb#185
class TZInfo::JulianDayOfYearTransitionRule < ::TZInfo::DayOfYearTransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#202
  def initialize(day, transition_at = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#226
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#226
  def eql?(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#209
  def is_always_first_day_of_year?; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#215
  def is_always_last_day_of_year?; end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#241
  def get_day(offset, year); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#250
  def hash_args; end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#186
TZInfo::JulianDayOfYearTransitionRule::LEAP = T.let(T.unsafe(nil), Integer)

# source://tzinfo//lib/tzinfo/transition_rule.rb#190
TZInfo::JulianDayOfYearTransitionRule::YEAR = T.let(T.unsafe(nil), Integer)

# source://tzinfo//lib/tzinfo/transition_rule.rb#408
class TZInfo::LastDayOfMonthTransitionRule < ::TZInfo::DayOfWeekTransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#409
  def initialize(month, day_of_week, transition_at = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#420
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#420
  def eql?(r); end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#435
  def get_day(offset, year); end
end

# source://tzinfo//lib/tzinfo/linked_timezone.rb#14
class TZInfo::LinkedTimezone < ::TZInfo::InfoTimezone
  # source://tzinfo//lib/tzinfo/linked_timezone.rb#15
  def initialize(info); end

  # source://tzinfo//lib/tzinfo/linked_timezone.rb#40
  def canonical_zone; end

  # source://tzinfo//lib/tzinfo/linked_timezone.rb#21
  def period_for(time); end

  # source://tzinfo//lib/tzinfo/linked_timezone.rb#26
  def periods_for_local(local_time); end

  # source://tzinfo//lib/tzinfo/linked_timezone.rb#31
  def transitions_up_to(to, from = T.unsafe(nil)); end
end

# source://tzinfo//lib/tzinfo/offset_timezone_period.rb#10
class TZInfo::OffsetTimezonePeriod < ::TZInfo::TimezonePeriod
  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#11
  def initialize(offset); end

  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#32
  def ==(p); end

  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#23
  def end_transition; end

  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#32
  def eql?(p); end

  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#38
  def hash; end

  # source://tzinfo//lib/tzinfo/offset_timezone_period.rb#17
  def start_transition; end
end

# source://tzinfo//lib/tzinfo/timezone.rb#21
class TZInfo::PeriodNotFound < ::StandardError; end

# source://tzinfo//lib/tzinfo/ruby_core_support.rb#6
module TZInfo::RubyCoreSupport
  class << self
    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#17
    def untaint(o); end
  end
end

# source://tzinfo//lib/tzinfo/string_deduper.rb#11
class TZInfo::StringDeduper
  # source://tzinfo//lib/tzinfo/string_deduper.rb#20
  def initialize; end

  # source://tzinfo//lib/tzinfo/string_deduper.rb#30
  def dedupe(string); end

  protected

  # source://tzinfo//lib/tzinfo/string_deduper.rb#41
  def create_hash(&block); end

  class << self
    # source://tzinfo//lib/tzinfo/string_deduper.rb#16
    def global; end
  end
end

# source://tzinfo//lib/tzinfo/time_with_offset.rb#16
class TZInfo::TimeWithOffset < ::Time
  include ::TZInfo::WithOffset

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#43
  def dst?; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#55
  def getlocal(*args); end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#69
  def gmtime; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#43
  def isdst; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#79
  def localtime(*args); end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#89
  def round(ndigits = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#30
  def set_timezone_offset(timezone_offset); end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#21
  def timezone_offset; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#98
  def to_a; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#135
  def to_datetime; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#110
  def utc; end

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#123
  def zone; end

  protected

  # source://tzinfo//lib/tzinfo/time_with_offset.rb#149
  def clear_timezone_offset; end
end

# source://tzinfo//lib/tzinfo/timestamp.rb#11
class TZInfo::Timestamp
  include ::Comparable

  # source://tzinfo//lib/tzinfo/timestamp.rb#344
  def initialize(value, sub_second = T.unsafe(nil), utc_offset = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#454
  def <=>(t); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#372
  def add_and_set_utc_offset(seconds, utc_offset); end

  def eql?(_arg0); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#468
  def hash; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#474
  def inspect; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#426
  def strftime(format); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#321
  def sub_second; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#406
  def to_datetime; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#415
  def to_i; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#432
  def to_s; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#391
  def to_time; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#381
  def utc; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#355
  def utc?; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#325
  def utc_offset; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#316
  def value; end

  protected

  # source://tzinfo//lib/tzinfo/timestamp.rb#496
  def new_datetime(klass = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#486
  def new_time(klass = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/timestamp.rb#538
  def initialize!(value, sub_second = T.unsafe(nil), utc_offset = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timestamp.rb#518
  def sub_second_to_s; end

  # source://tzinfo//lib/tzinfo/timestamp.rb#510
  def value_and_sub_second_to_s(offset = T.unsafe(nil)); end

  class << self
    # source://tzinfo//lib/tzinfo/timestamp.rb#55
    def create(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), utc_offset = T.unsafe(nil)); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#112
    def for(value, offset = T.unsafe(nil)); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#172
    def utc(value, sub_second = T.unsafe(nil)); end

    private

    # source://tzinfo//lib/tzinfo/timestamp.rb#231
    def for_datetime(datetime, ignore_offset, target_utc_offset); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#206
    def for_time(time, ignore_offset, target_utc_offset); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#296
    def for_time_like(time_like, ignore_offset, target_utc_offset); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#256
    def for_timestamp(timestamp, ignore_offset, target_utc_offset); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#283
    def is_time_like?(value); end

    # source://tzinfo//lib/tzinfo/timestamp.rb#192
    def new!(value, sub_second = T.unsafe(nil), utc_offset = T.unsafe(nil)); end
  end
end

# source://tzinfo//lib/tzinfo/timestamp.rb#16
TZInfo::Timestamp::JD_EPOCH = T.let(T.unsafe(nil), Integer)

# source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#12
class TZInfo::TimestampWithOffset < ::TZInfo::Timestamp
  include ::TZInfo::WithOffset

  # source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#47
  def set_timezone_offset(timezone_offset); end

  # source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#17
  def timezone_offset; end

  # source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#76
  def to_datetime; end

  # source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#60
  def to_time; end

  class << self
    # source://tzinfo//lib/tzinfo/timestamp_with_offset.rb#32
    def set_timezone_offset(timestamp, timezone_offset); end
  end
end

# source://tzinfo//lib/tzinfo/timezone.rb#80
class TZInfo::Timezone
  include ::Comparable

  # source://tzinfo//lib/tzinfo/timezone.rb#1105
  def <=>(tz); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1128
  def =~(regexp); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1137
  def _dump(limit); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1048
  def abbr(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1048
  def abbreviation(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1081
  def base_utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#987
  def canonical_identifier; end

  # source://tzinfo//lib/tzinfo/timezone.rb#412
  def canonical_zone; end

  # source://tzinfo//lib/tzinfo/timezone.rb#997
  def current_period; end

  # source://tzinfo//lib/tzinfo/timezone.rb#1008
  def current_period_and_time; end

  # source://tzinfo//lib/tzinfo/timezone.rb#1008
  def current_time_and_period; end

  # source://tzinfo//lib/tzinfo/timezone.rb#1059
  def dst?(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1113
  def eql?(tz); end

  # source://tzinfo//lib/tzinfo/timezone.rb#277
  def friendly_identifier(skip_first_part = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1118
  def hash; end

  # source://tzinfo//lib/tzinfo/timezone.rb#241
  def identifier; end

  # source://tzinfo//lib/tzinfo/timezone.rb#259
  def inspect; end

  # source://tzinfo//lib/tzinfo/timezone.rb#831
  def local_datetime(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo//lib/tzinfo/timezone.rb#743
  def local_time(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo//lib/tzinfo/timezone.rb#919
  def local_timestamp(year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), minute = T.unsafe(nil), second = T.unsafe(nil), sub_second = T.unsafe(nil), dst = T.unsafe(nil), &block); end

  # source://tzinfo//lib/tzinfo/timezone.rb#645
  def local_to_utc(local_time, dst = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#247
  def name; end

  # source://tzinfo//lib/tzinfo/timezone.rb#992
  def now; end

  # source://tzinfo//lib/tzinfo/timezone.rb#1094
  def observed_utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#947
  def offsets_up_to(to, from = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#319
  def period_for(time); end

  # source://tzinfo//lib/tzinfo/timezone.rb#494
  def period_for_local(local_time, dst = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#425
  def period_for_utc(utc_time); end

  # source://tzinfo//lib/tzinfo/timezone.rb#342
  def periods_for_local(local_time); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1039
  def strftime(format, time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#548
  def to_local(time); end

  # source://tzinfo//lib/tzinfo/timezone.rb#253
  def to_s; end

  # source://tzinfo//lib/tzinfo/timezone.rb#370
  def transitions_up_to(to, from = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#1094
  def utc_offset(time = T.unsafe(nil)); end

  # source://tzinfo//lib/tzinfo/timezone.rb#572
  def utc_to_local(utc_time); end

  private

  # source://tzinfo//lib/tzinfo/timezone.rb#1156
  def raise_unknown_timezone; end

  class << self
    # source://tzinfo//lib/tzinfo/timezone.rb#1147
    def _load(data); end

    # source://tzinfo//lib/tzinfo/timezone.rb#151
    def all; end

    # source://tzinfo//lib/tzinfo/timezone.rb#219
    def all_country_zone_identifiers; end

    # source://tzinfo//lib/tzinfo/timezone.rb#206
    def all_country_zones; end

    # source://tzinfo//lib/tzinfo/timezone.rb#175
    def all_data_zone_identifiers; end

    # source://tzinfo//lib/tzinfo/timezone.rb#169
    def all_data_zones; end

    # source://tzinfo//lib/tzinfo/timezone.rb#157
    def all_identifiers; end

    # source://tzinfo//lib/tzinfo/timezone.rb#193
    def all_linked_zone_identifiers; end

    # source://tzinfo//lib/tzinfo/timezone.rb#187
    def all_linked_zones; end

    # source://tzinfo//lib/tzinfo/timezone.rb#110
    def default_dst; end

    # source://tzinfo//lib/tzinfo/timezone.rb#96
    def default_dst=(value); end

    # source://tzinfo//lib/tzinfo/timezone.rb#127
    def get(identifier); end

    # source://tzinfo//lib/tzinfo/timezone.rb#141
    def get_proxy(identifier); end

    private

    # source://tzinfo//lib/tzinfo/timezone.rb#234
    def data_source; end

    # source://tzinfo//lib/tzinfo/timezone.rb#229
    def get_proxies(identifiers); end
  end
end

# source://tzinfo//lib/tzinfo/format1/timezone_definition.rb#37
TZInfo::TimezoneDefinition = TZInfo::Format1::TimezoneDefinition

# source://tzinfo//lib/tzinfo/format1/timezone_index_definition.rb#75
TZInfo::TimezoneIndexDefinition = TZInfo::Format1::TimezoneIndexDefinition

# source://tzinfo//lib/tzinfo/timezone_offset.rb#6
class TZInfo::TimezoneOffset
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#62
  def initialize(base_utc_offset, std_offset, abbreviation); end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#84
  def ==(toi); end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#50
  def abbr; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#50
  def abbreviation; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#21
  def base_utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#74
  def dst?; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#95
  def eql?(toi); end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#101
  def hash; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#107
  def inspect; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#43
  def observed_utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#37
  def std_offset; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#21
  def utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_offset.rb#43
  def utc_total_offset; end
end

# source://tzinfo//lib/tzinfo/timezone_period.rb#14
class TZInfo::TimezonePeriod
  # source://tzinfo//lib/tzinfo/timezone_period.rb#23
  def initialize(offset); end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#80
  def abbr; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#80
  def abbreviation; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#54
  def base_utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#99
  def dst?; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#36
  def end_transition; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#125
  def ends_at; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#151
  def local_ends_at; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#138
  def local_starts_at; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#90
  def observed_utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#16
  def offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#30
  def start_transition; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#112
  def starts_at; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#72
  def std_offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#54
  def utc_offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#90
  def utc_total_offset; end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#80
  def zone_identifier; end

  private

  # source://tzinfo//lib/tzinfo/timezone_period.rb#161
  def raise_not_implemented(method_name); end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#168
  def timestamp(transition); end

  # source://tzinfo//lib/tzinfo/timezone_period.rb#175
  def timestamp_with_offset(transition); end
end

# source://tzinfo//lib/tzinfo/timezone_proxy.rb#22
class TZInfo::TimezoneProxy < ::TZInfo::Timezone
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#23
  def initialize(identifier); end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#60
  def _dump(limit); end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#50
  def canonical_zone; end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#30
  def identifier; end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#35
  def period_for(time); end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#40
  def periods_for_local(local_time); end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#45
  def transitions_up_to(to, from = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#82
  def real_timezone; end

  class << self
    # source://tzinfo//lib/tzinfo/timezone_proxy.rb#71
    def _load(data); end
  end
end

# source://tzinfo//lib/tzinfo/timezone_transition.rb#7
class TZInfo::TimezoneTransition
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#34
  def initialize(offset, previous_offset, timestamp_value); end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#86
  def ==(tti); end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#48
  def at; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#86
  def eql?(tti); end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#94
  def hash; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#62
  def local_end_at; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#76
  def local_start_at; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#9
  def offset; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#12
  def previous_offset; end

  # source://tzinfo//lib/tzinfo/timezone_transition.rb#21
  def timestamp_value; end
end

# source://tzinfo//lib/tzinfo/transition_rule.rb#10
class TZInfo::TransitionRule
  # source://tzinfo//lib/tzinfo/transition_rule.rb#25
  def initialize(transition_at); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#47
  def ==(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#37
  def at(offset, year); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#47
  def eql?(r); end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#54
  def hash; end

  # source://tzinfo//lib/tzinfo/transition_rule.rb#18
  def transition_at; end

  protected

  # source://tzinfo//lib/tzinfo/transition_rule.rb#62
  def hash_args; end
end

# source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#10
class TZInfo::TransitionsTimezonePeriod < ::TZInfo::TimezonePeriod
  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#27
  def initialize(start_transition, end_transition); end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#47
  def ==(p); end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#15
  def end_transition; end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#47
  def eql?(p); end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#53
  def hash; end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#59
  def inspect; end

  # source://tzinfo//lib/tzinfo/transitions_timezone_period.rb#11
  def start_transition; end
end

# source://tzinfo//lib/tzinfo/string_deduper.rb#90
class TZInfo::UnaryMinusGlobalStringDeduper
  # source://tzinfo//lib/tzinfo/string_deduper.rb#94
  def dedupe(string); end
end

# source://tzinfo//lib/tzinfo/timezone.rb#32
class TZInfo::UnknownTimezone < ::StandardError; end

# source://tzinfo//lib/tzinfo/version.rb#6
TZInfo::VERSION = T.let(T.unsafe(nil), String)

# source://tzinfo//lib/tzinfo/with_offset.rb#10
module TZInfo::WithOffset
  # source://tzinfo//lib/tzinfo/with_offset.rb#21
  def strftime(format); end

  protected

  # source://tzinfo//lib/tzinfo/with_offset.rb#56
  def if_timezone_offset(result = T.unsafe(nil)); end
end
