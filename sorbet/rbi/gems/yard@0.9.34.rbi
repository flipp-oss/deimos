# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yard` gem.
# Please instead update this file by running `bin/tapioca gem yard`.

# source://yard//lib/yard.rb#61
::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard//lib/yard.rb#62
::RUBY19 = T.let(T.unsafe(nil), TrueClass)

# source://yard//lib/yard/core_ext/array.rb#2
class Array
  include ::Enumerable

  # source://yard//lib/yard/core_ext/array.rb#15
  def place(*values); end
end

# source://yard//lib/yard/core_ext/file.rb#4
class File < ::IO
  class << self
    # source://yard//lib/yard/core_ext/file.rb#37
    def cleanpath(path, rel_root = T.unsafe(nil)); end

    # source://yard//lib/yard/core_ext/file.rb#57
    def open!(file, *args, &block); end

    # source://yard//lib/yard/core_ext/file.rb#66
    def read_binary(file); end

    # source://yard//lib/yard/core_ext/file.rb#19
    def relative_path(from, to); end
  end
end

# source://yard//lib/yard/core_ext/file.rb#5
File::RELATIVE_PARENTDIR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/core_ext/file.rb#6
File::RELATIVE_SAMEDIR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/rubygems/backports/gem.rb#2
module Gem
  class << self
    # source://yard//lib/yard/rubygems/backports/gem.rb#6
    def source_index; end
  end
end

# source://yard//lib/yard/rubygems/backports/source_index.rb#363
Gem::Cache = Gem::SourceIndex

# source://yard//lib/yard/rubygems/backports/source_index.rb#21
class Gem::SourceIndex
  include ::Enumerable

  # source://yard//lib/yard/rubygems/backports/source_index.rb#102
  def initialize(specifications = T.unsafe(nil)); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#348
  def ==(other); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#193
  def add_spec(gem_spec, name = T.unsafe(nil)); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#202
  def add_specs(*gem_specs); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#109
  def all_gems; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#352
  def dump; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#218
  def each(&block); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#256
  def find_name(gem_name, requirement = T.unsafe(nil)); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#242
  def gem_signature(gem_full_name); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#34
  def gems; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#233
  def index_signature; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#143
  def latest_specs(include_prerelease = T.unsafe(nil)); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#248
  def length; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#124
  def load_gems_in(*spec_dirs); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#330
  def outdated; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#113
  def prerelease_gems; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#179
  def prerelease_specs; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#322
  def refresh!; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#117
  def released_gems; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#186
  def released_specs; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#211
  def remove_spec(full_name); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#270
  def search(gem_pattern, platform_only = T.unsafe(nil)); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#248
  def size; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#39
  def spec_dirs; end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#39
  def spec_dirs=(_arg0); end

  # source://yard//lib/yard/rubygems/backports/source_index.rb#225
  def specification(full_name); end

  class << self
    # source://yard//lib/yard/rubygems/backports/source_index.rb#80
    def from_gems_in(*spec_dirs); end

    # source://yard//lib/yard/rubygems/backports/source_index.rb#61
    def from_installed_gems(*deprecated); end

    # source://yard//lib/yard/rubygems/backports/source_index.rb#72
    def installed_spec_directories; end

    # source://yard//lib/yard/rubygems/backports/source_index.rb#90
    def load_specification(file_name); end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#17
class IRB::SLex
  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#25
  def initialize; end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#60
  def create(token, preproc = T.unsafe(nil), postproc = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#29
  def def_rule(token, preproc = T.unsafe(nil), postproc = T.unsafe(nil), &block); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#36
  def def_rules(*tokens, &block); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#77
  def inspect; end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#64
  def match(token); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#51
  def postproc(token); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#45
  def preproc(token, proc); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#56
  def search(token); end
end

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#18
IRB::SLex::DOUT = T.let(T.unsafe(nil), IRB::Notifier::CompositeNotifier)

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#20
IRB::SLex::D_DEBUG = T.let(T.unsafe(nil), IRB::Notifier::LeveledNotifier)

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#21
IRB::SLex::D_DETAIL = T.let(T.unsafe(nil), IRB::Notifier::LeveledNotifier)

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#19
IRB::SLex::D_WARN = T.let(T.unsafe(nil), IRB::Notifier::LeveledNotifier)

# source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#86
class IRB::SLex::Node
  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#89
  def initialize(preproc = T.unsafe(nil), postproc = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#113
  def create_subnode(chrs, preproc = T.unsafe(nil), postproc = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#161
  def match(chrs, op = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#198
  def match_io(io, op = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#96
  def postproc; end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#96
  def postproc=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#95
  def preproc; end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#95
  def preproc=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/irb/slex.rb#98
  def search(chrs, opt = T.unsafe(nil)); end
end

# source://yard//lib/yard/core_ext/insertion.rb#7
class Insertion
  # source://yard//lib/yard/core_ext/insertion.rb#14
  def initialize(list, value); end

  # source://yard//lib/yard/core_ext/insertion.rb#30
  def after(val, recursive = T.unsafe(nil)); end

  # source://yard//lib/yard/core_ext/insertion.rb#38
  def after_any(val); end

  # source://yard//lib/yard/core_ext/insertion.rb#22
  def before(val, recursive = T.unsafe(nil)); end

  # source://yard//lib/yard/core_ext/insertion.rb#34
  def before_any(val); end

  private

  # source://yard//lib/yard/core_ext/insertion.rb#49
  def insertion(val, rel, recursive = T.unsafe(nil), list = T.unsafe(nil)); end
end

# source://yard//lib/yard/core_ext/module.rb#2
class Module
  # source://yard//lib/yard/core_ext/module.rb#8
  def class_name; end
end

class Object < ::BasicObject
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://yard//lib/yard/globals.rb#8
  def P(namespace, name = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://yard//lib/yard/globals.rb#20
  def log; end
end

# source://yard//lib/yard.rb#61
RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://yard//lib/yard.rb#62
RUBY19 = T.let(T.unsafe(nil), TrueClass)

# source://yard//lib/yard/server/rack_adapter.rb#93
class Rack::Request
  # source://rack/2.2.7/lib/rack/request.rb#26
  def initialize(env); end

  # source://rack/2.2.7/lib/rack/request.rb#40
  def delete_param(k); end

  # source://rack/2.2.7/lib/rack/request.rb#31
  def params; end

  # source://rack/2.2.7/lib/rack/request.rb#31
  def query; end

  # source://rack/2.2.7/lib/rack/request.rb#35
  def update_param(k, v); end

  # source://yard//lib/yard/server/rack_adapter.rb#94
  def version_supplied; end

  # source://yard//lib/yard/server/rack_adapter.rb#94
  def version_supplied=(_arg0); end

  # source://yard//lib/yard/server/rack_adapter.rb#96
  def xhr?; end

  class << self
    # source://rack/2.2.7/lib/rack/request.rb#16
    def ip_filter; end

    # source://rack/2.2.7/lib/rack/request.rb#16
    def ip_filter=(_arg0); end
  end
end

# source://yard//lib/yard/core_ext/string.rb#2
class String
  include ::Comparable

  # source://yard//lib/yard/core_ext/string.rb#8
  def shell_split; end
end

# source://yard//lib/yard/core_ext/symbol_hash.rb#8
class SymbolHash < ::Hash
  # source://yard//lib/yard/core_ext/symbol_hash.rb#9
  def initialize(symbolize_value = T.unsafe(nil)); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#49
  def [](key); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#42
  def []=(key, value); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#54
  def delete(key); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#59
  def has_key?(key); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#59
  def key?(key); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#74
  def merge(hash); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#67
  def merge!(hash); end

  # source://yard//lib/yard/core_ext/symbol_hash.rb#67
  def update(hash); end

  class << self
    # source://yard//lib/yard/core_ext/symbol_hash.rb#28
    def [](*hsh); end
  end
end

# source://yard//lib/yard/server/webrick_adapter.rb#42
class WEBrick::HTTPRequest
  # source://yard//lib/yard/server/webrick_adapter.rb#43
  def version_supplied; end

  # source://yard//lib/yard/server/webrick_adapter.rb#43
  def version_supplied=(_arg0); end

  # source://yard//lib/yard/server/webrick_adapter.rb#44
  def xhr?; end
end

# source://yard//lib/yard.rb#2
module YARD
  class << self
    # source://yard//lib/yard.rb#31
    def load_plugins; end

    # source://yard//lib/yard.rb#20
    def parse(*args); end

    # source://yard//lib/yard.rb#27
    def parse_string(*args); end

    # source://yard//lib/yard.rb#44
    def ruby18?; end

    # source://yard//lib/yard.rb#47
    def ruby19?; end

    # source://yard//lib/yard.rb#50
    def ruby2?; end

    # source://yard//lib/yard.rb#56
    def ruby31?; end

    # source://yard//lib/yard.rb#53
    def ruby3?; end

    # source://yard//lib/yard.rb#34
    def windows?; end
  end
end

# source://yard//lib/yard/autoload.rb#6
module YARD::CLI; end

# source://yard//lib/yard/cli/command.rb#11
class YARD::CLI::Command
  # source://yard//lib/yard/cli/command.rb#16
  def description; end

  protected

  # source://yard//lib/yard/cli/command.rb#24
  def common_options(opts); end

  # source://yard//lib/yard/cli/command.rb#68
  def load_script(file); end

  # source://yard//lib/yard/cli/command.rb#55
  def parse_options(opts, args); end

  # source://yard//lib/yard/cli/command.rb#80
  def unrecognized_option(err); end

  class << self
    # source://yard//lib/yard/cli/command.rb#14
    def run(*args); end
  end
end

# source://yard//lib/yard/cli/command_parser.rb#23
class YARD::CLI::CommandParser
  # source://yard//lib/yard/cli/command_parser.rb#56
  def initialize; end

  # source://yard//lib/yard/cli/command_parser.rb#63
  def run(*args); end

  private

  # source://yard//lib/yard/cli/command_parser.rb#80
  def commands; end

  # source://yard//lib/yard/cli/command_parser.rb#82
  def list_commands; end

  class << self
    # source://yard//lib/yard/cli/command_parser.rb#27
    def commands; end

    # source://yard//lib/yard/cli/command_parser.rb#27
    def commands=(_arg0); end

    # source://yard//lib/yard/cli/command_parser.rb#31
    def default_command; end

    # source://yard//lib/yard/cli/command_parser.rb#31
    def default_command=(_arg0); end

    # source://yard//lib/yard/cli/command_parser.rb#54
    def run(*args); end
  end
end

# source://yard//lib/yard/cli/config.rb#7
class YARD::CLI::Config < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/config.rb#26
  def initialize; end

  # source://yard//lib/yard/cli/config.rb#20
  def append; end

  # source://yard//lib/yard/cli/config.rb#20
  def append=(_arg0); end

  # source://yard//lib/yard/cli/config.rb#17
  def as_list; end

  # source://yard//lib/yard/cli/config.rb#17
  def as_list=(_arg0); end

  # source://yard//lib/yard/cli/config.rb#36
  def description; end

  # source://yard//lib/yard/cli/config.rb#24
  def gem_install_cmd; end

  # source://yard//lib/yard/cli/config.rb#24
  def gem_install_cmd=(_arg0); end

  # source://yard//lib/yard/cli/config.rb#8
  def key; end

  # source://yard//lib/yard/cli/config.rb#8
  def key=(_arg0); end

  # source://yard//lib/yard/cli/config.rb#14
  def reset; end

  # source://yard//lib/yard/cli/config.rb#14
  def reset=(_arg0); end

  # source://yard//lib/yard/cli/config.rb#40
  def run(*args); end

  # source://yard//lib/yard/cli/config.rb#11
  def values; end

  # source://yard//lib/yard/cli/config.rb#11
  def values=(_arg0); end

  private

  # source://yard//lib/yard/cli/config.rb#57
  def configure_gemrc; end

  # source://yard//lib/yard/cli/config.rb#111
  def encode_value(value); end

  # source://yard//lib/yard/cli/config.rb#103
  def encode_values; end

  # source://yard//lib/yard/cli/config.rb#97
  def list_configuration; end

  # source://yard//lib/yard/cli/config.rb#78
  def modify_item; end

  # source://yard//lib/yard/cli/config.rb#120
  def optparse(*args); end

  # source://yard//lib/yard/cli/config.rb#92
  def view_item; end
end

# source://yard//lib/yard/cli/diff.rb#11
class YARD::CLI::Diff < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/diff.rb#12
  def initialize; end

  # source://yard//lib/yard/cli/diff.rb#24
  def description; end

  # source://yard//lib/yard/cli/diff.rb#28
  def run(*args); end

  private

  # source://yard//lib/yard/cli/diff.rb#83
  def added_objects(registry1, registry2); end

  # source://yard//lib/yard/cli/diff.rb#78
  def all_objects; end

  # source://yard//lib/yard/cli/diff.rb#233
  def cleanup(gemfile); end

  # source://yard//lib/yard/cli/diff.rb#175
  def expand_and_parse(gemfile, io); end

  # source://yard//lib/yard/cli/diff.rb#187
  def expand_gem(gemfile, io); end

  # source://yard//lib/yard/cli/diff.rb#181
  def generate_yardoc(dir); end

  # source://yard//lib/yard/cli/diff.rb#118
  def load_gem_data(gemfile); end

  # source://yard//lib/yard/cli/diff.rb#102
  def load_git_commit(commit); end

  # source://yard//lib/yard/cli/diff.rb#87
  def modified_objects(registry1, registry2); end

  # source://yard//lib/yard/cli/diff.rb#239
  def optparse(*args); end

  # source://yard//lib/yard/cli/diff.rb#98
  def removed_objects(registry1, registry2); end

  # source://yard//lib/yard/cli/diff.rb#225
  def require_rubygems; end
end

# source://yard//lib/yard/cli/display.rb#6
class YARD::CLI::Display < ::YARD::CLI::Yardoc
  # source://yard//lib/yard/cli/display.rb#9
  def initialize(*args); end

  # source://yard//lib/yard/cli/display.rb#7
  def description; end

  # source://yard//lib/yard/cli/display.rb#27
  def format_objects; end

  # source://yard//lib/yard/cli/display.rb#61
  def output_options(opts); end

  # source://yard//lib/yard/cli/display.rb#46
  def parse_arguments(*args); end

  # source://yard//lib/yard/cli/display.rb#21
  def run(*args); end

  # source://yard//lib/yard/cli/display.rb#33
  def wrap_layout(contents); end
end

# source://yard//lib/yard/cli/gems.rb#5
class YARD::CLI::Gems < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/gems.rb#6
  def initialize; end

  # source://yard//lib/yard/cli/gems.rb#11
  def description; end

  # source://yard//lib/yard/cli/gems.rb#18
  def run(*args); end

  private

  # source://yard//lib/yard/cli/gems.rb#47
  def add_gems(gems); end

  # source://yard//lib/yard/cli/gems.rb#27
  def build_gems; end

  # source://yard//lib/yard/cli/gems.rb#61
  def optparse(*args); end
end

# source://yard//lib/yard/cli/graph.rb#27
class YARD::CLI::Graph < ::YARD::CLI::YardoptsCommand
  # source://yard//lib/yard/cli/graph.rb#34
  def initialize; end

  # source://yard//lib/yard/cli/graph.rb#42
  def description; end

  # source://yard//lib/yard/cli/graph.rb#31
  def objects; end

  # source://yard//lib/yard/cli/graph.rb#28
  def options; end

  # source://yard//lib/yard/cli/graph.rb#52
  def run(*args); end

  private

  # source://yard//lib/yard/cli/graph.rb#69
  def optparse(*args); end

  # source://yard//lib/yard/cli/graph.rb#65
  def unrecognized_option(err); end
end

# source://yard//lib/yard/cli/graph.rb#6
class YARD::CLI::GraphOptions < ::YARD::Templates::TemplateOptions
  # source://yard//lib/yard/cli/graph.rb#16
  def contents; end

  # source://yard//lib/yard/cli/graph.rb#16
  def contents=(_arg0); end

  # source://yard//lib/yard/cli/graph.rb#13
  def dependencies; end

  # source://yard//lib/yard/cli/graph.rb#13
  def dependencies=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def format; end

  # source://yard//lib/yard/options.rb#82
  def format=(_arg0); end

  # source://yard//lib/yard/cli/graph.rb#10
  def full; end

  # source://yard//lib/yard/cli/graph.rb#10
  def full=(_arg0); end
end

# source://yard//lib/yard/cli/help.rb#6
class YARD::CLI::Help < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/help.rb#7
  def description; end

  # source://yard//lib/yard/cli/help.rb#9
  def run(*args); end
end

# source://yard//lib/yard/cli/i18n.rb#13
class YARD::CLI::I18n < ::YARD::CLI::Yardoc
  # source://yard//lib/yard/cli/i18n.rb#14
  def initialize; end

  # source://yard//lib/yard/cli/i18n.rb#19
  def description; end

  # source://yard//lib/yard/cli/i18n.rb#23
  def run(*args); end

  private

  # source://yard//lib/yard/cli/i18n.rb#44
  def general_options(opts); end

  # source://yard//lib/yard/cli/i18n.rb#61
  def generate_pot(relative_base_path); end
end

# source://yard//lib/yard/cli/list.rb#5
class YARD::CLI::List < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/list.rb#6
  def description; end

  # source://yard//lib/yard/cli/list.rb#13
  def run(*args); end
end

# source://yard//lib/yard/cli/markup_types.rb#6
class YARD::CLI::MarkupTypes < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/markup_types.rb#7
  def description; end

  # source://yard//lib/yard/cli/markup_types.rb#14
  def run(*args); end
end

# source://yard//lib/yard/cli/server.rb#8
class YARD::CLI::Server < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/server.rb#29
  def initialize; end

  # source://yard//lib/yard/cli/server.rb#18
  def adapter; end

  # source://yard//lib/yard/cli/server.rb#18
  def adapter=(_arg0); end

  # source://yard//lib/yard/cli/server.rb#41
  def description; end

  # source://yard//lib/yard/cli/server.rb#15
  def libraries; end

  # source://yard//lib/yard/cli/server.rb#15
  def libraries=(_arg0); end

  # source://yard//lib/yard/cli/server.rb#9
  def options; end

  # source://yard//lib/yard/cli/server.rb#9
  def options=(_arg0); end

  # source://yard//lib/yard/cli/server.rb#45
  def run(*args); end

  # source://yard//lib/yard/cli/server.rb#22
  def scripts; end

  # source://yard//lib/yard/cli/server.rb#22
  def scripts=(_arg0); end

  # source://yard//lib/yard/cli/server.rb#12
  def server_options; end

  # source://yard//lib/yard/cli/server.rb#12
  def server_options=(_arg0); end

  # source://yard//lib/yard/cli/server.rb#26
  def template_paths; end

  # source://yard//lib/yard/cli/server.rb#26
  def template_paths=(_arg0); end

  private

  # source://yard//lib/yard/cli/server.rb#131
  def add_gems; end

  # source://yard//lib/yard/cli/server.rb#140
  def add_gems_from_gemfile(gemfile = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/server.rb#76
  def add_libraries(args); end

  # source://yard//lib/yard/cli/server.rb#115
  def create_library_version_if_yardopts_exist(library, dir); end

  # source://yard//lib/yard/cli/server.rb#249
  def extract_db_from_options_file(options_file); end

  # source://yard//lib/yard/cli/server.rb#239
  def generate_doc_for_first_time(libver); end

  # source://yard//lib/yard/cli/server.rb#56
  def load_scripts; end

  # source://yard//lib/yard/cli/server.rb#60
  def load_template_paths; end

  # source://yard//lib/yard/cli/server.rb#156
  def optparse(*args); end

  # source://yard//lib/yard/cli/server.rb#66
  def select_adapter; end
end

# source://yard//lib/yard/cli/stats.rb#5
class YARD::CLI::Stats < ::YARD::CLI::Yardoc
  include ::YARD::Templates::Helpers::BaseHelper

  # source://yard//lib/yard/cli/stats.rb#18
  def initialize(parse = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/stats.rb#108
  def all_objects; end

  # source://yard//lib/yard/cli/stats.rb#25
  def description; end

  # source://yard//lib/yard/cli/stats.rb#162
  def output(name, data, undoc = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/stats.rb#15
  def parse; end

  # source://yard//lib/yard/cli/stats.rb#15
  def parse=(_arg0); end

  # source://yard//lib/yard/cli/stats.rb#54
  def print_statistics; end

  # source://yard//lib/yard/cli/stats.rb#79
  def print_undocumented_objects; end

  # source://yard//lib/yard/cli/stats.rb#34
  def run(*args); end

  # source://yard//lib/yard/cli/stats.rb#135
  def stats_for_attributes; end

  # source://yard//lib/yard/cli/stats.rb#125
  def stats_for_classes; end

  # source://yard//lib/yard/cli/stats.rb#130
  def stats_for_constants; end

  # source://yard//lib/yard/cli/stats.rb#113
  def stats_for_files; end

  # source://yard//lib/yard/cli/stats.rb#144
  def stats_for_methods; end

  # source://yard//lib/yard/cli/stats.rb#120
  def stats_for_modules; end

  private

  # source://yard//lib/yard/cli/stats.rb#199
  def general_options(opts); end

  # source://yard//lib/yard/cli/stats.rb#185
  def optparse(*args); end

  # source://yard//lib/yard/cli/stats.rb#176
  def type_statistics(type); end
end

# source://yard//lib/yard/cli/stats.rb#12
YARD::CLI::Stats::STATS_ORDER = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/cli/yri.rb#9
class YARD::CLI::YRI < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/yri.rb#31
  def initialize; end

  # source://yard//lib/yard/cli/yri.rb#41
  def description; end

  # source://yard//lib/yard/cli/yri.rb#50
  def run(*args); end

  protected

  # source://yard//lib/yard/cli/yri.rb#85
  def cache_object(name, path); end

  # source://yard//lib/yard/cli/yri.rb#113
  def find_object(name); end

  # source://yard//lib/yard/cli/yri.rb#98
  def print_object(object); end

  # source://yard//lib/yard/cli/yri.rb#78
  def print_usage; end

  private

  # source://yard//lib/yard/cli/yri.rb#181
  def add_default_paths; end

  # source://yard//lib/yard/cli/yri.rb#161
  def add_gem_paths; end

  # source://yard//lib/yard/cli/yri.rb#151
  def load_cache; end

  # source://yard//lib/yard/cli/yri.rb#190
  def optparse(*args); end

  # source://yard//lib/yard/cli/yri.rb#143
  def try_load_object(name, cache_path); end

  class << self
    # source://yard//lib/yard/cli/yri.rb#29
    def run(*args); end
  end
end

# source://yard//lib/yard/cli/yri.rb#10
YARD::CLI::YRI::CACHE_FILE = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/cli/yri.rb#25
YARD::CLI::YRI::DEFAULT_SEARCH_PATHS = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/cli/yri.rb#15
YARD::CLI::YRI::SEARCH_PATHS_FILE = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/cli/yardoc.rb#147
class YARD::CLI::Yardoc < ::YARD::CLI::YardoptsCommand
  # source://yard//lib/yard/cli/yardoc.rb#207
  def initialize; end

  # source://yard//lib/yard/cli/yardoc.rb#330
  def all_objects; end

  # source://yard//lib/yard/cli/yardoc.rb#180
  def apis; end

  # source://yard//lib/yard/cli/yardoc.rb#180
  def apis=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#197
  def assets; end

  # source://yard//lib/yard/cli/yardoc.rb#197
  def assets=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#234
  def description; end

  # source://yard//lib/yard/cli/yardoc.rb#155
  def excluded; end

  # source://yard//lib/yard/cli/yardoc.rb#155
  def excluded=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#204
  def fail_on_warning; end

  # source://yard//lib/yard/cli/yardoc.rb#204
  def fail_on_warning=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#151
  def files; end

  # source://yard//lib/yard/cli/yardoc.rb#151
  def files=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#166
  def generate; end

  # source://yard//lib/yard/cli/yardoc.rb#166
  def generate=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#201
  def has_markup; end

  # source://yard//lib/yard/cli/yardoc.rb#201
  def has_markup=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#185
  def hidden_apis; end

  # source://yard//lib/yard/cli/yardoc.rb#185
  def hidden_apis=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#189
  def hidden_tags; end

  # source://yard//lib/yard/cli/yardoc.rb#189
  def hidden_tags=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#170
  def list; end

  # source://yard//lib/yard/cli/yardoc.rb#170
  def list=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#148
  def options; end

  # source://yard//lib/yard/cli/yardoc.rb#291
  def parse_arguments(*args); end

  # source://yard//lib/yard/cli/yardoc.rb#244
  def run(*args); end

  # source://yard//lib/yard/cli/yardoc.rb#163
  def save_yardoc; end

  # source://yard//lib/yard/cli/yardoc.rb#163
  def save_yardoc=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#193
  def statistics; end

  # source://yard//lib/yard/cli/yardoc.rb#193
  def statistics=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#160
  def use_cache; end

  # source://yard//lib/yard/cli/yardoc.rb#160
  def use_cache=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#175
  def visibilities; end

  # source://yard//lib/yard/cli/yardoc.rb#175
  def visibilities=(_arg0); end

  private

  # source://yard//lib/yard/cli/yardoc.rb#474
  def add_api_verifier; end

  # source://yard//lib/yard/cli/yardoc.rb#413
  def add_extra_files(*files); end

  # source://yard//lib/yard/cli/yardoc.rb#507
  def add_tag(tag_data, factory_method = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/yardoc.rb#466
  def add_visibility_verifier; end

  # source://yard//lib/yard/cli/yardoc.rb#494
  def apply_locale; end

  # source://yard//lib/yard/cli/yardoc.rb#389
  def copy_assets; end

  # source://yard//lib/yard/cli/yardoc.rb#425
  def extra_file_valid?(file, check_exists = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/yardoc.rb#541
  def general_options(opts); end

  # source://yard//lib/yard/cli/yardoc.rb#516
  def optparse(*args); end

  # source://yard//lib/yard/cli/yardoc.rb#586
  def output_options(opts); end

  # source://yard//lib/yard/cli/yardoc.rb#446
  def parse_files(*files); end

  # source://yard//lib/yard/cli/yardoc.rb#403
  def print_list; end

  # source://yard//lib/yard/cli/yardoc.rb#340
  def run_generate(checksums); end

  # source://yard//lib/yard/cli/yardoc.rb#502
  def run_verifier(list); end

  # source://yard//lib/yard/cli/yardoc.rb#753
  def tag_options(opts); end

  # source://yard//lib/yard/cli/yardoc.rb#364
  def verify_markup_options; end
end

# source://yard//lib/yard/cli/yardoc.rb#10
class YARD::CLI::YardocOptions < ::YARD::Templates::TemplateOptions
  # source://yard//lib/yard/cli/yardoc.rb#48
  def file; end

  # source://yard//lib/yard/cli/yardoc.rb#48
  def file=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def files; end

  # source://yard//lib/yard/options.rb#82
  def files=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def format; end

  # source://yard//lib/yard/options.rb#82
  def format=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#39
  def index; end

  # source://yard//lib/yard/cli/yardoc.rb#39
  def index=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#43
  def item; end

  # source://yard//lib/yard/cli/yardoc.rb#43
  def item=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#51
  def locale; end

  # source://yard//lib/yard/cli/yardoc.rb#51
  def locale=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#36
  def objects; end

  # source://yard//lib/yard/cli/yardoc.rb#36
  def objects=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def onefile; end

  # source://yard//lib/yard/options.rb#82
  def onefile=(_arg0); end

  # source://yard//lib/yard/cli/yardoc.rb#32
  def readme; end

  # source://yard//lib/yard/cli/yardoc.rb#32
  def readme=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def serializer; end

  # source://yard//lib/yard/options.rb#82
  def serializer=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def title; end

  # source://yard//lib/yard/options.rb#82
  def title=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def verifier; end

  # source://yard//lib/yard/options.rb#82
  def verifier=(_arg0); end
end

# source://yard//lib/yard/cli/yardopts_command.rb#11
class YARD::CLI::YardoptsCommand < ::YARD::CLI::Command
  # source://yard//lib/yard/cli/yardopts_command.rb#25
  def initialize; end

  # source://yard//lib/yard/cli/yardopts_command.rb#22
  def options_file; end

  # source://yard//lib/yard/cli/yardopts_command.rb#22
  def options_file=(_arg0); end

  # source://yard//lib/yard/cli/yardopts_command.rb#36
  def parse_arguments(*args); end

  # source://yard//lib/yard/cli/yardopts_command.rb#18
  def use_document_file; end

  # source://yard//lib/yard/cli/yardopts_command.rb#18
  def use_document_file=(_arg0); end

  # source://yard//lib/yard/cli/yardopts_command.rb#15
  def use_yardopts_file; end

  # source://yard//lib/yard/cli/yardopts_command.rb#15
  def use_yardopts_file=(_arg0); end

  protected

  # source://yard//lib/yard/cli/yardopts_command.rb#48
  def yardopts_options(opts); end

  private

  # source://yard//lib/yard/cli/yardopts_command.rb#92
  def parse_rdoc_document_file(file = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/yardopts_command.rb#96
  def parse_yardopts(file = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/yardopts_command.rb#78
  def parse_yardopts_options(*args); end

  # source://yard//lib/yard/cli/yardopts_command.rb#102
  def support_rdoc_document_file!(file = T.unsafe(nil)); end

  # source://yard//lib/yard/cli/yardopts_command.rb#70
  def yardopts(file = T.unsafe(nil)); end
end

# source://yard//lib/yard/cli/yardopts_command.rb#12
YARD::CLI::YardoptsCommand::DEFAULT_YARDOPTS_FILE = T.let(T.unsafe(nil), String)

# source://yard//lib/yard.rb#13
YARD::CONFIG_DIR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/autoload.rb#29
module YARD::CodeObjects
  extend ::YARD::CodeObjects::NamespaceMapper
end

# source://yard//lib/yard/code_objects/base.rb#94
YARD::CodeObjects::BUILTIN_EXCEPTIONS_HASH = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/code_objects/base.rb#133
class YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/base.rb#238
  def initialize(namespace, name, *_arg2); end

  # source://yard//lib/yard/code_objects/base.rb#322
  def ==(other); end

  # source://yard//lib/yard/code_objects/base.rb#342
  def [](key); end

  # source://yard//lib/yard/code_objects/base.rb#355
  def []=(key, value); end

  # source://yard//lib/yard/code_objects/base.rb#290
  def add_file(file, line = T.unsafe(nil), has_comments = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#560
  def add_tag(*tags); end

  # source://yard//lib/yard/code_objects/base.rb#166
  def base_docstring; end

  # source://yard//lib/yard/code_objects/base.rb#263
  def copy_to(other); end

  # source://yard//lib/yard/code_objects/base.rb#404
  def docstring(locale = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#426
  def docstring=(comments); end

  # source://yard//lib/yard/code_objects/base.rb#170
  def dynamic; end

  # source://yard//lib/yard/code_objects/base.rb#170
  def dynamic=(_arg0); end

  # source://yard//lib/yard/code_objects/base.rb#178
  def dynamic?; end

  # source://yard//lib/yard/code_objects/base.rb#322
  def eql?(other); end

  # source://yard//lib/yard/code_objects/base.rb#322
  def equal?(other); end

  # source://yard//lib/yard/code_objects/base.rb#306
  def file; end

  # source://yard//lib/yard/code_objects/base.rb#137
  def files; end

  # source://yard//lib/yard/code_objects/base.rb#504
  def format(options = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#174
  def group; end

  # source://yard//lib/yard/code_objects/base.rb#174
  def group=(_arg0); end

  # source://yard//lib/yard/code_objects/base.rb#555
  def has_tag?(name); end

  # source://yard//lib/yard/code_objects/base.rb#333
  def hash; end

  # source://yard//lib/yard/code_objects/base.rb#512
  def inspect; end

  # source://yard//lib/yard/code_objects/base.rb#314
  def line; end

  # source://yard//lib/yard/code_objects/base.rb#372
  def method_missing(meth, *args, &block); end

  # source://yard//lib/yard/code_objects/base.rb#278
  def name(prefix = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#142
  def namespace; end

  # source://yard//lib/yard/code_objects/base.rb#521
  def namespace=(obj); end

  # source://yard//lib/yard/code_objects/base.rb#142
  def parent; end

  # source://yard//lib/yard/code_objects/base.rb#521
  def parent=(obj); end

  # source://yard//lib/yard/code_objects/base.rb#452
  def path; end

  # source://yard//lib/yard/code_objects/base.rb#474
  def relative_path(other); end

  # source://yard//lib/yard/code_objects/base.rb#566
  def root?; end

  # source://yard//lib/yard/code_objects/base.rb#575
  def sep; end

  # source://yard//lib/yard/code_objects/base.rb#159
  def signature; end

  # source://yard//lib/yard/code_objects/base.rb#159
  def signature=(_arg0); end

  # source://yard//lib/yard/code_objects/base.rb#146
  def source; end

  # source://yard//lib/yard/code_objects/base.rb#387
  def source=(statement); end

  # source://yard//lib/yard/code_objects/base.rb#152
  def source_type; end

  # source://yard//lib/yard/code_objects/base.rb#152
  def source_type=(_arg0); end

  # source://yard//lib/yard/code_objects/base.rb#547
  def tag(name); end

  # source://yard//lib/yard/code_objects/base.rb#551
  def tags(name = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#467
  def title; end

  # source://yard//lib/yard/code_objects/base.rb#336
  def to_ary; end

  # source://yard//lib/yard/code_objects/base.rb#452
  def to_s; end

  # source://yard//lib/yard/code_objects/base.rb#436
  def type; end

  # source://yard//lib/yard/code_objects/base.rb#181
  def visibility; end

  # source://yard//lib/yard/code_objects/base.rb#183
  def visibility=(v); end

  protected

  # source://yard//lib/yard/code_objects/base.rb#586
  def copyable_attributes; end

  private

  # source://yard//lib/yard/code_objects/base.rb#598
  def format_source(source); end

  # source://yard//lib/yard/code_objects/base.rb#605
  def translate_docstring(locale); end

  class << self
    # source://yard//lib/yard/code_objects/base.rb#219
    def ===(other); end

    # source://yard//lib/yard/code_objects/base.rb#189
    def new(namespace, name, *args, &block); end
  end
end

# source://yard//lib/yard/code_objects/class_object.rb#9
class YARD::CodeObjects::ClassObject < ::YARD::CodeObjects::NamespaceObject
  # source://yard//lib/yard/code_objects/class_object.rb#15
  def initialize(namespace, name, *args, &block); end

  # source://yard//lib/yard/code_objects/class_object.rb#101
  def constants(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/class_object.rb#45
  def inheritance_tree(include_mods = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/class_object.rb#109
  def inherited_constants; end

  # source://yard//lib/yard/code_objects/class_object.rb#79
  def inherited_meths(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/class_object.rb#35
  def is_exception?; end

  # source://yard//lib/yard/code_objects/class_object.rb#66
  def meths(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/class_object.rb#10
  def superclass; end

  # source://yard//lib/yard/code_objects/class_object.rb#125
  def superclass=(object); end
end

# source://yard//lib/yard/code_objects/class_variable_object.rb#8
class YARD::CodeObjects::ClassVariableObject < ::YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/class_variable_object.rb#9
  def value; end

  # source://yard//lib/yard/code_objects/class_variable_object.rb#9
  def value=(_arg0); end
end

# source://yard//lib/yard/code_objects/base.rb#10
class YARD::CodeObjects::CodeObjectList < ::Array
  # source://yard//lib/yard/code_objects/base.rb#11
  def initialize(owner = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/base.rb#19
  def <<(value); end

  # source://yard//lib/yard/code_objects/base.rb#19
  def push(value); end
end

# source://yard//lib/yard/code_objects/constant_object.rb#9
class YARD::CodeObjects::ConstantObject < ::YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/constant_object.rb#10
  def value; end

  # source://yard//lib/yard/code_objects/constant_object.rb#12
  def value=(value); end
end

# source://yard//lib/yard/code_objects/extended_method_object.rb#7
class YARD::CodeObjects::ExtendedMethodObject
  # source://yard//lib/yard/code_objects/extended_method_object.rb#17
  def initialize(obj); end

  # source://yard//lib/yard/code_objects/extended_method_object.rb#22
  def method_missing(sym, *args, &block); end

  # source://yard//lib/yard/code_objects/extended_method_object.rb#11
  def scope; end
end

# source://yard//lib/yard/code_objects/extra_file_object.rb#7
class YARD::CodeObjects::ExtraFileObject
  # source://yard//lib/yard/code_objects/extra_file_object.rb#18
  def initialize(filename, contents = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#64
  def ==(other); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#30
  def attributes; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#9
  def attributes=(_arg0); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#39
  def contents; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#44
  def contents=(contents); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#64
  def eql?(other); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#64
  def equal?(other); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#8
  def filename; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#8
  def filename=(_arg0); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#70
  def hash; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#57
  def inspect; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#12
  def locale; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#52
  def locale=(locale); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#10
  def name; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#10
  def name=(_arg0); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#10
  def path; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#35
  def title; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#57
  def to_s; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#62
  def type; end

  private

  # source://yard//lib/yard/code_objects/extra_file_object.rb#74
  def ensure_parsed; end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#81
  def parse_contents(data); end

  # source://yard//lib/yard/code_objects/extra_file_object.rb#129
  def translate(data); end
end

# source://yard//lib/yard/code_objects/macro_object.rb#30
class YARD::CodeObjects::MacroObject < ::YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/macro_object.rb#149
  def attached?; end

  # source://yard//lib/yard/code_objects/macro_object.rb#167
  def expand(call_params = T.unsafe(nil), full_source = T.unsafe(nil), block_source = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/macro_object.rb#142
  def macro_data; end

  # source://yard//lib/yard/code_objects/macro_object.rb#142
  def macro_data=(_arg0); end

  # source://yard//lib/yard/code_objects/macro_object.rb#146
  def method_object; end

  # source://yard//lib/yard/code_objects/macro_object.rb#146
  def method_object=(_arg0); end

  # source://yard//lib/yard/code_objects/macro_object.rb#152
  def path; end

  # source://yard//lib/yard/code_objects/macro_object.rb#155
  def sep; end

  class << self
    # source://yard//lib/yard/code_objects/macro_object.rb#120
    def apply(docstring, call_params = T.unsafe(nil), full_source = T.unsafe(nil), block_source = T.unsafe(nil), _method_object = T.unsafe(nil)); end

    # source://yard//lib/yard/code_objects/macro_object.rb#136
    def apply_macro(macro, docstring, call_params = T.unsafe(nil), full_source = T.unsafe(nil), block_source = T.unsafe(nil)); end

    # source://yard//lib/yard/code_objects/macro_object.rb#40
    def create(macro_name, data, method_object = T.unsafe(nil)); end

    # source://yard//lib/yard/code_objects/macro_object.rb#71
    def create_docstring(macro_name, data, method_object = T.unsafe(nil)); end

    # source://yard//lib/yard/code_objects/macro_object.rb#93
    def expand(macro_data, call_params = T.unsafe(nil), full_source = T.unsafe(nil), block_source = T.unsafe(nil)); end

    # source://yard//lib/yard/code_objects/macro_object.rb#51
    def find(macro_name); end

    # source://yard//lib/yard/code_objects/macro_object.rb#71
    def find_or_create(macro_name, data, method_object = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/code_objects/macro_object.rb#31
YARD::CodeObjects::MacroObject::MACRO_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/code_objects/method_object.rb#10
class YARD::CodeObjects::MethodObject < ::YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/method_object.rb#37
  def initialize(namespace, name, scope = T.unsafe(nil), &block); end

  # source://yard//lib/yard/code_objects/method_object.rb#149
  def aliases; end

  # source://yard//lib/yard/code_objects/method_object.rb#93
  def attr_info; end

  # source://yard//lib/yard/code_objects/method_object.rb#78
  def constructor?; end

  # source://yard//lib/yard/code_objects/method_object.rb#18
  def explicit; end

  # source://yard//lib/yard/code_objects/method_object.rb#18
  def explicit=(_arg0); end

  # source://yard//lib/yard/code_objects/method_object.rb#126
  def is_alias?; end

  # source://yard//lib/yard/code_objects/method_object.rb#114
  def is_attribute?; end

  # source://yard//lib/yard/code_objects/method_object.rb#134
  def is_explicit?; end

  # source://yard//lib/yard/code_objects/method_object.rb#85
  def module_function?; end

  # source://yard//lib/yard/code_objects/method_object.rb#175
  def name(prefix = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/method_object.rb#141
  def overridden_method; end

  # source://yard//lib/yard/code_objects/method_object.rb#25
  def parameters; end

  # source://yard//lib/yard/code_objects/method_object.rb#25
  def parameters=(_arg0); end

  # source://yard//lib/yard/code_objects/method_object.rb#161
  def path; end

  # source://yard//lib/yard/code_objects/method_object.rb#107
  def reader?; end

  # source://yard//lib/yard/code_objects/method_object.rb#11
  def scope; end

  # source://yard//lib/yard/code_objects/method_object.rb#58
  def scope=(v); end

  # source://yard//lib/yard/code_objects/method_object.rb#182
  def sep; end

  # source://yard//lib/yard/code_objects/method_object.rb#100
  def writer?; end

  protected

  # source://yard//lib/yard/code_objects/method_object.rb#192
  def copyable_attributes; end
end

# source://yard//lib/yard/code_objects/module_object.rb#11
class YARD::CodeObjects::ModuleObject < ::YARD::CodeObjects::NamespaceObject
  # source://yard//lib/yard/code_objects/module_object.rb#12
  def inheritance_tree(include_mods = T.unsafe(nil)); end
end

# source://yard//lib/yard/code_objects/namespace_mapper.rb#8
module YARD::CodeObjects::NamespaceMapper
  # source://yard//lib/yard/code_objects/namespace_mapper.rb#55
  def clear_separators; end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#68
  def default_separator(value = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#27
  def register_separator(sep, *valid_types); end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#80
  def separators; end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#97
  def separators_for_type(type); end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#85
  def separators_match; end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#91
  def types_for_separator(sep); end

  # source://yard//lib/yard/code_objects/namespace_mapper.rb#43
  def unregister_separator_by_type(type); end

  class << self
    # source://yard//lib/yard/code_objects/namespace_mapper.rb#137
    def default_separator; end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#137
    def default_separator=(_arg0); end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#125
    def invalidate; end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#114
    def map; end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#131
    def map_match; end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#107
    def on_invalidate(&block); end

    # source://yard//lib/yard/code_objects/namespace_mapper.rb#119
    def rev_map; end
  end
end

# source://yard//lib/yard/code_objects/namespace_object.rb#11
class YARD::CodeObjects::NamespaceObject < ::YARD::CodeObjects::Base
  # source://yard//lib/yard/code_objects/namespace_object.rb#56
  def initialize(namespace, name, *args, &block); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#44
  def aliases; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#39
  def attributes; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#86
  def child(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#16
  def children; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#69
  def class_attributes; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#48
  def class_mixins; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#164
  def constants(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#186
  def cvars; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#12
  def groups; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#12
  def groups=(_arg0); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#172
  def included_constants; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#144
  def included_meths(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#76
  def instance_attributes; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#52
  def instance_mixins; end

  # source://yard//lib/yard/code_objects/namespace_object.rb#113
  def meths(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/namespace_object.rb#194
  def mixins(*scopes); end
end

# source://yard//lib/yard/code_objects/proxy.rb#8
YARD::CodeObjects::PROXY_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/code_objects/proxy.rb#24
class YARD::CodeObjects::Proxy
  # source://yard//lib/yard/code_objects/proxy.rb#34
  def initialize(namespace, name, type = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/proxy.rb#118
  def <=>(other); end

  # source://yard//lib/yard/code_objects/proxy.rb#127
  def ==(other); end

  # source://yard//lib/yard/code_objects/proxy.rb#113
  def ===(other); end

  # source://yard//lib/yard/code_objects/proxy.rb#142
  def class; end

  # source://yard//lib/yard/code_objects/proxy.rb#127
  def equal?(other); end

  # source://yard//lib/yard/code_objects/proxy.rb#137
  def hash; end

  # source://yard//lib/yard/code_objects/proxy.rb#91
  def inspect; end

  # source://yard//lib/yard/code_objects/proxy.rb#161
  def instance_of?(klass); end

  # source://yard//lib/yard/code_objects/proxy.rb#108
  def is_a?(klass); end

  # source://yard//lib/yard/code_objects/proxy.rb#166
  def kind_of?(klass); end

  # source://yard//lib/yard/code_objects/proxy.rb#178
  def method_missing(meth, *args, &block); end

  # source://yard//lib/yard/code_objects/proxy.rb#85
  def name(prefix = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/proxy.rb#27
  def namespace; end

  # source://yard//lib/yard/code_objects/proxy.rb#27
  def parent; end

  # source://yard//lib/yard/code_objects/proxy.rb#100
  def path; end

  # source://yard//lib/yard/code_objects/proxy.rb#171
  def respond_to?(meth, include_private = T.unsafe(nil)); end

  # source://yard//lib/yard/code_objects/proxy.rb#200
  def root?; end

  # source://yard//lib/yard/code_objects/proxy.rb#100
  def title; end

  # source://yard//lib/yard/code_objects/proxy.rb#100
  def to_s; end

  # source://yard//lib/yard/code_objects/proxy.rb#100
  def to_str; end

  # source://yard//lib/yard/code_objects/proxy.rb#151
  def type; end

  # source://yard//lib/yard/code_objects/proxy.rb#158
  def type=(type); end

  private

  # source://yard//lib/yard/code_objects/proxy.rb#228
  def proxy_path; end

  # source://yard//lib/yard/code_objects/proxy.rb#205
  def to_ary; end

  # source://yard//lib/yard/code_objects/proxy.rb#212
  def to_obj; end

  class << self
    # source://yard//lib/yard/code_objects/proxy.rb#25
    def ===(other); end
  end
end

# source://yard//lib/yard/code_objects/proxy.rb#5
class YARD::CodeObjects::ProxyMethodError < ::NoMethodError; end

# source://yard//lib/yard/code_objects/root_object.rb#6
class YARD::CodeObjects::RootObject < ::YARD::CodeObjects::ModuleObject
  # source://yard//lib/yard/code_objects/root_object.rb#12
  def equal?(other); end

  # source://yard//lib/yard/code_objects/root_object.rb#16
  def hash; end

  # source://yard//lib/yard/code_objects/root_object.rb#8
  def inspect; end

  # source://yard//lib/yard/code_objects/root_object.rb#7
  def path; end

  # source://yard//lib/yard/code_objects/root_object.rb#9
  def root?; end

  # source://yard//lib/yard/code_objects/root_object.rb#10
  def title; end
end

# source://yard//lib/yard/config.rb#86
class YARD::Config
  class << self
    # source://yard//lib/yard/config.rb#221
    def add_ignored_plugins_file; end

    # source://yard//lib/yard/config.rb#268
    def arguments; end

    # source://yard//lib/yard/config.rb#119
    def load; end

    # source://yard//lib/yard/config.rb#189
    def load_autoload_plugins; end

    # source://yard//lib/yard/config.rb#194
    def load_commandline_plugins; end

    # source://yard//lib/yard/config.rb#204
    def load_commandline_safemode; end

    # source://yard//lib/yard/config.rb#169
    def load_gem_plugins; end

    # source://yard//lib/yard/config.rb#157
    def load_plugin(name); end

    # source://yard//lib/yard/config.rb#214
    def load_plugin_failed(name, exception); end

    # source://yard//lib/yard/config.rb#146
    def load_plugins; end

    # source://yard//lib/yard/config.rb#91
    def options; end

    # source://yard//lib/yard/config.rb#91
    def options=(_arg0); end

    # source://yard//lib/yard/config.rb#236
    def read_config_file; end

    # source://yard//lib/yard/config.rb#135
    def save; end

    # source://yard//lib/yard/config.rb#252
    def translate_plugin_name(name); end

    # source://yard//lib/yard/config.rb#228
    def translate_plugin_names; end

    # source://yard//lib/yard/config.rb#259
    def with_yardopts; end
  end
end

# source://yard//lib/yard/config.rb#95
YARD::Config::CONFIG_DIR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/config.rb#98
YARD::Config::CONFIG_FILE = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/config.rb#105
YARD::Config::DEFAULT_CONFIG_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/config.rb#102
YARD::Config::IGNORED_PLUGINS = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/config.rb#114
YARD::Config::YARD_PLUGIN_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/docstring.rb#16
class YARD::Docstring < ::String
  # source://yard//lib/yard/docstring.rb#103
  def initialize(content = T.unsafe(nil), object = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring.rb#116
  def +(other); end

  # source://yard//lib/yard/docstring.rb#242
  def add_tag(*tags); end

  # source://yard//lib/yard/docstring.rb#53
  def all; end

  # source://yard//lib/yard/docstring.rb#132
  def all=(content, parse = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring.rb#310
  def blank?(only_visible_tags = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring.rb#300
  def delete_tag_if(&block); end

  # source://yard//lib/yard/docstring.rb#291
  def delete_tags(name); end

  # source://yard//lib/yard/docstring.rb#153
  def dup; end

  # source://yard//lib/yard/docstring.rb#283
  def has_tag?(name); end

  # source://yard//lib/yard/docstring.rb#56
  def hash_flag; end

  # source://yard//lib/yard/docstring.rb#57
  def hash_flag=(v); end

  # source://yard//lib/yard/docstring.rb#167
  def line; end

  # source://yard//lib/yard/docstring.rb#50
  def line_range; end

  # source://yard//lib/yard/docstring.rb#50
  def line_range=(_arg0); end

  # source://yard//lib/yard/docstring.rb#47
  def object; end

  # source://yard//lib/yard/docstring.rb#47
  def object=(_arg0); end

  # source://yard//lib/yard/docstring.rb#44
  def ref_tags; end

  # source://yard//lib/yard/docstring.rb#132
  def replace(content, parse = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring.rb#328
  def resolve_reference; end

  # source://yard//lib/yard/docstring.rb#173
  def summary; end

  # source://yard//lib/yard/docstring.rb#265
  def tag(name); end

  # source://yard//lib/yard/docstring.rb#273
  def tags(name = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring.rb#207
  def to_raw; end

  # source://yard//lib/yard/docstring.rb#125
  def to_s; end

  private

  # source://yard//lib/yard/docstring.rb#344
  def convert_ref_tags; end

  # source://yard//lib/yard/docstring.rb#369
  def parse_comments(comments); end

  # source://yard//lib/yard/docstring.rb#382
  def stable_sort_by(list); end

  class << self
    # source://yard//lib/yard/docstring.rb#28
    def default_parser; end

    # source://yard//lib/yard/docstring.rb#28
    def default_parser=(_arg0); end

    # source://yard//lib/yard/docstring.rb#77
    def new!(text, tags = T.unsafe(nil), object = T.unsafe(nil), raw_data = T.unsafe(nil), ref_object = T.unsafe(nil)); end

    # source://yard//lib/yard/docstring.rb#38
    def parser(*args); end
  end
end

# source://yard//lib/yard/docstring.rb#61
YARD::Docstring::META_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/docstring_parser.rb#30
class YARD::DocstringParser
  # source://yard//lib/yard/docstring_parser.rb#81
  def initialize(library = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring_parser.rb#232
  def create_directive(tag_name, tag_buf); end

  # source://yard//lib/yard/docstring_parser.rb#226
  def create_ref_tag(tag_name, name, object_name); end

  # source://yard//lib/yard/docstring_parser.rb#209
  def create_tag(tag_name, tag_buf = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring_parser.rb#45
  def directives; end

  # source://yard//lib/yard/docstring_parser.rb#45
  def directives=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#66
  def handler; end

  # source://yard//lib/yard/docstring_parser.rb#66
  def handler=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#70
  def library; end

  # source://yard//lib/yard/docstring_parser.rb#70
  def library=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#56
  def object; end

  # source://yard//lib/yard/docstring_parser.rb#56
  def object=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#113
  def parse(content, object = T.unsafe(nil), handler = T.unsafe(nil)); end

  # source://yard//lib/yard/docstring_parser.rb#129
  def parse_content(content); end

  # source://yard//lib/yard/docstring_parser.rb#196
  def post_process; end

  # source://yard//lib/yard/docstring_parser.rb#36
  def raw_text; end

  # source://yard//lib/yard/docstring_parser.rb#36
  def raw_text=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#61
  def reference; end

  # source://yard//lib/yard/docstring_parser.rb#61
  def reference=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#51
  def state; end

  # source://yard//lib/yard/docstring_parser.rb#51
  def state=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#252
  def tag_is_directive?(tag_name); end

  # source://yard//lib/yard/docstring_parser.rb#40
  def tags; end

  # source://yard//lib/yard/docstring_parser.rb#40
  def tags=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#33
  def text; end

  # source://yard//lib/yard/docstring_parser.rb#33
  def text=(_arg0); end

  # source://yard//lib/yard/docstring_parser.rb#95
  def to_docstring; end

  private

  # source://yard//lib/yard/docstring_parser.rb#324
  def call_after_parse_callbacks; end

  # source://yard//lib/yard/docstring_parser.rb#319
  def call_directives_after_parse; end

  # source://yard//lib/yard/docstring_parser.rb#305
  def detect_reference(content); end

  # source://yard//lib/yard/docstring_parser.rb#301
  def namespace; end

  class << self
    # source://yard//lib/yard/docstring_parser.rb#266
    def after_parse(&block); end

    # source://yard//lib/yard/docstring_parser.rb#271
    def after_parse_callbacks; end
  end
end

# source://yard//lib/yard/docstring_parser.rb#73
YARD::DocstringParser::META_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/gem_index.rb#6
module YARD::GemIndex
  private

  # source://yard//lib/yard/gem_index.rb#25
  def all; end

  # source://yard//lib/yard/gem_index.rb#17
  def each(&block); end

  # source://yard//lib/yard/gem_index.rb#9
  def find_all_by_name(*args); end

  class << self
    # source://yard//lib/yard/gem_index.rb#25
    def all; end

    # source://yard//lib/yard/gem_index.rb#17
    def each(&block); end

    # source://yard//lib/yard/gem_index.rb#9
    def find_all_by_name(*args); end
  end
end

# source://yard//lib/yard/autoload.rb#66
module YARD::Handlers; end

# source://yard//lib/yard/handlers/base.rb#149
class YARD::Handlers::Base
  include ::YARD::CodeObjects
  include ::YARD::Parser

  # source://yard//lib/yard/handlers/base.rb#276
  def initialize(source_parser, stmt); end

  # source://yard//lib/yard/handlers/base.rb#355
  def abort!; end

  # source://yard//lib/yard/handlers/base.rb#581
  def call_params; end

  # source://yard//lib/yard/handlers/base.rb#590
  def caller_method; end

  # source://yard//lib/yard/handlers/base.rb#561
  def ensure_loaded!(object, max_retries = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#348
  def extra_state; end

  # source://yard//lib/yard/handlers/base.rb#347
  def globals; end

  # source://yard//lib/yard/handlers/base.rb#341
  def namespace; end

  # source://yard//lib/yard/handlers/base.rb#342
  def namespace=(v); end

  # source://yard//lib/yard/handlers/base.rb#339
  def owner; end

  # source://yard//lib/yard/handlers/base.rb#340
  def owner=(v); end

  # source://yard//lib/yard/handlers/base.rb#304
  def parse_block(*_arg0); end

  # source://yard//lib/yard/handlers/base.rb#310
  def parser; end

  # source://yard//lib/yard/handlers/base.rb#297
  def process; end

  # source://yard//lib/yard/handlers/base.rb#370
  def push_state(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#407
  def register(*objects); end

  # source://yard//lib/yard/handlers/base.rb#450
  def register_docstring(object, docstring = T.unsafe(nil), stmt = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#537
  def register_dynamic(object); end

  # source://yard//lib/yard/handlers/base.rb#429
  def register_ensure_loaded(object); end

  # source://yard//lib/yard/handlers/base.rb#441
  def register_file_info(object, file = T.unsafe(nil), line = T.unsafe(nil), comments = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#473
  def register_group(object, group = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#523
  def register_module_function(object); end

  # source://yard//lib/yard/handlers/base.rb#499
  def register_source(object, source = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#487
  def register_transitive_tags(object); end

  # source://yard//lib/yard/handlers/base.rb#511
  def register_visibility(object, visibility = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/base.rb#345
  def scope; end

  # source://yard//lib/yard/handlers/base.rb#346
  def scope=(v); end

  # source://yard//lib/yard/handlers/base.rb#315
  def statement; end

  # source://yard//lib/yard/handlers/base.rb#343
  def visibility; end

  # source://yard//lib/yard/handlers/base.rb#344
  def visibility=(v); end

  class << self
    # source://yard//lib/yard/handlers/base.rb#159
    def clear_subclasses; end

    # source://yard//lib/yard/handlers/base.rb#211
    def handlers; end

    # source://yard//lib/yard/handlers/base.rb#192
    def handles(*matches); end

    # source://yard//lib/yard/handlers/base.rb#205
    def handles?(statement); end

    # source://yard//lib/yard/handlers/base.rb#235
    def in_file(filename); end

    # source://yard//lib/yard/handlers/base.rb#169
    def inherited(subclass); end

    # source://yard//lib/yard/handlers/base.rb#242
    def matches_file?(filename); end

    # source://yard//lib/yard/handlers/base.rb#219
    def namespace_only; end

    # source://yard//lib/yard/handlers/base.rb#225
    def namespace_only?; end

    # source://yard//lib/yard/handlers/base.rb#269
    def process(&block); end

    # source://yard//lib/yard/handlers/base.rb#165
    def subclasses; end
  end
end

# source://yard//lib/yard/autoload.rb#74
module YARD::Handlers::C; end

# source://yard//lib/yard/handlers/c/alias_handler.rb#2
class YARD::Handlers::C::AliasHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/alias_handler.rb#3
YARD::Handlers::C::AliasHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/attribute_handler.rb#2
class YARD::Handlers::C::AttributeHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/attribute_handler.rb#3
YARD::Handlers::C::AttributeHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/base.rb#5
class YARD::Handlers::C::Base < ::YARD::Handlers::Base
  include ::YARD::Parser::C
  include ::YARD::Handlers::Common::MethodHandler
  include ::YARD::Handlers::C::HandlerMethods

  # source://yard//lib/yard/handlers/c/base.rb#77
  def ensure_variable_defined!(var, max_retries = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#64
  def namespace_for_variable(var); end

  # source://yard//lib/yard/handlers/c/base.rb#94
  def namespaces; end

  # source://yard//lib/yard/handlers/c/base.rb#60
  def override_comments; end

  # source://yard//lib/yard/handlers/c/base.rb#104
  def parse_block(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#113
  def process_file(file, object); end

  # source://yard//lib/yard/handlers/c/base.rb#98
  def processed_files; end

  # source://yard//lib/yard/handlers/c/base.rb#38
  def register_docstring(object, docstring = T.unsafe(nil), stmt = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#42
  def register_file_info(object, file = T.unsafe(nil), line = T.unsafe(nil), comments = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#46
  def register_source(object, source = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#50
  def register_visibility(object, visibility = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/base.rb#56
  def symbols; end

  private

  # source://yard//lib/yard/handlers/c/base.rb#158
  def remove_var_prefix(var); end

  class << self
    # source://yard//lib/yard/handlers/c/base.rb#10
    def handles?(statement, processor); end

    # source://yard//lib/yard/handlers/c/base.rb#28
    def statement_class(type = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/handlers/c/base.rb#131
YARD::Handlers::C::Base::ERROR_CLASS_NAMES = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/handlers/c/class_handler.rb#2
class YARD::Handlers::C::ClassHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/class_handler.rb#3
YARD::Handlers::C::ClassHandler::MATCH1 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/class_handler.rb#9
YARD::Handlers::C::ClassHandler::MATCH2 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/constant_handler.rb#2
class YARD::Handlers::C::ConstantHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/constant_handler.rb#3
YARD::Handlers::C::ConstantHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/handler_methods.rb#5
module YARD::Handlers::C::HandlerMethods
  include ::YARD::Parser::C
  include ::YARD::CodeObjects
  include ::YARD::Handlers::Common::MethodHandler

  # source://yard//lib/yard/handlers/c/handler_methods.rb#86
  def handle_alias(var_name, new_name, old_name); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#75
  def handle_attribute(var_name, name, read, write); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#10
  def handle_class(var_name, class_name, parent, in_module = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#109
  def handle_constants(type, var_name, const_name, value); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#46
  def handle_method(scope, var_name, name, func_name, _source_file = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#33
  def handle_module(var_name, module_name, in_module = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/handlers/c/handler_methods.rb#123
  def find_constant_docstring(object); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#154
  def find_method_body(object, symbol); end

  # source://yard//lib/yard/handlers/c/handler_methods.rb#196
  def record_parameters(object, symbol, src); end
end

# source://yard//lib/yard/handlers/c/init_handler.rb#3
class YARD::Handlers::C::InitHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/init_handler.rb#4
YARD::Handlers::C::InitHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/method_handler.rb#2
class YARD::Handlers::C::MethodHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/method_handler.rb#3
YARD::Handlers::C::MethodHandler::MATCH1 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/method_handler.rb#14
YARD::Handlers::C::MethodHandler::MATCH2 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/method_handler.rb#18
YARD::Handlers::C::MethodHandler::MATCH3 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/mixin_handler.rb#2
class YARD::Handlers::C::MixinHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/mixin_handler.rb#3
YARD::Handlers::C::MixinHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/module_handler.rb#2
class YARD::Handlers::C::ModuleHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/module_handler.rb#3
YARD::Handlers::C::ModuleHandler::MATCH1 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/module_handler.rb#4
YARD::Handlers::C::ModuleHandler::MATCH2 = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/override_comment_handler.rb#3
class YARD::Handlers::C::OverrideCommentHandler < ::YARD::Handlers::C::Base
  # source://yard//lib/yard/handlers/c/override_comment_handler.rb#24
  def register_docstring(object, docstring = T.unsafe(nil), stmt = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/c/override_comment_handler.rb#28
  def register_file_info(object, file = T.unsafe(nil), line = T.unsafe(nil), comments = T.unsafe(nil)); end
end

# source://yard//lib/yard/handlers/c/path_handler.rb#2
class YARD::Handlers::C::PathHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/path_handler.rb#3
YARD::Handlers::C::PathHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/struct_handler.rb#2
class YARD::Handlers::C::StructHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/struct_handler.rb#3
YARD::Handlers::C::StructHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/c/symbol_handler.rb#3
class YARD::Handlers::C::SymbolHandler < ::YARD::Handlers::C::Base; end

# source://yard//lib/yard/handlers/c/symbol_handler.rb#4
YARD::Handlers::C::SymbolHandler::MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/autoload.rb#68
module YARD::Handlers::Common; end

# source://yard//lib/yard/handlers/common/method_handler.rb#6
module YARD::Handlers::Common::MethodHandler
  # source://yard//lib/yard/handlers/common/method_handler.rb#8
  def add_predicate_return_tag(obj); end
end

# source://yard//lib/yard/handlers/base.rb#8
class YARD::Handlers::HandlerAborted < ::RuntimeError; end

# source://yard//lib/yard/handlers/base.rb#15
class YARD::Handlers::NamespaceMissingError < ::YARD::Parser::UndocumentableError
  # source://yard//lib/yard/handlers/base.rb#18
  def initialize(object); end

  # source://yard//lib/yard/handlers/base.rb#16
  def object; end

  # source://yard//lib/yard/handlers/base.rb#16
  def object=(_arg0); end
end

# source://yard//lib/yard/handlers/processor.rb#20
class YARD::Handlers::Processor
  # source://yard//lib/yard/handlers/processor.rb#92
  def initialize(parser); end

  # source://yard//lib/yard/handlers/processor.rb#88
  def extra_state; end

  # source://yard//lib/yard/handlers/processor.rb#88
  def extra_state=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#41
  def file; end

  # source://yard//lib/yard/handlers/processor.rb#41
  def file=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#151
  def find_handlers(statement); end

  # source://yard//lib/yard/handlers/processor.rb#77
  def globals; end

  # source://yard//lib/yard/handlers/processor.rb#77
  def globals=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#44
  def namespace; end

  # source://yard//lib/yard/handlers/processor.rb#44
  def namespace=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#56
  def owner; end

  # source://yard//lib/yard/handlers/processor.rb#56
  def owner=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#140
  def parse_remaining_files; end

  # source://yard//lib/yard/handlers/processor.rb#59
  def parser_type; end

  # source://yard//lib/yard/handlers/processor.rb#59
  def parser_type=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#110
  def process(statements); end

  # source://yard//lib/yard/handlers/processor.rb#50
  def scope; end

  # source://yard//lib/yard/handlers/processor.rb#50
  def scope=(_arg0); end

  # source://yard//lib/yard/handlers/processor.rb#47
  def visibility; end

  # source://yard//lib/yard/handlers/processor.rb#47
  def visibility=(_arg0); end

  private

  # source://yard//lib/yard/handlers/processor.rb#172
  def handler_base_class; end

  # source://yard//lib/yard/handlers/processor.rb#180
  def handler_base_namespace; end

  # source://yard//lib/yard/handlers/processor.rb#161
  def handles?(handler, statement); end

  # source://yard//lib/yard/handlers/processor.rb#188
  def load_handlers; end

  class << self
    # source://yard//lib/yard/handlers/processor.rb#33
    def namespace_for_handler; end

    # source://yard//lib/yard/handlers/processor.rb#24
    def register_handler_namespace(type, ns); end
  end
end

# source://yard//lib/yard/autoload.rb#92
module YARD::Handlers::Ruby; end

# source://yard//lib/yard/handlers/ruby/alias_handler.rb#3
class YARD::Handlers::Ruby::AliasHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/attribute_handler.rb#3
class YARD::Handlers::Ruby::AttributeHandler < ::YARD::Handlers::Ruby::Base
  protected

  # source://yard//lib/yard/handlers/ruby/attribute_handler.rb#75
  def validated_attribute_names(params); end
end

# source://yard//lib/yard/handlers/ruby/base.rb#65
class YARD::Handlers::Ruby::Base < ::YARD::Handlers::Base
  include ::YARD::Parser::Ruby
  extend ::YARD::Parser::Ruby

  # source://yard//lib/yard/handlers/ruby/base.rb#144
  def call_params; end

  # source://yard//lib/yard/handlers/ruby/base.rb#155
  def caller_method; end

  # source://yard//lib/yard/handlers/ruby/base.rb#135
  def parse_block(inner_node, opts = T.unsafe(nil)); end

  class << self
    # source://yard//lib/yard/handlers/ruby/base.rb#113
    def handles?(node); end

    # source://yard//lib/yard/handlers/ruby/base.rb#105
    def meta_type(type); end

    # source://yard//lib/yard/handlers/ruby/base.rb#86
    def method_call(name = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/handlers/ruby/class_condition_handler.rb#12
class YARD::Handlers::Ruby::ClassConditionHandler < ::YARD::Handlers::Ruby::Base
  protected

  # source://yard//lib/yard/handlers/ruby/class_condition_handler.rb#36
  def parse_condition; end

  # source://yard//lib/yard/handlers/ruby/class_condition_handler.rb#87
  def parse_else_block; end

  # source://yard//lib/yard/handlers/ruby/class_condition_handler.rb#83
  def parse_then_block; end
end

# source://yard//lib/yard/handlers/ruby/class_handler.rb#3
class YARD::Handlers::Ruby::ClassHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::StructHandlerMethods

  private

  # source://yard//lib/yard/handlers/ruby/class_handler.rb#73
  def create_struct_superclass(superclass, superclass_def); end

  # source://yard//lib/yard/handlers/ruby/class_handler.rb#67
  def extract_parameters(superclass); end

  # source://yard//lib/yard/handlers/ruby/class_handler.rb#92
  def parse_struct_superclass(klass, superclass); end

  # source://yard//lib/yard/handlers/ruby/class_handler.rb#98
  def parse_superclass(superclass); end

  # source://yard//lib/yard/handlers/ruby/class_handler.rb#82
  def struct_superclass_name(superclass); end
end

# source://yard//lib/yard/handlers/ruby/class_variable_handler.rb#3
class YARD::Handlers::Ruby::ClassVariableHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/comment_handler.rb#3
class YARD::Handlers::Ruby::CommentHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/constant_handler.rb#3
class YARD::Handlers::Ruby::ConstantHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::StructHandlerMethods

  private

  # source://yard//lib/yard/handlers/ruby/constant_handler.rb#49
  def extract_parameters(superclass); end

  # source://yard//lib/yard/handlers/ruby/constant_handler.rb#21
  def process_constant(statement); end

  # source://yard//lib/yard/handlers/ruby/constant_handler.rb#33
  def process_structclass(statement); end
end

# source://yard//lib/yard/handlers/ruby/dsl_handler.rb#6
class YARD::Handlers::Ruby::DSLHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

# source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#5
module YARD::Handlers::Ruby::DSLHandlerMethods
  include ::YARD::CodeObjects
  include ::YARD::Parser

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#14
  def handle_comments; end

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#48
  def register_docstring(object, docstring = T.unsafe(nil), stmt = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#72
  def find_attached_macro; end

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#54
  def implicit_docstring?; end

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#85
  def macro_name_matches(macro); end

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#59
  def method_name; end

  # source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#68
  def method_signature; end
end

# source://yard//lib/yard/handlers/ruby/dsl_handler_methods.rb#9
YARD::Handlers::Ruby::DSLHandlerMethods::IGNORE_METHODS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/handlers/ruby/decorator_handler_methods.rb#3
module YARD::Handlers::Ruby::DecoratorHandlerMethods
  # source://yard//lib/yard/handlers/ruby/decorator_handler_methods.rb#43
  def process_decorator(*nodes, &block); end

  private

  # source://yard//lib/yard/handlers/ruby/decorator_handler_methods.rb#78
  def process_decorator_parameter(node, opts = T.unsafe(nil), &block); end
end

# source://yard//lib/yard/handlers/ruby/exception_handler.rb#3
class YARD::Handlers::Ruby::ExceptionHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/extend_handler.rb#4
class YARD::Handlers::Ruby::ExtendHandler < ::YARD::Handlers::Ruby::MixinHandler
  # source://yard//lib/yard/handlers/ruby/extend_handler.rb#8
  def scope; end

  private

  # source://yard//lib/yard/handlers/ruby/extend_handler.rb#12
  def process_mixin(mixin); end
end

# source://yard//lib/yard/handlers/ruby/base.rb#19
class YARD::Handlers::Ruby::HandlesExtension
  # source://yard//lib/yard/handlers/ruby/base.rb#22
  def initialize(name); end

  # source://yard//lib/yard/handlers/ruby/base.rb#27
  def matches?(node); end

  protected

  # source://yard//lib/yard/handlers/ruby/base.rb#34
  def name; end
end

# source://yard//lib/yard/autoload.rb#93
module YARD::Handlers::Ruby::Legacy; end

# source://yard//lib/yard/handlers/ruby/legacy/alias_handler.rb#3
class YARD::Handlers::Ruby::Legacy::AliasHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/attribute_handler.rb#3
class YARD::Handlers::Ruby::Legacy::AttributeHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/base.rb#10
class YARD::Handlers::Ruby::Legacy::Base < ::YARD::Handlers::Base
  include ::YARD::Parser::Ruby::Legacy::RubyToken

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#44
  def call_params; end

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#53
  def caller_method; end

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#35
  def parse_block(opts = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#68
  def extract_method_details; end

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#112
  def tokval(token, *accepted_types); end

  # source://yard//lib/yard/handlers/ruby/legacy/base.rb#178
  def tokval_list(tokenlist, *accepted_types); end

  class << self
    # source://yard//lib/yard/handlers/ruby/legacy/base.rb#15
    def handles?(stmt); end
  end
end

# source://yard//lib/yard/handlers/ruby/legacy/class_condition_handler.rb#4
class YARD::Handlers::Ruby::Legacy::ClassConditionHandler < ::YARD::Handlers::Ruby::Legacy::Base
  protected

  # source://yard//lib/yard/handlers/ruby/legacy/class_condition_handler.rb#29
  def parse_condition; end

  # source://yard//lib/yard/handlers/ruby/legacy/class_condition_handler.rb#73
  def parse_else_block; end

  # source://yard//lib/yard/handlers/ruby/legacy/class_condition_handler.rb#68
  def parse_then_block; end
end

# source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ClassHandler < ::YARD::Handlers::Ruby::Legacy::Base
  include ::YARD::Handlers::Ruby::StructHandlerMethods

  private

  # source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#74
  def create_struct_superclass(superclass, superclass_def); end

  # source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#69
  def extract_parameters(superstring); end

  # source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#95
  def parse_struct_subclass(klass, superclass_def); end

  # source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#102
  def parse_superclass(superclass); end

  # source://yard//lib/yard/handlers/ruby/legacy/class_handler.rb#83
  def struct_superclass_name(superclass); end
end

# source://yard//lib/yard/handlers/ruby/legacy/class_variable_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ClassVariableHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/class_variable_handler.rb#4
YARD::Handlers::Ruby::Legacy::ClassVariableHandler::HANDLER_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/ruby/legacy/comment_handler.rb#3
class YARD::Handlers::Ruby::Legacy::CommentHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/constant_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ConstantHandler < ::YARD::Handlers::Ruby::Legacy::Base
  include ::YARD::Handlers::Ruby::StructHandlerMethods

  private

  # source://yard//lib/yard/handlers/ruby/legacy/constant_handler.rb#25
  def extract_parameters(parameters); end

  # source://yard//lib/yard/handlers/ruby/legacy/constant_handler.rb#20
  def process_structclass(classname, parameters); end
end

# source://yard//lib/yard/handlers/ruby/legacy/constant_handler.rb#5
YARD::Handlers::Ruby::Legacy::ConstantHandler::HANDLER_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/handlers/ruby/legacy/dsl_handler.rb#7
class YARD::Handlers::Ruby::Legacy::DSLHandler < ::YARD::Handlers::Ruby::Legacy::Base
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

# source://yard//lib/yard/handlers/ruby/legacy/exception_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ExceptionHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/extend_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ExtendHandler < ::YARD::Handlers::Ruby::Legacy::MixinHandler
  # source://yard//lib/yard/handlers/ruby/legacy/extend_handler.rb#7
  def scope; end

  private

  # source://yard//lib/yard/handlers/ruby/legacy/extend_handler.rb#11
  def process_mixin(mixin); end
end

# source://yard//lib/yard/handlers/ruby/legacy/method_handler.rb#3
class YARD::Handlers::Ruby::Legacy::MethodHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/mixin_handler.rb#3
class YARD::Handlers::Ruby::Legacy::MixinHandler < ::YARD::Handlers::Ruby::Legacy::Base
  private

  # source://yard//lib/yard/handlers/ruby/legacy/mixin_handler.rb#26
  def process_mixin(mixin); end
end

# source://yard//lib/yard/handlers/ruby/legacy/module_function_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/module_handler.rb#3
class YARD::Handlers::Ruby::Legacy::ModuleHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/private_class_method_handler.rb#3
class YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler < ::YARD::Handlers::Ruby::Legacy::Base
  private

  # source://yard//lib/yard/handlers/ruby/legacy/private_class_method_handler.rb#15
  def privatize_class_method(name); end
end

# source://yard//lib/yard/handlers/ruby/legacy/private_constant_handler.rb#3
class YARD::Handlers::Ruby::Legacy::PrivateConstantHandler < ::YARD::Handlers::Ruby::Legacy::Base
  private

  # source://yard//lib/yard/handlers/ruby/legacy/private_constant_handler.rb#15
  def privatize_constant(name); end
end

# source://yard//lib/yard/handlers/ruby/legacy/visibility_handler.rb#3
class YARD::Handlers::Ruby::Legacy::VisibilityHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/legacy/yield_handler.rb#3
class YARD::Handlers::Ruby::Legacy::YieldHandler < ::YARD::Handlers::Ruby::Legacy::Base; end

# source://yard//lib/yard/handlers/ruby/base.rb#37
class YARD::Handlers::Ruby::MethodCallWrapper < ::YARD::Handlers::Ruby::HandlesExtension
  # source://yard//lib/yard/handlers/ruby/base.rb#38
  def matches?(node); end
end

# source://yard//lib/yard/handlers/ruby/method_condition_handler.rb#3
class YARD::Handlers::Ruby::MethodConditionHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/method_handler.rb#3
class YARD::Handlers::Ruby::MethodHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Common::MethodHandler

  # source://yard//lib/yard/handlers/ruby/method_handler.rb#69
  def format_args; end
end

# source://yard//lib/yard/handlers/ruby/mixin_handler.rb#3
class YARD::Handlers::Ruby::MixinHandler < ::YARD::Handlers::Ruby::Base
  protected

  # source://yard//lib/yard/handlers/ruby/mixin_handler.rb#25
  def process_mixin(mixin); end

  # source://yard//lib/yard/handlers/ruby/mixin_handler.rb#50
  def recipient(mixin); end
end

# source://yard//lib/yard/handlers/ruby/module_function_handler.rb#4
class YARD::Handlers::Ruby::ModuleFunctionHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods

  # source://yard//lib/yard/handlers/ruby/module_function_handler.rb#34
  def make_module_function(instance_method, namespace); end
end

# source://yard//lib/yard/handlers/ruby/module_handler.rb#3
class YARD::Handlers::Ruby::ModuleHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/handlers/ruby/private_class_method_handler.rb#3
class YARD::Handlers::Ruby::PrivateClassMethodHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

# source://yard//lib/yard/handlers/ruby/private_constant_handler.rb#6
class YARD::Handlers::Ruby::PrivateConstantHandler < ::YARD::Handlers::Ruby::Base
  private

  # source://yard//lib/yard/handlers/ruby/private_constant_handler.rb#28
  def privatize_constant(node); end
end

# source://yard//lib/yard/handlers/ruby/public_class_method_handler.rb#3
class YARD::Handlers::Ruby::PublicClassMethodHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

# source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#7
module YARD::Handlers::Ruby::StructHandlerMethods
  include ::YARD::CodeObjects

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#62
  def add_reader_tags(klass, new_method, member); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#77
  def add_writer_tags(klass, new_method, member); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#134
  def create_attributes(klass, members); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#92
  def create_class(classname, superclass); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#38
  def create_member_method?(klass, member, type = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#121
  def create_reader(klass, member); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#104
  def create_writer(klass, member); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#17
  def member_tag_for_member(klass, member, type = T.unsafe(nil)); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#26
  def members_from_tags(klass); end

  # source://yard//lib/yard/handlers/ruby/struct_handler_methods.rb#51
  def return_type_from_tag(member_tag); end
end

# source://yard//lib/yard/handlers/ruby/base.rb#53
class YARD::Handlers::Ruby::TestNodeWrapper < ::YARD::Handlers::Ruby::HandlesExtension
  # source://yard//lib/yard/handlers/ruby/base.rb#54
  def matches?(node); end
end

# source://yard//lib/yard/handlers/ruby/visibility_handler.rb#3
class YARD::Handlers::Ruby::VisibilityHandler < ::YARD::Handlers::Ruby::Base
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

# source://yard//lib/yard/handlers/ruby/yield_handler.rb#3
class YARD::Handlers::Ruby::YieldHandler < ::YARD::Handlers::Ruby::Base; end

# source://yard//lib/yard/autoload.rb#151
module YARD::I18n; end

# source://yard//lib/yard/i18n/locale.rb#8
class YARD::I18n::Locale
  # source://yard//lib/yard/i18n/locale.rb#34
  def initialize(name); end

  # source://yard//lib/yard/i18n/locale.rb#44
  def load(locale_directory); end

  # source://yard//lib/yard/i18n/locale.rb#29
  def name; end

  # source://yard//lib/yard/i18n/locale.rb#62
  def translate(message); end

  class << self
    # source://yard//lib/yard/i18n/locale.rb#15
    def default; end

    # source://yard//lib/yard/i18n/locale.rb#20
    def default=(locale); end
  end
end

# source://yard//lib/yard/i18n/message.rb#10
class YARD::I18n::Message
  # source://yard//lib/yard/i18n/message.rb#24
  def initialize(id); end

  # source://yard//lib/yard/i18n/message.rb#49
  def ==(other); end

  # source://yard//lib/yard/i18n/message.rb#43
  def add_comment(comment); end

  # source://yard//lib/yard/i18n/message.rb#35
  def add_location(path, line); end

  # source://yard//lib/yard/i18n/message.rb#19
  def comments; end

  # source://yard//lib/yard/i18n/message.rb#12
  def id; end

  # source://yard//lib/yard/i18n/message.rb#16
  def locations; end
end

# source://yard//lib/yard/i18n/messages.rb#7
class YARD::I18n::Messages
  include ::Enumerable

  # source://yard//lib/yard/i18n/messages.rb#11
  def initialize; end

  # source://yard//lib/yard/i18n/messages.rb#45
  def ==(other); end

  # source://yard//lib/yard/i18n/messages.rb#27
  def [](id); end

  # source://yard//lib/yard/i18n/messages.rb#20
  def each(&block); end

  # source://yard//lib/yard/i18n/messages.rb#37
  def register(id); end

  protected

  # source://yard//lib/yard/i18n/messages.rb#53
  def messages; end
end

# source://yard//lib/yard/i18n/pot_generator.rb#65
class YARD::I18n::PotGenerator
  # source://yard//lib/yard/i18n/pot_generator.rb#79
  def initialize(relative_base_path); end

  # source://yard//lib/yard/i18n/pot_generator.rb#122
  def generate; end

  # source://yard//lib/yard/i18n/pot_generator.rb#70
  def messages; end

  # source://yard//lib/yard/i18n/pot_generator.rb#103
  def parse_files(files); end

  # source://yard//lib/yard/i18n/pot_generator.rb#91
  def parse_objects(objects); end

  private

  # source://yard//lib/yard/i18n/pot_generator.rb#160
  def current_time; end

  # source://yard//lib/yard/i18n/pot_generator.rb#183
  def escape_message_id(message_id); end

  # source://yard//lib/yard/i18n/pot_generator.rb#194
  def extract_documents(object); end

  # source://yard//lib/yard/i18n/pot_generator.rb#268
  def extract_paragraphs(file); end

  # source://yard//lib/yard/i18n/pot_generator.rb#235
  def extract_tag_documents(tag); end

  # source://yard//lib/yard/i18n/pot_generator.rb#242
  def extract_tag_name(tag); end

  # source://yard//lib/yard/i18n/pot_generator.rb#255
  def extract_tag_text(tag); end

  # source://yard//lib/yard/i18n/pot_generator.rb#168
  def generate_message(pot, message); end

  # source://yard//lib/yard/i18n/pot_generator.rb#164
  def generate_pot_creation_date_value; end

  # source://yard//lib/yard/i18n/pot_generator.rb#136
  def header; end

  # source://yard//lib/yard/i18n/pot_generator.rb#190
  def register_message(id); end
end

# source://yard//lib/yard/i18n/text.rb#5
class YARD::I18n::Text
  # source://yard//lib/yard/i18n/text.rb#12
  def initialize(input, options = T.unsafe(nil)); end

  # source://yard//lib/yard/i18n/text.rb#35
  def extract_messages; end

  # source://yard//lib/yard/i18n/text.rb#52
  def translate(locale); end

  private

  # source://yard//lib/yard/i18n/text.rb#134
  def emit_attribute_event(match_data, line_no); end

  # source://yard//lib/yard/i18n/text.rb#147
  def emit_empty_line_event(line, line_no); end

  # source://yard//lib/yard/i18n/text.rb#125
  def emit_markup_event(line, line_no); end

  # source://yard//lib/yard/i18n/text.rb#156
  def emit_paragraph_event(paragraph, paragraph_start_line, line_no, &block); end

  # source://yard//lib/yard/i18n/text.rb#76
  def parse(&block); end
end

# source://yard//lib/yard/logging.rb#12
class YARD::Logger < ::Logger
  # source://yard//lib/yard/logging.rb#43
  def initialize(pipe, *args); end

  # source://yard//lib/yard/logging.rb#143
  def <<(msg = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#154
  def backtrace(exc, level_meth = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#80
  def capture(msg, nontty_log = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#121
  def clear_progress; end

  # source://yard//lib/yard/logging.rb#59
  def debug(*args); end

  # source://yard//lib/yard/logging.rb#179
  def enter_level(new_level = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#17
  def io; end

  # source://yard//lib/yard/logging.rb#18
  def io=(pipe); end

  # source://yard//lib/yard/logging.rb#143
  def print(msg = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#96
  def progress(msg, nontty_log = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#132
  def puts(msg = T.unsafe(nil)); end

  # source://yard//lib/yard/logging.rb#22
  def show_backtraces; end

  # source://yard//lib/yard/logging.rb#23
  def show_backtraces=(_arg0); end

  # source://yard//lib/yard/logging.rb#27
  def show_progress; end

  # source://yard//lib/yard/logging.rb#34
  def show_progress=(_arg0); end

  # source://yard//lib/yard/logging.rb#65
  def warn(*args); end

  # source://yard//lib/yard/logging.rb#167
  def warn_no_continuations; end

  # source://yard//lib/yard/logging.rb#69
  def warned; end

  # source://yard//lib/yard/logging.rb#69
  def warned=(_arg0); end

  private

  # source://yard//lib/yard/logging.rb#190
  def add(*args); end

  # source://yard//lib/yard/logging.rb#195
  def clear_line; end

  # source://yard//lib/yard/logging.rb#201
  def format_log(sev, _time, _prog, msg); end

  # source://logger/1.4.2/logger.rb#484
  def print_no_newline(msg); end

  class << self
    # source://yard//lib/yard/logging.rb#38
    def instance(pipe = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/logging.rb#13
YARD::Logger::PROGRESS_INDICATORS = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/options.rb#69
class YARD::Options
  # source://yard//lib/yard/options.rb#157
  def ==(other); end

  # source://yard//lib/yard/options.rb#91
  def [](key); end

  # source://yard//lib/yard/options.rb#100
  def []=(key, value); end

  # source://yard//lib/yard/options.rb#207
  def delete(key); end

  # source://yard//lib/yard/options.rb#143
  def each; end

  # source://yard//lib/yard/options.rb#151
  def inspect; end

  # source://yard//lib/yard/options.rb#123
  def merge(opts); end

  # source://yard//lib/yard/options.rb#170
  def method_missing(meth, *args, &block); end

  # source://yard//lib/yard/options.rb#188
  def reset_defaults; end

  # source://yard//lib/yard/options.rb#129
  def to_hash; end

  # source://yard//lib/yard/options.rb#109
  def update(opts); end

  class << self
    # source://yard//lib/yard/options.rb#80
    def default_attr(key, default); end
  end
end

# source://yard//lib/yard/autoload.rb#161
module YARD::Parser; end

# source://yard//lib/yard/parser/base.rb#16
class YARD::Parser::Base
  # source://yard//lib/yard/parser/base.rb#26
  def initialize(source, filename); end

  # source://yard//lib/yard/parser/base.rb#52
  def enumerator; end

  # source://yard//lib/yard/parser/base.rb#33
  def parse; end

  # source://yard//lib/yard/parser/base.rb#40
  def tokenize; end

  class << self
    # source://yard//lib/yard/parser/base.rb#18
    def parse(source, filename = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/autoload.rb#162
module YARD::Parser::C; end

# source://yard//lib/yard/parser/c/statement.rb#41
class YARD::Parser::C::BodyStatement < ::YARD::Parser::C::Statement
  # source://yard//lib/yard/parser/c/statement.rb#42
  def comments; end

  # source://yard//lib/yard/parser/c/statement.rb#42
  def comments=(_arg0); end
end

# source://yard//lib/yard/parser/c/c_parser.rb#5
class YARD::Parser::C::CParser < ::YARD::Parser::Base
  # source://yard//lib/yard/parser/c/c_parser.rb#6
  def initialize(source, file = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#24
  def enumerator; end

  # source://yard//lib/yard/parser/c/c_parser.rb#19
  def parse; end

  # source://yard//lib/yard/parser/c/c_parser.rb#28
  def tokenize; end

  private

  # source://yard//lib/yard/parser/c/c_parser.rb#213
  def advance(num = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#216
  def advance_loop; end

  # source://yard//lib/yard/parser/c/c_parser.rb#195
  def attach_comment(statement); end

  # source://yard//lib/yard/parser/c/c_parser.rb#214
  def back(num = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#225
  def char(num = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#96
  def consume_body_statements; end

  # source://yard//lib/yard/parser/c/c_parser.rb#136
  def consume_comment(add_comment = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#59
  def consume_directive; end

  # source://yard//lib/yard/parser/c/c_parser.rb#47
  def consume_quote(type = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#73
  def consume_toplevel_statement; end

  # source://yard//lib/yard/parser/c/c_parser.rb#169
  def consume_until(end_char, bracket_level = T.unsafe(nil), brace_level = T.unsafe(nil), add_comment = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#132
  def consume_whitespace; end

  # source://yard//lib/yard/parser/c/c_parser.rb#227
  def nextchar(num = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#220
  def nextline; end

  # source://yard//lib/yard/parser/c/c_parser.rb#34
  def parse_toplevel; end

  # source://yard//lib/yard/parser/c/c_parser.rb#226
  def prevchar(num = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/c_parser.rb#118
  def strip_non_statement_data; end

  # source://yard//lib/yard/parser/c/c_parser.rb#229
  def struct; end
end

# source://yard//lib/yard/parser/c/statement.rb#51
class YARD::Parser::C::Comment < ::YARD::Parser::C::Statement
  include ::YARD::Parser::C::CommentParser

  # source://yard//lib/yard/parser/c/statement.rb#58
  def initialize(source, file = T.unsafe(nil), line = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/statement.rb#62
  def comments; end

  # source://yard//lib/yard/parser/c/statement.rb#55
  def overrides; end

  # source://yard//lib/yard/parser/c/statement.rb#55
  def overrides=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#56
  def statement; end

  # source://yard//lib/yard/parser/c/statement.rb#56
  def statement=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#54
  def type; end

  # source://yard//lib/yard/parser/c/statement.rb#54
  def type=(_arg0); end
end

# source://yard//lib/yard/parser/c/comment_parser.rb#5
module YARD::Parser::C::CommentParser
  protected

  # source://yard//lib/yard/parser/c/comment_parser.rb#8
  def parse_comments(comments); end

  private

  # source://yard//lib/yard/parser/c/comment_parser.rb#42
  def parse_callseq(comments); end

  # source://yard//lib/yard/parser/c/comment_parser.rb#30
  def parse_overrides(comments); end

  # source://yard//lib/yard/parser/c/comment_parser.rb#87
  def parse_types(types); end

  # source://yard//lib/yard/parser/c/comment_parser.rb#126
  def remove_private_comments(comment); end
end

# source://yard//lib/yard/parser/c/statement.rb#5
class YARD::Parser::C::Statement
  # source://yard//lib/yard/parser/c/statement.rb#16
  def initialize(source, file = T.unsafe(nil), line = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/c/statement.rb#14
  def comments_hash_flag; end

  # source://yard//lib/yard/parser/c/statement.rb#14
  def comments_hash_flag=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#26
  def comments_range; end

  # source://yard//lib/yard/parser/c/statement.rb#8
  def file; end

  # source://yard//lib/yard/parser/c/statement.rb#8
  def file=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#30
  def first_line; end

  # source://yard//lib/yard/parser/c/statement.rb#12
  def group; end

  # source://yard//lib/yard/parser/c/statement.rb#12
  def group=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#7
  def line; end

  # source://yard//lib/yard/parser/c/statement.rb#7
  def line=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#22
  def line_range; end

  # source://yard//lib/yard/parser/c/statement.rb#36
  def show; end

  # source://yard//lib/yard/parser/c/statement.rb#30
  def signature; end

  # source://yard//lib/yard/parser/c/statement.rb#6
  def source; end

  # source://yard//lib/yard/parser/c/statement.rb#6
  def source=(_arg0); end
end

# source://yard//lib/yard/parser/c/statement.rb#45
class YARD::Parser::C::ToplevelStatement < ::YARD::Parser::C::Statement
  # source://yard//lib/yard/parser/c/statement.rb#46
  def block; end

  # source://yard//lib/yard/parser/c/statement.rb#46
  def block=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#48
  def comments; end

  # source://yard//lib/yard/parser/c/statement.rb#48
  def comments=(_arg0); end

  # source://yard//lib/yard/parser/c/statement.rb#47
  def declaration; end

  # source://yard//lib/yard/parser/c/statement.rb#47
  def declaration=(_arg0); end
end

# source://yard//lib/yard/parser/source_parser.rb#21
class YARD::Parser::OrderedParser
  # source://yard//lib/yard/parser/source_parser.rb#33
  def initialize(global_state, files); end

  # source://yard//lib/yard/parser/source_parser.rb#23
  def files; end

  # source://yard//lib/yard/parser/source_parser.rb#23
  def files=(_arg0); end

  # source://yard//lib/yard/parser/source_parser.rb#42
  def parse; end
end

# source://yard//lib/yard/parser/source_parser.rb#13
class YARD::Parser::ParserSyntaxError < ::YARD::Parser::UndocumentableError; end

# source://yard//lib/yard/autoload.rb#171
module YARD::Parser::Ruby
  # source://yard//lib/yard/parser/ruby/ast_node.rb#25
  def s(*args); end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#41
class YARD::Parser::Ruby::AstNode < ::Array
  # source://yard//lib/yard/parser/ruby/ast_node.rb#153
  def initialize(type, arr, opts = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#167
  def ==(other); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#261
  def block?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#241
  def call?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#199
  def children; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def comments; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#42
  def comments_hash_flag; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def comments_range; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#251
  def condition?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#246
  def def?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def docstring; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def docstring=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#42
  def docstring_hash_flag; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#42
  def docstring_hash_flag=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def docstring_range; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def docstring_range=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#76
  def file; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#49
  def file=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#278
  def first_line; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#82
  def full_source; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#49
  def full_source=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#47
  def group; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#47
  def group=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#268
  def has_line?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#323
  def inspect; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#193
  def jump(*node_types); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#236
  def kw?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#273
  def line; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#70
  def line_range; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#49
  def line_range=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#231
  def literal?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#256
  def loop?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#59
  def parent; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#59
  def parent=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#290
  def pretty_print(q); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#226
  def ref?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#285
  def show; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#89
  def source; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def source=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#63
  def source_range; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#49
  def source_range=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#43
  def to_s; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#220
  def token?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#208
  def traverse; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#56
  def type; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#56
  def type=(_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#331
  def unfreeze; end

  private

  # source://yard//lib/yard/parser/ruby/ast_node.rb#341
  def reset_line_info; end

  class << self
    # source://yard//lib/yard/parser/ruby/ast_node.rb#111
    def node_class_for(type); end
  end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#96
YARD::Parser::Ruby::AstNode::KEYWORDS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/ast_node.rb#530
class YARD::Parser::Ruby::ClassNode < ::YARD::Parser::Ruby::KeywordNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#533
  def block; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#531
  def class_name; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#532
  def superclass; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#548
class YARD::Parser::Ruby::CommentNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#549
  def comments; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#549
  def docstring; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#550
  def docstring=(value); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#554
  def first_line; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#553
  def source; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#515
class YARD::Parser::Ruby::ConditionalNode < ::YARD::Parser::Ruby::KeywordNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#517
  def condition; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#516
  def condition?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#520
  def else_block; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#518
  def then_block; end

  private

  # source://yard//lib/yard/parser/ruby/ast_node.rb#527
  def cmod?; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#376
class YARD::Parser::Ruby::KeywordNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#377
  def kw?; end
end

# source://yard//lib/yard/autoload.rb#172
module YARD::Parser::Ruby::Legacy; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#314
class YARD::Parser::Ruby::Legacy::RubyLex
  include ::YARD::Parser::Ruby::Legacy::RubyToken
  include ::IRB

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#437
  def initialize(content); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#472
  def char_no; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#430
  def continue; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#463
  def exception_on_syntax_error; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#463
  def exception_on_syntax_error=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#476
  def get_read; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#480
  def getc; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#484
  def getc_of_rests; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#488
  def gets; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1257
  def identify_comment; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#945
  def identify_gvar; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1062
  def identify_here_document; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#980
  def identify_identifier; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1130
  def identify_number(start); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1111
  def identify_quotation(initial_char); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1192
  def identify_string(ltype, quoted = T.unsafe(nil), opener = T.unsafe(nil), initial_char = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#465
  def indent; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#510
  def lex; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#586
  def lex_init; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#759
  def lex_int2; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#431
  def lex_state; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#468
  def line_no; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#506
  def peek(i = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#502
  def peek_equal?(str); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#462
  def read_auto_clean_up; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#462
  def read_auto_clean_up=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1280
  def read_escape; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#1242
  def skip_inner_expression; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#461
  def skip_space; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#461
  def skip_space=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#526
  def token; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#498
  def ungetc(c = T.unsafe(nil)); end

  class << self
    # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#433
    def debug?; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#552
YARD::Parser::Ruby::Legacy::RubyLex::ACCEPTS_COLON = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#343
class YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#346
  def initialize(content); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#365
  def column; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#419
  def divert_read_from(reserve); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#400
  def get_read; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#369
  def getc; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#388
  def getc_already_read; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#344
  def line_num; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#406
  def peek(at); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#415
  def peek_equal(str); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#392
  def ungetc(_ch); end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#553
YARD::Parser::Ruby::Legacy::RubyLex::DEINDENT_CLAUSE = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#580
YARD::Parser::Ruby::Legacy::RubyLex::DLtype2Token = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#548
YARD::Parser::Ruby::Legacy::RubyLex::ENINDENT_CLAUSE = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#571
YARD::Parser::Ruby::Legacy::RubyLex::Ltype2Token = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#555
YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_LTYPE = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#564
YARD::Parser::Ruby::Legacy::RubyLex::PERCENT_PAREN = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#8
class YARD::Parser::Ruby::Legacy::RubyParser < ::YARD::Parser::Base
  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#9
  def initialize(source, _filename); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#26
  def encoding_line; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#22
  def enumerator; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#13
  def parse; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#27
  def shebang_line; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_parser.rb#18
  def tokenize; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#6
module YARD::Parser::Ruby::Legacy::RubyToken
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#125
  def Token(token, value = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#119
  def set_token_position(line, char); end

  class << self
    # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#275
    def def_token(token_n, super_token = T.unsafe(nil), reading = T.unsafe(nil), *opts); end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#10
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_ARG = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#7
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_BEG = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#13
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_CLASS = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#12
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_DOT = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#9
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_END = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#11
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_FNAME = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#8
YARD::Parser::Ruby::Legacy::RubyToken::EXPR_MID = T.let(T.unsafe(nil), Symbol)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#308
YARD::Parser::Ruby::Legacy::RubyToken::NEWLINE_TOKEN = T.let(T.unsafe(nil), YARD::Parser::Ruby::Legacy::RubyToken::TkNL)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::OPASGN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkALIAS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkAMPER < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkAND < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkANDOP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkAREF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkASET < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkASSIGN < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkASSOC < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkAT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBACKQUOTE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBACKSLASH < ::YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBACK_REF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBEGIN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBITAND < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBITNOT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBITOR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBITXOR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkBREAK < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#54
class YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#55
  def text; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCASE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCLASS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCMP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCOLON < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCOLON2 < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCOLON3 < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCOMMA < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCOMMENT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkCONSTANT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDEF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDEFINED < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDIV < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDO < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDOLLAR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDOT < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDOT2 < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDOT3 < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDREGEXP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkNode; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDSTRING < ::YARD::Parser::Ruby::Legacy::RubyToken::TkNode; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkDXSTRING < ::YARD::Parser::Ruby::Legacy::RubyToken::TkNode; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkELSE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkELSIF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkEND < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkEND_OF_SCRIPT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkENSURE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkEQ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkEQQ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#115
class YARD::Parser::Ruby::Legacy::RubyToken::TkError < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkFALSE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkFID < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkFLOAT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkFOR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkGEQ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkGT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkGVAR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkIDENTIFIER < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkIF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkIF_MOD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkIN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkINTEGER < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkIVAR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#72
class YARD::Parser::Ruby::Legacy::RubyToken::TkId < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#73
  def initialize(line_no, char_no, name); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#77
  def name; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#81
class YARD::Parser::Ruby::Legacy::RubyToken::TkKW < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLABEL < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLBRACE < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLBRACK < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLEQ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLPAREN < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLSHFT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkLT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkMATCH < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkMINUS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkMOD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkMODULE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkMULT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNEQ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNEXT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNIL < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNL < ::YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNMATCH < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNOT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNOTOP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkNTH_REF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#63
class YARD::Parser::Ruby::Legacy::RubyToken::TkNode < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#64
  def node; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#98
class YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#99
  def initialize(line_no, char_no, op); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#104
  def op; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkOR < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkOROP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#92
class YARD::Parser::Ruby::Legacy::RubyToken::TkOp < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#93
  def name; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkPLUS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkPOW < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkQUESTION < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRBRACE < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRBRACK < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkREDO < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkREGEXP < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRESCUE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRETRY < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRETURN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRPAREN < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkRSHFT < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#271
YARD::Parser::Ruby::Legacy::RubyToken::TkReading2Token = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSELF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSEMICOLON < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSPACE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSTAR < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSTRING < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSUPER < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSYMBEG < ::YARD::Parser::Ruby::Legacy::RubyToken::TkId; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkSYMBOL < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#59
class YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#60
  def text; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#272
YARD::Parser::Ruby::Legacy::RubyToken::TkSymbol2Token = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkTHEN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkTRUE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUMINUS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUNDEF < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUNLESS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUNLESS_MOD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUNTIL < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUNTIL_MOD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkUPLUS < ::YARD::Parser::Ruby::Legacy::RubyToken::TkOp
  class << self
    def op_name; end
  end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#107
class YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#108
  def initialize(line_no, char_no, _id); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#112
  def name; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#85
class YARD::Parser::Ruby::Legacy::RubyToken::TkVal < ::YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#86
  def initialize(line_no, char_no, value = T.unsafe(nil)); end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkWHEN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkWHILE < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkWHILE_MOD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#68
class YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace < ::YARD::Parser::Ruby::Legacy::RubyToken::Token; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkXSTRING < ::YARD::Parser::Ruby::Legacy::RubyToken::TkVal; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TkYIELD < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::Tk__FILE__ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::Tk__LINE__ < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TklBEGIN < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#281
class YARD::Parser::Ruby::Legacy::RubyToken::TklEND < ::YARD::Parser::Ruby::Legacy::RubyToken::TkKW; end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#16
class YARD::Parser::Ruby::Legacy::RubyToken::Token
  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#37
  def initialize(line_no, char_no); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#23
  def char_no; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#29
  def lex_state; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#29
  def lex_state=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#19
  def line_no; end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#47
  def set_text(text); end

  # source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#26
  def text; end
end

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#32
YARD::Parser::Ruby::Legacy::RubyToken::Token::NO_TEXT = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/parser/ruby/legacy/ruby_lex.rb#147
YARD::Parser::Ruby::Legacy::RubyToken::TokenDefinitions = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/legacy/statement.rb#4
class YARD::Parser::Ruby::Legacy::Statement
  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#14
  def initialize(tokens, block = T.unsafe(nil), comments = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#5
  def block; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#5
  def comments; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#12
  def comments_hash_flag; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#12
  def comments_hash_flag=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#6
  def comments_range; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#6
  def comments_range=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#21
  def first_line; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#10
  def group; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#10
  def group=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#34
  def inspect; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#46
  def line; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#52
  def line_range; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#41
  def show; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#21
  def signature; end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#27
  def source(include_block = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#27
  def to_s(include_block = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#5
  def tokens; end

  private

  # source://yard//lib/yard/parser/ruby/legacy/statement.rb#58
  def clean_tokens(tokens); end
end

# source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#4
class YARD::Parser::Ruby::Legacy::StatementList < ::Array
  include ::YARD::Parser::Ruby::Legacy::RubyToken

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#17
  def initialize(content); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#7
  def encoding_line; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#7
  def encoding_line=(_arg0); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#7
  def shebang_line; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#7
  def shebang_line=(_arg0); end

  private

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#362
  def balances?(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#45
  def next_statement; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#34
  def parse_statements; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#388
  def peek_no_space; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#194
  def process_block_token(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#293
  def process_complex_block_opener(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#213
  def process_initial_comment(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#268
  def process_simple_block_opener(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#305
  def process_statement_end(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#130
  def process_token(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#380
  def push_token(tk); end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#111
  def sanitize_block; end

  # source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#96
  def sanitize_statement_end; end
end

# source://yard//lib/yard/parser/ruby/legacy/statement_list.rb#11
YARD::Parser::Ruby::Legacy::StatementList::OPEN_BLOCK_TOKENS = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/legacy/token_list.rb#4
class YARD::Parser::Ruby::Legacy::TokenList < ::Array
  include ::YARD::Parser::Ruby::Legacy::RubyToken

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#7
  def initialize(content = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#21
  def <<(*tokens); end

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#21
  def push(*tokens); end

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#37
  def squeeze(type = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#11
  def to_s(full_statement = T.unsafe(nil), show_block = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#53
  def convert_token(lex, tk); end

  # source://yard//lib/yard/parser/ruby/legacy/token_list.rb#44
  def parse_content(content); end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#372
class YARD::Parser::Ruby::LiteralNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#373
  def literal?; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#541
class YARD::Parser::Ruby::LoopNode < ::YARD::Parser::Ruby::KeywordNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#544
  def block; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#543
  def condition; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#542
  def loop?; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#438
class YARD::Parser::Ruby::MethodCallNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#464
  def block; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#462
  def block_param; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#439
  def call?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#442
  def method_name(name_only = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#440
  def namespace; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#453
  def parameters(include_block_param = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/parser/ruby/ast_node.rb#474
  def call_has_paren?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#470
  def index_adjust; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#479
class YARD::Parser::Ruby::MethodDefinitionNode < ::YARD::Parser::Ruby::AstNode
  def block(*_arg0); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#481
  def def?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#480
  def kw?; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#484
  def method_name(name_only = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#482
  def namespace; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#489
  def parameters(include_block_param = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#495
  def signature; end

  private

  # source://yard//lib/yard/parser/ruby/ast_node.rb#510
  def index_adjust; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#536
class YARD::Parser::Ruby::ModuleNode < ::YARD::Parser::Ruby::KeywordNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#538
  def block; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#537
  def module_name; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#380
class YARD::Parser::Ruby::ParameterNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#430
  def args_forward; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#426
  def block_param; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#414
  def double_splat_param; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#396
  def named_params; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#406
  def splat_param; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#410
  def unnamed_end_params; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#385
  def unnamed_optional_params; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#381
  def unnamed_required_params; end
end

# source://yard//lib/yard/parser/ruby/ast_node.rb#360
class YARD::Parser::Ruby::ReferenceNode < ::YARD::Parser::Ruby::AstNode
  # source://yard//lib/yard/parser/ruby/ast_node.rb#367
  def namespace; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#363
  def path; end

  # source://yard//lib/yard/parser/ruby/ast_node.rb#361
  def ref?; end
end

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#27
class YARD::Parser::Ruby::RipperParser < ::Ripper
  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#32
  def initialize(source, filename, *args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def ast; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def charno; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def comments; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#29
  def encoding_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#64
  def enumerator; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def file; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#68
  def file_encoding; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#29
  def frozen_string_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_BEGIN(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_CHAR(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_END(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on___end__(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_alias(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_alias_error(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_arg_ambiguous(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_arg_paren(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_args_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_args_add_block(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_args_add_star(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_args_forward(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_args_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_aryptn(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_assign(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_assign_error(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_assoc_splat(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_backref(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_backtick(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_begin(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_binary(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_block_var(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_blockarg(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_brace_block(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_break(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_call(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_case(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_class(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_class_name_error(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_comma(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_command(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_command_call(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_const(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_const_path_field(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_const_ref(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_cvar(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_def(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_defined(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_defs(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_do_block(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_dot2(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_dot3(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_else(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_elsif(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_embexpr_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_embexpr_end(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_embvar(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_ensure(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_excessed_comma(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_fcall(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_field(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_float(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_for(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_gvar(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_heredoc_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_heredoc_dedent(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_heredoc_end(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_hshptn(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_ident(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_if(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#449
  def on_if_mod(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_ifop(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#222
  def on_ignored_nl(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_ignored_sp(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_imaginary(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_in(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_int(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_ivar(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#209
  def on_kw(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_kwrest_param(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_label_end(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_lbrace(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_lparen(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_magic_comment(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_massign(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_method_add_arg(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_method_add_block(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_mlhs_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_mlhs_add_post(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_mlhs_add_star(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_mlhs_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_mlhs_paren(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_module(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_mrhs_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_mrhs_add_star(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_mrhs_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_mrhs_new_from_args(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_next(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#222
  def on_nl(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_nokw_param(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#209
  def on_op(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_opassign(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_operator_ambiguous(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_param_error(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_paren(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_period(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#474
  def on_qsymbols_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_qsymbols_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#462
  def on_qsymbols_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#474
  def on_qwords_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_qwords_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#462
  def on_qwords_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_rational(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_rbrace(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_redo(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_regexp_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_regexp_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_regexp_end(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_regexp_literal(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_regexp_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_rescue_mod(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_rest_param(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_retry(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_return(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_return0(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_rparen(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_sclass(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_semicolon(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_stmts_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_stmts_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_string_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_string_concat(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_string_dvar(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_string_embexpr(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_super(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_symbeg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_symbol(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_symbol_literal(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#474
  def on_symbols_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_symbols_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#462
  def on_symbols_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_tlambda(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_tlambeg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_top_const_field(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_tstring_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_tstring_content(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_tstring_end(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_undef(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_unless(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#449
  def on_unless_mod(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_until(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#449
  def on_until_mod(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_var_alias(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_var_field(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_var_ref(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#177
  def on_vcall(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_when(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_while(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#449
  def on_while_mod(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_word_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_word_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#474
  def on_words_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#199
  def on_words_beg(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#462
  def on_words_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#188
  def on_words_sep(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#162
  def on_xstring_add(list, item); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_xstring_literal(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#155
  def on_xstring_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_yield(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_yield0(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#170
  def on_zsuper(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#55
  def parse; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def root; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#29
  def shebang_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#28
  def tokens; end

  private

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#667
  def add_comment(line, node = T.unsafe(nil), before_node = T.unsafe(nil), into = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#271
  def add_token(token, data); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#611
  def comment_starts_line?(charno); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#606
  def compile_error(msg); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#693
  def freeze_tree(node = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#620
  def insert_comments; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#377
  def on_aref(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#385
  def on_aref_field(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#391
  def on_array(other); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#352
  def on_assoc_new(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#364
  def on_assoclist_from_args(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#360
  def on_bare_assoc_hash(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#347
  def on_body_stmt(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#347
  def on_bodystmt(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#542
  def on_comment(comment); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#441
  def on_const_path_ref(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#419
  def on_dyna_symbol(sym); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#592
  def on_embdoc(text); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#586
  def on_embdoc_beg(text); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#597
  def on_embdoc_end(text); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#356
  def on_hash(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#534
  def on_label(data); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#497
  def on_lambda(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#409
  def on_lbracket(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#515
  def on_params(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#606
  def on_parse_error(msg); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#343
  def on_program(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#414
  def on_rbracket(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#506
  def on_rescue(exc, *args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#232
  def on_sp(tok); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#501
  def on_string_content(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#484
  def on_string_literal(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#429
  def on_top_const_ref(*args); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#368
  def on_unary(op, val); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#511
  def on_void_stmt; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#237
  def visit_event(node); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#251
  def visit_event_arr(node); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#259
  def visit_ns_token(token, data, ast_token = T.unsafe(nil)); end
end

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#133
YARD::Parser::Ruby::RipperParser::AST_TOKENS = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#136
YARD::Parser::Ruby::RipperParser::COMMENT_SKIP_NODE_TYPES = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#78
YARD::Parser::Ruby::RipperParser::MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#131
YARD::Parser::Ruby::RipperParser::REV_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/ruby/ruby_parser.rb#12
class YARD::Parser::Ruby::RubyParser < ::YARD::Parser::Base
  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#13
  def initialize(source, filename); end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#21
  def encoding_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#19
  def enumerator; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#22
  def frozen_string_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#17
  def parse; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#20
  def shebang_line; end

  # source://yard//lib/yard/parser/ruby/ruby_parser.rb#18
  def tokenize; end
end

# source://yard//lib/yard/parser/ruby/token_resolver.rb#8
class YARD::Parser::Ruby::TokenResolver
  include ::Enumerable
  include ::YARD::CodeObjects::NamespaceMapper

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#16
  def initialize(source, namespace = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#46
  def each; end

  protected

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#94
  def last_sep; end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#95
  def last_sep=(v); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#94
  def next_object; end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#95
  def next_object=(v); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#94
  def object; end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#95
  def object=(v); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#94
  def skip_group; end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#95
  def skip_group=(v); end

  private

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#112
  def lookup(toktype, name); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#134
  def object_resolved_types(obj = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#106
  def pop_state; end

  # source://yard//lib/yard/parser/ruby/token_resolver.rb#102
  def push_state; end

  class << self
    # source://yard//lib/yard/parser/ruby/token_resolver.rb#92
    def state_attr(*attrs); end
  end
end

# source://yard//lib/yard/parser/source_parser.rb#64
class YARD::Parser::SourceParser
  # source://yard//lib/yard/parser/source_parser.rb#406
  def initialize(parser_type = T.unsafe(nil), globals1 = T.unsafe(nil), globals2 = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/source_parser.rb#399
  def contents; end

  # source://yard//lib/yard/parser/source_parser.rb#386
  def file; end

  # source://yard//lib/yard/parser/source_parser.rb#386
  def file=(_arg0); end

  # source://yard//lib/yard/parser/source_parser.rb#395
  def globals; end

  # source://yard//lib/yard/parser/source_parser.rb#418
  def parse(content = T.unsafe(nil)); end

  # source://yard//lib/yard/parser/source_parser.rb#390
  def parser_type; end

  # source://yard//lib/yard/parser/source_parser.rb#462
  def tokenize(content); end

  private

  # source://yard//lib/yard/parser/source_parser.rb#471
  def convert_encoding(content); end

  # source://yard//lib/yard/parser/source_parser.rb#516
  def parser_class; end

  # source://yard//lib/yard/parser/source_parser.rb#501
  def parser_type=(value); end

  # source://yard//lib/yard/parser/source_parser.rb#509
  def parser_type_for_filename(filename); end

  # source://yard//lib/yard/parser/source_parser.rb#491
  def post_process; end

  class << self
    # source://yard//lib/yard/parser/source_parser.rb#324
    def after_parse_file(&block); end

    # source://yard//lib/yard/parser/source_parser.rb#352
    def after_parse_file_callbacks; end

    # source://yard//lib/yard/parser/source_parser.rb#258
    def after_parse_list(&block); end

    # source://yard//lib/yard/parser/source_parser.rb#338
    def after_parse_list_callbacks; end

    # source://yard//lib/yard/parser/source_parser.rb#295
    def before_parse_file(&block); end

    # source://yard//lib/yard/parser/source_parser.rb#345
    def before_parse_file_callbacks; end

    # source://yard//lib/yard/parser/source_parser.rb#234
    def before_parse_list(&block); end

    # source://yard//lib/yard/parser/source_parser.rb#331
    def before_parse_list_callbacks; end

    # source://yard//lib/yard/parser/source_parser.rb#100
    def parse(paths = T.unsafe(nil), excluded = T.unsafe(nil), level = T.unsafe(nil)); end

    # source://yard//lib/yard/parser/source_parser.rb#123
    def parse_string(content, ptype = T.unsafe(nil)); end

    # source://yard//lib/yard/parser/source_parser.rb#86
    def parser_type; end

    # source://yard//lib/yard/parser/source_parser.rb#88
    def parser_type=(value); end

    # source://yard//lib/yard/parser/source_parser.rb#163
    def parser_type_extensions; end

    # source://yard//lib/yard/parser/source_parser.rb#164
    def parser_type_extensions=(value); end

    # source://yard//lib/yard/parser/source_parser.rb#171
    def parser_type_for_extension(extension); end

    # source://yard//lib/yard/parser/source_parser.rb#157
    def parser_types; end

    # source://yard//lib/yard/parser/source_parser.rb#158
    def parser_types=(value); end

    # source://yard//lib/yard/parser/source_parser.rb#146
    def register_parser_type(type, parser_klass, extensions = T.unsafe(nil)); end

    # source://yard//lib/yard/parser/source_parser.rb#132
    def tokenize(content, ptype = T.unsafe(nil)); end

    # source://yard//lib/yard/parser/source_parser.rb#184
    def validated_parser_type(type); end

    private

    # source://yard//lib/yard/parser/source_parser.rb#364
    def parse_in_order(*files); end
  end
end

# source://yard//lib/yard/parser/source_parser.rb#71
YARD::Parser::SourceParser::DEFAULT_PATH_GLOB = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/parser/source_parser.rb#75
YARD::Parser::SourceParser::ENCODING_BYTE_ORDER_MARKS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/parser/source_parser.rb#66
YARD::Parser::SourceParser::ENCODING_LINE = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/parser/source_parser.rb#67
YARD::Parser::SourceParser::FROZEN_STRING_LINE = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/parser/source_parser.rb#65
YARD::Parser::SourceParser::SHEBANG_LINE = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/parser/source_parser.rb#10
class YARD::Parser::UndocumentableError < ::RuntimeError; end

# source://yard//lib/yard.rb#4
YARD::ROOT = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/autoload.rb#192
module YARD::Rake; end

# source://yard//lib/yard/rake/yardoc_task.rb#10
class YARD::Rake::YardocTask < ::Rake::TaskLib
  # source://yard//lib/yard/rake/yardoc_task.rb#50
  def initialize(name = T.unsafe(nil)); end

  # source://yard//lib/yard/rake/yardoc_task.rb#36
  def after; end

  # source://yard//lib/yard/rake/yardoc_task.rb#36
  def after=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#32
  def before; end

  # source://yard//lib/yard/rake/yardoc_task.rb#32
  def before=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#28
  def files; end

  # source://yard//lib/yard/rake/yardoc_task.rb#28
  def files=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#11
  def name; end

  # source://yard//lib/yard/rake/yardoc_task.rb#11
  def name=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#15
  def options; end

  # source://yard//lib/yard/rake/yardoc_task.rb#15
  def options=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#19
  def stats_options; end

  # source://yard//lib/yard/rake/yardoc_task.rb#19
  def stats_options=(_arg0); end

  # source://yard//lib/yard/rake/yardoc_task.rb#42
  def verifier; end

  # source://yard//lib/yard/rake/yardoc_task.rb#42
  def verifier=(_arg0); end

  protected

  # source://yard//lib/yard/rake/yardoc_task.rb#68
  def define; end
end

# source://yard//lib/yard/registry.rb#32
module YARD::Registry
  extend ::Enumerable

  class << self
    # source://yard//lib/yard/registry.rb#261
    def [](path); end

    # source://yard//lib/yard/registry.rb#237
    def all(*types); end

    # source://yard//lib/yard/registry.rb#261
    def at(path); end

    # source://yard//lib/yard/registry.rb#318
    def checksum_for(data); end

    # source://yard//lib/yard/registry.rb#312
    def checksums; end

    # source://yard//lib/yard/registry.rb#200
    def clear; end

    # source://yard//lib/yard/registry.rb#194
    def delete(object); end

    # source://yard//lib/yard/registry.rb#176
    def delete_from_disk; end

    # source://yard//lib/yard/registry.rb#221
    def each(&block); end

    # source://yard//lib/yard/registry.rb#363
    def instance; end

    # source://yard//lib/yard/registry.rb#109
    def load(files = T.unsafe(nil), reparse = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#144
    def load!(file = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#159
    def load_all; end

    # source://yard//lib/yard/registry.rb#130
    def load_yardoc(file = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#271
    def locale(name); end

    # source://yard//lib/yard/registry.rb#209
    def lock_for_writing(file = T.unsafe(nil), &block); end

    # source://yard//lib/yard/registry.rb#214
    def locked_for_writing?(file = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#252
    def paths(reload = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#353
    def po_dir; end

    # source://yard//lib/yard/registry.rb#351
    def po_dir=(dir); end

    # source://yard//lib/yard/registry.rb#341
    def proxy_types; end

    # source://yard//lib/yard/registry.rb#186
    def register(object); end

    # source://yard//lib/yard/registry.rb#303
    def resolve(namespace, name, inheritance = T.unsafe(nil), proxy_fallback = T.unsafe(nil), type = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#266
    def root; end

    # source://yard//lib/yard/registry.rb#170
    def save(merge = T.unsafe(nil), file = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#335
    def single_object_db; end

    # source://yard//lib/yard/registry.rb#334
    def single_object_db=(v); end

    # source://yard//lib/yard/registry.rb#88
    def yardoc_file; end

    # source://yard//lib/yard/registry.rb#86
    def yardoc_file=(v); end

    # source://yard//lib/yard/registry.rb#53
    def yardoc_file_for_gem(gem, ver_require = T.unsafe(nil), for_writing = T.unsafe(nil)); end

    private

    # source://yard//lib/yard/registry.rb#390
    def global_yardoc_file(spec, for_writing = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#410
    def local_yardoc_file(spec, for_writing = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#403
    def old_global_yardoc_file(spec, for_writing = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#375
    def partial_resolve(namespace, name, type = T.unsafe(nil)); end

    # source://yard//lib/yard/registry.rb#434
    def thread_local_resolver; end

    # source://yard//lib/yard/registry.rb#424
    def thread_local_store; end

    # source://yard//lib/yard/registry.rb#429
    def thread_local_store=(value); end
  end
end

# source://yard//lib/yard/registry.rb#35
YARD::Registry::DEFAULT_PO_DIR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/registry.rb#33
YARD::Registry::DEFAULT_YARDOC_FILE = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/registry.rb#34
YARD::Registry::LOCAL_YARDOC_INDEX = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/registry_resolver.rb#9
class YARD::RegistryResolver
  include ::YARD::CodeObjects::NamespaceMapper

  # source://yard//lib/yard/registry_resolver.rb#16
  def initialize(registry = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_resolver.rb#50
  def lookup_by_path(path, opts = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/registry_resolver.rb#181
  def collect_namespaces(object); end

  # source://yard//lib/yard/registry_resolver.rb#104
  def lookup_path_direct(namespace, path, type); end

  # source://yard//lib/yard/registry_resolver.rb#121
  def lookup_path_inherited(namespace, path, type); end

  # source://yard//lib/yard/registry_resolver.rb#206
  def split_on_separators_match; end

  # source://yard//lib/yard/registry_resolver.rb#194
  def starts_with_default_separator_match; end

  # source://yard//lib/yard/registry_resolver.rb#200
  def starts_with_separator_match; end

  # source://yard//lib/yard/registry_resolver.rb#99
  def validate(obj, type); end
end

# source://yard//lib/yard/registry_store.rb#9
class YARD::RegistryStore
  # source://yard//lib/yard/registry_store.rb#14
  def initialize; end

  # source://yard//lib/yard/registry_store.rb#33
  def [](key); end

  # source://yard//lib/yard/registry_store.rb#55
  def []=(key, value); end

  # source://yard//lib/yard/registry_store.rb#12
  def checksums; end

  # source://yard//lib/yard/registry_store.rb#75
  def delete(key); end

  # source://yard//lib/yard/registry_store.rb#218
  def destroy(force = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#12
  def file; end

  # source://yard//lib/yard/registry_store.rb#33
  def get(key); end

  # source://yard//lib/yard/registry_store.rb#88
  def keys(reload = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#128
  def load(file = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#142
  def load!(file = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#153
  def load_all; end

  # source://yard//lib/yard/registry_store.rb#122
  def locale(name); end

  # source://yard//lib/yard/registry_store.rb#201
  def lock_for_writing(file = T.unsafe(nil), &block); end

  # source://yard//lib/yard/registry_store.rb#207
  def locked_for_writing?(file = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#102
  def paths_for_type(type, reload = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#11
  def proxy_types; end

  # source://yard//lib/yard/registry_store.rb#55
  def put(key, value); end

  # source://yard//lib/yard/registry_store.rb#117
  def root; end

  # source://yard//lib/yard/registry_store.rb#177
  def save(merge = T.unsafe(nil), file = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#96
  def values(reload = T.unsafe(nil)); end

  # source://yard//lib/yard/registry_store.rb#111
  def values_for_type(type, reload = T.unsafe(nil)); end

  protected

  # source://yard//lib/yard/registry_store.rb#243
  def checksums_path; end

  # source://yard//lib/yard/registry_store.rb#251
  def load_yardoc; end

  # source://yard//lib/yard/registry_store.rb#247
  def object_types_path; end

  # source://yard//lib/yard/registry_store.rb#234
  def objects_path; end

  # source://yard//lib/yard/registry_store.rb#239
  def proxy_types_path; end

  private

  # source://yard//lib/yard/registry_store.rb#319
  def all_disk_objects; end

  # source://yard//lib/yard/registry_store.rb#291
  def load_checksums; end

  # source://yard//lib/yard/registry_store.rb#313
  def load_locale(name); end

  # source://yard//lib/yard/registry_store.rb#281
  def load_object_types; end

  # source://yard//lib/yard/registry_store.rb#276
  def load_proxy_types; end

  # source://yard//lib/yard/registry_store.rb#299
  def load_root; end

  # source://yard//lib/yard/registry_store.rb#271
  def load_yardoc_old; end

  # source://yard//lib/yard/registry_store.rb#332
  def write_checksums; end

  # source://yard//lib/yard/registry_store.rb#338
  def write_complete_lock; end

  # source://yard//lib/yard/registry_store.rb#328
  def write_object_types; end

  # source://yard//lib/yard/registry_store.rb#324
  def write_proxy_types; end
end

# source://yard//lib/yard/autoload.rb#196
module YARD::Serializers; end

# source://yard//lib/yard/serializers/base.rb#17
class YARD::Serializers::Base
  # source://yard//lib/yard/serializers/base.rb#28
  def initialize(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/serializers/base.rb#80
  def after_serialize(data); end

  # source://yard//lib/yard/serializers/base.rb#73
  def before_serialize; end

  # source://yard//lib/yard/serializers/base.rb#62
  def exists?(object); end

  # source://yard//lib/yard/serializers/base.rb#21
  def options; end

  # source://yard//lib/yard/serializers/base.rb#42
  def serialize(object, data); end

  # source://yard//lib/yard/serializers/base.rb#51
  def serialized_path(object); end
end

# source://yard//lib/yard/serializers/file_system_serializer.rb#7
class YARD::Serializers::FileSystemSerializer < ::YARD::Serializers::Base
  # source://yard//lib/yard/serializers/file_system_serializer.rb#28
  def initialize(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#8
  def basepath; end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#10
  def basepath=(value); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#71
  def exists?(object); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#17
  def extension; end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#19
  def extension=(value); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#38
  def serialize(object, data); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#50
  def serialized_path(object); end

  private

  # source://yard//lib/yard/serializers/file_system_serializer.rb#84
  def build_filename_map; end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#111
  def encode_path_components(*components); end

  # source://yard//lib/yard/serializers/file_system_serializer.rb#102
  def mapped_name(object); end
end

# source://yard//lib/yard/serializers/process_serializer.rb#12
class YARD::Serializers::ProcessSerializer < ::YARD::Serializers::Base
  # source://yard//lib/yard/serializers/process_serializer.rb#13
  def initialize(cmd); end

  # source://yard//lib/yard/serializers/process_serializer.rb#19
  def serialize(_object, data); end
end

# source://yard//lib/yard/serializers/stdout_serializer.rb#9
class YARD::Serializers::StdoutSerializer < ::YARD::Serializers::Base
  # source://yard//lib/yard/serializers/stdout_serializer.rb#10
  def initialize(wrap = T.unsafe(nil)); end

  # source://yard//lib/yard/serializers/stdout_serializer.rb#15
  def serialize(_object, data); end

  private

  # source://yard//lib/yard/serializers/stdout_serializer.rb#26
  def word_wrap(text, _length = T.unsafe(nil)); end
end

# source://yard//lib/yard/serializers/yardoc_serializer.rb#32
class YARD::Serializers::YardocSerializer < ::YARD::Serializers::FileSystemSerializer
  # source://yard//lib/yard/serializers/yardoc_serializer.rb#33
  def initialize(yfile); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#40
  def checksums_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#45
  def complete?; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#42
  def complete_lock_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#101
  def deserialize(path, is_path = T.unsafe(nil)); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#54
  def lock_for_writing; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#62
  def locked_for_writing?; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#41
  def object_types_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#37
  def objects_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#43
  def processing_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#39
  def proxy_types_path; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#93
  def serialize(object); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#66
  def serialized_path(object); end

  private

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#114
  def dump(object); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#119
  def internal_dump(object, first_object = T.unsafe(nil)); end
end

# source://yard//lib/yard/autoload.rb#214
module YARD::Server
  class << self
    # source://yard//lib/yard/server.rb#8
    def register_static_path(path); end
  end
end

# source://yard//lib/yard/server/adapter.rb#23
class YARD::Server::Adapter
  # source://yard//lib/yard/server/adapter.rb#71
  def initialize(libs, opts = T.unsafe(nil), server_opts = T.unsafe(nil)); end

  # source://yard//lib/yard/server/adapter.rb#88
  def add_library(library); end

  # source://yard//lib/yard/server/adapter.rb#27
  def document_root; end

  # source://yard//lib/yard/server/adapter.rb#27
  def document_root=(_arg0); end

  # source://yard//lib/yard/server/adapter.rb#32
  def libraries; end

  # source://yard//lib/yard/server/adapter.rb#32
  def libraries=(_arg0); end

  # source://yard//lib/yard/server/adapter.rb#36
  def options; end

  # source://yard//lib/yard/server/adapter.rb#36
  def options=(_arg0); end

  # source://yard//lib/yard/server/adapter.rb#43
  def router; end

  # source://yard//lib/yard/server/adapter.rb#43
  def router=(_arg0); end

  # source://yard//lib/yard/server/adapter.rb#40
  def server_options; end

  # source://yard//lib/yard/server/adapter.rb#40
  def server_options=(_arg0); end

  # source://yard//lib/yard/server/adapter.rb#95
  def start; end

  class << self
    # source://yard//lib/yard/server/adapter.rb#48
    def setup; end

    # source://yard//lib/yard/server/adapter.rb#56
    def shutdown; end
  end
end

# source://yard//lib/yard/server/http_utils.rb#16
YARD::Server::CR = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/server/http_utils.rb#18
YARD::Server::CRLF = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/autoload.rb#219
module YARD::Server::Commands; end

# source://yard//lib/yard/server/commands/base.rb#34
class YARD::Server::Commands::Base
  # source://yard//lib/yard/server/commands/base.rb#75
  def initialize(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/server/commands/base.rb#41
  def adapter; end

  # source://yard//lib/yard/server/commands/base.rb#41
  def adapter=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#61
  def body; end

  # source://yard//lib/yard/server/commands/base.rb#61
  def body=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#44
  def caching; end

  # source://yard//lib/yard/server/commands/base.rb#44
  def caching=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#89
  def call(request); end

  # source://yard//lib/yard/server/commands/base.rb#38
  def command_options; end

  # source://yard//lib/yard/server/commands/base.rb#38
  def command_options=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#55
  def headers; end

  # source://yard//lib/yard/server/commands/base.rb#55
  def headers=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#52
  def path; end

  # source://yard//lib/yard/server/commands/base.rb#52
  def path=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#49
  def request; end

  # source://yard//lib/yard/server/commands/base.rb#49
  def request=(_arg0); end

  # source://yard//lib/yard/server/commands/base.rb#128
  def run; end

  # source://yard//lib/yard/server/commands/base.rb#58
  def status; end

  # source://yard//lib/yard/server/commands/base.rb#58
  def status=(_arg0); end

  protected

  # source://yard//lib/yard/server/commands/base.rb#165
  def cache(data); end

  # source://yard//lib/yard/server/commands/base.rb#180
  def not_found; end

  # source://yard//lib/yard/server/commands/base.rb#192
  def redirect(url); end

  # source://yard//lib/yard/server/commands/base.rb#144
  def render(object = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/server/commands/base.rb#202
  def add_cache_control; end
end

# source://yard//lib/yard/server/commands/display_file_command.rb#8
class YARD::Server::Commands::DisplayFileCommand < ::YARD::Server::Commands::LibraryCommand
  # source://yard//lib/yard/server/commands/display_file_command.rb#9
  def index; end

  # source://yard//lib/yard/server/commands/display_file_command.rb#9
  def index=(_arg0); end

  # source://yard//lib/yard/server/commands/display_file_command.rb#11
  def run; end
end

# source://yard//lib/yard/server/commands/display_object_command.rb#6
class YARD::Server::Commands::DisplayObjectCommand < ::YARD::Server::Commands::LibraryCommand
  include ::YARD::Server::DocServerHelper

  # source://yard//lib/yard/server/commands/display_object_command.rb#36
  def index; end

  # source://yard//lib/yard/server/commands/display_object_command.rb#47
  def not_found; end

  # source://yard//lib/yard/server/commands/display_object_command.rb#9
  def run; end

  private

  # source://yard//lib/yard/server/commands/display_object_command.rb#54
  def object_path; end
end

# source://yard//lib/yard/server/commands/frames_command.rb#6
class YARD::Server::Commands::FramesCommand < ::YARD::Server::Commands::DisplayObjectCommand
  # source://yard//lib/yard/server/commands/frames_command.rb#7
  def run; end
end

# source://yard//lib/yard/server/commands/library_command.rb#32
class YARD::Server::Commands::LibraryCommand < ::YARD::Server::Commands::Base
  # source://yard//lib/yard/server/commands/library_command.rb#63
  def initialize(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/server/commands/library_command.rb#68
  def call(request); end

  # source://yard//lib/yard/server/commands/library_command.rb#53
  def incremental; end

  # source://yard//lib/yard/server/commands/library_command.rb#53
  def incremental=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#41
  def library; end

  # source://yard//lib/yard/server/commands/library_command.rb#41
  def library=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#44
  def options; end

  # source://yard//lib/yard/server/commands/library_command.rb#44
  def options=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#47
  def serializer; end

  # source://yard//lib/yard/server/commands/library_command.rb#47
  def serializer=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#50
  def single_library; end

  # source://yard//lib/yard/server/commands/library_command.rb#50
  def single_library=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#57
  def use_fork; end

  # source://yard//lib/yard/server/commands/library_command.rb#57
  def use_fork=(_arg0); end

  private

  # source://yard//lib/yard/server/commands/library_command.rb#96
  def call_with_fork(request, &block); end

  # source://yard//lib/yard/server/commands/library_command.rb#83
  def call_without_fork(request); end

  # source://yard//lib/yard/server/commands/library_command.rb#109
  def can_fork?; end

  # source://yard//lib/yard/server/commands/library_command.rb#171
  def fulldoc_template; end

  # source://yard//lib/yard/server/commands/library_command.rb#147
  def load_yardoc; end

  # source://yard//lib/yard/server/commands/library_command.rb#159
  def not_prepared; end

  # source://yard//lib/yard/server/commands/library_command.rb#118
  def restore_template_info; end

  # source://yard//lib/yard/server/commands/library_command.rb#113
  def save_default_template_info; end

  # source://yard//lib/yard/server/commands/library_command.rb#123
  def setup_library; end

  # source://yard//lib/yard/server/commands/library_command.rb#130
  def setup_yardopts; end
end

# source://yard//lib/yard/server/commands/library_command.rb#35
YARD::Server::Commands::LibraryCommand::CAN_FORK = T.let(T.unsafe(nil), TrueClass)

# source://yard//lib/yard/server/commands/library_index_command.rb#13
class YARD::Server::Commands::LibraryIndexCommand < ::YARD::Server::Commands::Base
  # source://yard//lib/yard/server/commands/library_index_command.rb#14
  def options; end

  # source://yard//lib/yard/server/commands/library_index_command.rb#14
  def options=(_arg0); end

  # source://yard//lib/yard/server/commands/library_index_command.rb#16
  def run; end
end

# source://yard//lib/yard/server/commands/library_index_command.rb#5
class YARD::Server::Commands::LibraryIndexOptions < ::YARD::CLI::YardocOptions
  # source://yard//lib/yard/server/commands/library_index_command.rb#6
  def adapter; end

  # source://yard//lib/yard/server/commands/library_index_command.rb#6
  def adapter=(_arg0); end

  # source://yard//lib/yard/server/commands/library_index_command.rb#6
  def libraries; end

  # source://yard//lib/yard/server/commands/library_index_command.rb#6
  def libraries=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def serialize; end

  # source://yard//lib/yard/options.rb#82
  def serialize=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def template; end

  # source://yard//lib/yard/options.rb#82
  def template=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def type; end

  # source://yard//lib/yard/options.rb#82
  def type=(_arg0); end
end

# source://yard//lib/yard/server/commands/library_command.rb#7
class YARD::Server::Commands::LibraryOptions < ::YARD::CLI::YardocOptions
  # source://yard//lib/yard/server/commands/library_command.rb#8
  def adapter; end

  # source://yard//lib/yard/server/commands/library_command.rb#14
  def command; end

  # source://yard//lib/yard/server/commands/library_command.rb#14
  def command=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#17
  def each(&block); end

  # source://yard//lib/yard/server/commands/library_command.rb#15
  def frames; end

  # source://yard//lib/yard/server/commands/library_command.rb#15
  def frames=(_arg0); end

  # source://yard//lib/yard/server/commands/library_command.rb#9
  def library; end

  # source://yard//lib/yard/server/commands/library_command.rb#12
  def serialize; end

  # source://yard//lib/yard/server/commands/library_command.rb#11
  def serializer; end

  # source://yard//lib/yard/server/commands/library_command.rb#10
  def single_library; end
end

# source://yard//lib/yard/server/commands/list_command.rb#6
class YARD::Server::Commands::ListCommand < ::YARD::Server::Commands::LibraryCommand
  include ::YARD::Templates::Helpers::BaseHelper

  # source://yard//lib/yard/server/commands/list_command.rb#9
  def run; end
end

# source://yard//lib/yard/server/commands/root_request_command.rb#6
class YARD::Server::Commands::RootRequestCommand < ::YARD::Server::Commands::Base
  include ::YARD::Server::HTTPUtils
  include ::YARD::Server::Commands::StaticFileHelpers

  # source://yard//lib/yard/server/commands/root_request_command.rb#9
  def run; end
end

# source://yard//lib/yard/server/commands/search_command.rb#7
class YARD::Server::Commands::SearchCommand < ::YARD::Server::Commands::LibraryCommand
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  include ::YARD::Server::DocServerHelper

  # source://yard//lib/yard/server/commands/search_command.rb#12
  def query; end

  # source://yard//lib/yard/server/commands/search_command.rb#12
  def query=(_arg0); end

  # source://yard//lib/yard/server/commands/search_command.rb#12
  def results; end

  # source://yard//lib/yard/server/commands/search_command.rb#12
  def results=(_arg0); end

  # source://yard//lib/yard/server/commands/search_command.rb#14
  def run; end

  # source://yard//lib/yard/server/commands/search_command.rb#26
  def visible_results; end

  private

  # source://yard//lib/yard/server/commands/search_command.rb#58
  def search_for_object; end

  # source://yard//lib/yard/server/commands/search_command.rb#47
  def serve_normal; end

  # source://yard//lib/yard/server/commands/search_command.rb#37
  def serve_xhr; end

  # source://yard//lib/yard/server/commands/search_command.rb#32
  def url_for(object); end
end

# source://yard//lib/yard/server/commands/static_file_command.rb#6
class YARD::Server::Commands::StaticFileCommand < ::YARD::Server::Commands::LibraryCommand
  include ::YARD::Server::HTTPUtils
  include ::YARD::Server::Commands::StaticFileHelpers

  # source://yard//lib/yard/server/commands/static_file_command.rb#17
  def run; end
end

# source://yard//lib/yard/server/commands/static_file_command.rb#15
YARD::Server::Commands::StaticFileCommand::STATIC_PATHS = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/server/commands/static_file_helpers.rb#8
module YARD::Server::Commands::StaticFileHelpers
  include ::YARD::Server::HTTPUtils

  # source://yard//lib/yard/server/commands/static_file_helpers.rb#14
  def favicon?; end

  # source://yard//lib/yard/server/commands/static_file_helpers.rb#26
  def static_template_file?; end

  private

  # source://yard//lib/yard/server/commands/static_file_helpers.rb#42
  def find_file(adapter, url); end

  class << self
    # source://yard//lib/yard/server/commands/static_file_helpers.rb#42
    def find_file(adapter, url); end
  end
end

# source://yard//lib/yard/server/doc_server_helper.rb#6
module YARD::Server::DocServerHelper
  # source://yard//lib/yard/server/doc_server_helper.rb#61
  def abs_url(*path_components); end

  # source://yard//lib/yard/server/doc_server_helper.rb#69
  def base_path(path); end

  # source://yard//lib/yard/server/doc_server_helper.rb#78
  def mtime(file); end

  # source://yard//lib/yard/server/doc_server_helper.rb#84
  def mtime_url(file); end

  # source://yard//lib/yard/server/doc_server_helper.rb#75
  def router; end

  # source://yard//lib/yard/server/doc_server_helper.rb#11
  def url_for(obj, anchor = T.unsafe(nil), relative = T.unsafe(nil)); end

  # source://yard//lib/yard/server/doc_server_helper.rb#24
  def url_for_file(filename, anchor = T.unsafe(nil)); end

  # source://yard//lib/yard/server/doc_server_helper.rb#43
  def url_for_frameset; end

  # source://yard//lib/yard/server/doc_server_helper.rb#55
  def url_for_index; end

  # source://yard//lib/yard/server/doc_server_helper.rb#37
  def url_for_list(type); end

  # source://yard//lib/yard/server/doc_server_helper.rb#49
  def url_for_main; end
end

# source://yard//lib/yard/server/doc_server_serializer.rb#6
class YARD::Server::DocServerSerializer < ::YARD::Serializers::FileSystemSerializer
  # source://yard//lib/yard/server/doc_server_serializer.rb#7
  def initialize(_command = T.unsafe(nil)); end

  # source://yard//lib/yard/server/doc_server_serializer.rb#11
  def serialized_path(object); end

  private

  # source://yard//lib/yard/server/doc_server_serializer.rb#31
  def urlencode(name); end
end

# source://yard//lib/yard/server/adapter.rb#6
class YARD::Server::FinishRequest < ::RuntimeError; end

# source://yard//lib/yard/server/http_utils.rb#25
module YARD::Server::HTTPUtils
  private

  # source://yard//lib/yard/server/http_utils.rb#443
  def _escape(str, regex); end

  # source://yard//lib/yard/server/http_utils.rb#441
  def _make_regex(str); end

  # source://yard//lib/yard/server/http_utils.rb#442
  def _make_regex!(str); end

  # source://yard//lib/yard/server/http_utils.rb#449
  def _unescape(str, regex); end

  # source://yard//lib/yard/server/http_utils.rb#223
  def dequote(str); end

  # source://yard//lib/yard/server/http_utils.rb#467
  def escape(str); end

  # source://yard//lib/yard/server/http_utils.rb#508
  def escape8bit(str); end

  # source://yard//lib/yard/server/http_utils.rb#481
  def escape_form(str); end

  # source://yard//lib/yard/server/http_utils.rb#497
  def escape_path(str); end

  # source://yard//lib/yard/server/http_utils.rb#112
  def load_mime_types(file); end

  # source://yard//lib/yard/server/http_utils.rb#134
  def mime_type(filename, mime_tab); end

  # source://yard//lib/yard/server/http_utils.rb#31
  def normalize_path(path); end

  # source://yard//lib/yard/server/http_utils.rb#395
  def parse_form_data(io, boundary); end

  # source://yard//lib/yard/server/http_utils.rb#145
  def parse_header(raw); end

  # source://yard//lib/yard/server/http_utils.rb#371
  def parse_query(str); end

  # source://yard//lib/yard/server/http_utils.rb#202
  def parse_qvalues(value); end

  # source://yard//lib/yard/server/http_utils.rb#184
  def parse_range_header(ranges_specifier); end

  # source://yard//lib/yard/server/http_utils.rb#233
  def quote(str); end

  # source://yard//lib/yard/server/http_utils.rb#175
  def split_header_value(str); end

  # source://yard//lib/yard/server/http_utils.rb#474
  def unescape(str); end

  # source://yard//lib/yard/server/http_utils.rb#490
  def unescape_form(str); end

  class << self
    # source://yard//lib/yard/server/http_utils.rb#443
    def _escape(str, regex); end

    # source://yard//lib/yard/server/http_utils.rb#441
    def _make_regex(str); end

    # source://yard//lib/yard/server/http_utils.rb#442
    def _make_regex!(str); end

    # source://yard//lib/yard/server/http_utils.rb#449
    def _unescape(str, regex); end

    # source://yard//lib/yard/server/http_utils.rb#223
    def dequote(str); end

    # source://yard//lib/yard/server/http_utils.rb#467
    def escape(str); end

    # source://yard//lib/yard/server/http_utils.rb#508
    def escape8bit(str); end

    # source://yard//lib/yard/server/http_utils.rb#481
    def escape_form(str); end

    # source://yard//lib/yard/server/http_utils.rb#497
    def escape_path(str); end

    # source://yard//lib/yard/server/http_utils.rb#112
    def load_mime_types(file); end

    # source://yard//lib/yard/server/http_utils.rb#134
    def mime_type(filename, mime_tab); end

    # source://yard//lib/yard/server/http_utils.rb#31
    def normalize_path(path); end

    # source://yard//lib/yard/server/http_utils.rb#395
    def parse_form_data(io, boundary); end

    # source://yard//lib/yard/server/http_utils.rb#145
    def parse_header(raw); end

    # source://yard//lib/yard/server/http_utils.rb#371
    def parse_query(str); end

    # source://yard//lib/yard/server/http_utils.rb#202
    def parse_qvalues(value); end

    # source://yard//lib/yard/server/http_utils.rb#184
    def parse_range_header(ranges_specifier); end

    # source://yard//lib/yard/server/http_utils.rb#233
    def quote(str); end

    # source://yard//lib/yard/server/http_utils.rb#175
    def split_header_value(str); end

    # source://yard//lib/yard/server/http_utils.rb#474
    def unescape(str); end

    # source://yard//lib/yard/server/http_utils.rb#490
    def unescape_form(str); end
  end
end

# source://yard//lib/yard/server/http_utils.rb#47
YARD::Server::HTTPUtils::DefaultMimeTypes = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/server/http_utils.rb#459
YARD::Server::HTTPUtils::ESCAPED = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/server/http_utils.rb#242
class YARD::Server::HTTPUtils::FormData < ::String
  # source://yard//lib/yard/server/http_utils.rb#267
  def initialize(*args); end

  # source://yard//lib/yard/server/http_utils.rb#300
  def <<(str); end

  # source://yard//lib/yard/server/http_utils.rb#286
  def [](*key); end

  # source://yard//lib/yard/server/http_utils.rb#320
  def append_data(data); end

  # source://yard//lib/yard/server/http_utils.rb#335
  def each_data; end

  # source://yard//lib/yard/server/http_utils.rb#254
  def filename; end

  # source://yard//lib/yard/server/http_utils.rb#254
  def filename=(_arg0); end

  # source://yard//lib/yard/server/http_utils.rb#347
  def list; end

  # source://yard//lib/yard/server/http_utils.rb#249
  def name; end

  # source://yard//lib/yard/server/http_utils.rb#249
  def name=(_arg0); end

  # source://yard//lib/yard/server/http_utils.rb#256
  def next_data=(_arg0); end

  # source://yard//lib/yard/server/http_utils.rb#347
  def to_ary; end

  # source://yard//lib/yard/server/http_utils.rb#363
  def to_s; end

  protected

  # source://yard//lib/yard/server/http_utils.rb#256
  def next_data; end
end

# source://yard//lib/yard/server/http_utils.rb#244
YARD::Server::HTTPUtils::FormData::EmptyHeader = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/server/http_utils.rb#243
YARD::Server::HTTPUtils::FormData::EmptyRawHeader = T.let(T.unsafe(nil), Array)

# source://yard//lib/yard/server/http_utils.rb#458
YARD::Server::HTTPUtils::NONASCII = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/server/http_utils.rb#456
YARD::Server::HTTPUtils::UNESCAPED = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/server/http_utils.rb#457
YARD::Server::HTTPUtils::UNESCAPED_FORM = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/server/http_utils.rb#460
YARD::Server::HTTPUtils::UNESCAPED_PCHAR = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/server/http_utils.rb#17
YARD::Server::LF = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/server/library_version.rb#9
class YARD::Server::LibraryNotPreparedError < ::RuntimeError; end

# source://yard//lib/yard/server/library_version.rb#94
class YARD::Server::LibraryVersion
  # source://yard//lib/yard/server/library_version.rb#134
  def initialize(name, version = T.unsafe(nil), yardoc = T.unsafe(nil), source = T.unsafe(nil)); end

  # source://yard//lib/yard/server/library_version.rb#153
  def ==(other); end

  # source://yard//lib/yard/server/library_version.rb#153
  def eql?(other); end

  # source://yard//lib/yard/server/library_version.rb#153
  def equal?(other); end

  # source://yard//lib/yard/server/library_version.rb#191
  def gemspec; end

  # source://yard//lib/yard/server/library_version.rb#150
  def hash; end

  # source://yard//lib/yard/server/library_version.rb#96
  def name; end

  # source://yard//lib/yard/server/library_version.rb#96
  def name=(_arg0); end

  # source://yard//lib/yard/server/library_version.rb#182
  def prepare!; end

  # source://yard//lib/yard/server/library_version.rb#162
  def ready?; end

  # source://yard//lib/yard/server/library_version.rb#116
  def source; end

  # source://yard//lib/yard/server/library_version.rb#116
  def source=(_arg0); end

  # source://yard//lib/yard/server/library_version.rb#122
  def source_path; end

  # source://yard//lib/yard/server/library_version.rb#125
  def source_path=(_arg0); end

  # source://yard//lib/yard/server/library_version.rb#145
  def to_s(url_format = T.unsafe(nil)); end

  # source://yard//lib/yard/server/library_version.rb#99
  def version; end

  # source://yard//lib/yard/server/library_version.rb#99
  def version=(_arg0); end

  # source://yard//lib/yard/server/library_version.rb#106
  def yardoc_file; end

  # source://yard//lib/yard/server/library_version.rb#109
  def yardoc_file=(_arg0); end

  protected

  # source://yard//lib/yard/server/library_version.rb#206
  def load_yardoc_from_disk; end

  # source://yard//lib/yard/server/library_version.rb#226
  def load_yardoc_from_gem; end

  # source://yard//lib/yard/server/library_version.rb#243
  def source_path_for_disk; end

  # source://yard//lib/yard/server/library_version.rb#248
  def source_path_for_gem; end

  # source://yard//lib/yard/server/library_version.rb#253
  def yardoc_file_for_gem; end

  private

  # source://yard//lib/yard/server/library_version.rb#261
  def load_source_path; end

  # source://yard//lib/yard/server/library_version.rb#266
  def load_yardoc_file; end

  # source://yard//lib/yard/server/library_version.rb#271
  def serializer; end
end

# source://yard//lib/yard/server/adapter.rb#11
class YARD::Server::NotFoundError < ::RuntimeError; end

# source://yard//lib/yard/server/rack_adapter.rb#52
class YARD::Server::RackAdapter < ::YARD::Server::Adapter
  include ::YARD::Server::HTTPUtils

  # source://yard//lib/yard/server/rack_adapter.rb#57
  def call(env); end

  # source://yard//lib/yard/server/rack_adapter.rb#70
  def start; end

  private

  # source://yard//lib/yard/server/rack_adapter.rb#79
  def print_start_message(server); end
end

# source://yard//lib/yard/server/rack_adapter.rb#25
class YARD::Server::RackMiddleware
  # source://yard//lib/yard/server/rack_adapter.rb#35
  def initialize(app, opts = T.unsafe(nil)); end

  # source://yard//lib/yard/server/rack_adapter.rb#41
  def call(env); end
end

# source://yard//lib/yard/server/rack_adapter.rb#12
YARD::Server::RackServer = Rack::Server

# source://yard//lib/yard/server/router.rb#32
class YARD::Server::Router
  include ::YARD::Server::StaticCaching
  include ::YARD::Server::Commands

  # source://yard//lib/yard/server/router.rb#45
  def initialize(adapter); end

  # source://yard//lib/yard/server/router.rb#40
  def adapter; end

  # source://yard//lib/yard/server/router.rb#40
  def adapter=(_arg0); end

  # source://yard//lib/yard/server/router.rb#54
  def call(request); end

  # source://yard//lib/yard/server/router.rb#63
  def docs_prefix; end

  # source://yard//lib/yard/server/router.rb#66
  def list_prefix; end

  # source://yard//lib/yard/server/router.rb#79
  def parse_library_from_path(paths); end

  # source://yard//lib/yard/server/router.rb#37
  def request; end

  # source://yard//lib/yard/server/router.rb#37
  def request=(_arg0); end

  # source://yard//lib/yard/server/router.rb#69
  def search_prefix; end

  # source://yard//lib/yard/server/router.rb#72
  def static_prefix; end

  protected

  # source://yard//lib/yard/server/router.rb#181
  def final_options(library, paths); end

  # source://yard//lib/yard/server/router.rb#105
  def route(path = T.unsafe(nil)); end

  # source://yard//lib/yard/server/router.rb#128
  def route_docs(library, paths); end

  # source://yard//lib/yard/server/router.rb#146
  def route_index; end

  # source://yard//lib/yard/server/router.rb#157
  def route_list(library, paths); end

  # source://yard//lib/yard/server/router.rb#165
  def route_search(library, paths); end

  # source://yard//lib/yard/server/router.rb#170
  def route_static(library, paths); end
end

# source://yard//lib/yard/server/static_caching.rb#7
module YARD::Server::StaticCaching
  # source://yard//lib/yard/server/static_caching.rb#34
  def check_static_cache; end
end

# source://yard//lib/yard/server/webrick_adapter.rb#9
class YARD::Server::WebrickAdapter < ::YARD::Server::Adapter
  # source://yard//lib/yard/server/webrick_adapter.rb#10
  def start; end
end

# source://yard//lib/yard/server/webrick_adapter.rb#20
class YARD::Server::WebrickServlet < ::WEBrick::HTTPServlet::AbstractServlet
  # source://yard//lib/yard/server/webrick_adapter.rb#23
  def initialize(server, adapter); end

  # source://yard//lib/yard/server/webrick_adapter.rb#21
  def adapter; end

  # source://yard//lib/yard/server/webrick_adapter.rb#21
  def adapter=(_arg0); end

  # source://yard//lib/yard/server/webrick_adapter.rb#29
  def do_GET(request, response); end
end

# source://yard//lib/yard/serializers/yardoc_serializer.rb#6
class YARD::StubProxy
  # source://yard//lib/yard/serializers/yardoc_serializer.rb#13
  def initialize(path, transient = T.unsafe(nil)); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#9
  def _dump(_depth); end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#11
  def hash; end

  # source://yard//lib/yard/serializers/yardoc_serializer.rb#18
  def method_missing(meth, *args, &block); end

  class << self
    # source://yard//lib/yard/serializers/yardoc_serializer.rb#10
    def _load(str); end
  end
end

# source://yard//lib/yard/serializers/yardoc_serializer.rb#28
YARD::StubProxy::FILELEN = T.let(T.unsafe(nil), Integer)

# source://yard//lib/yard.rb#10
YARD::TEMPLATE_ROOT = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/autoload.rb#248
module YARD::Tags; end

# source://yard//lib/yard/tags/directives.rb#461
class YARD::Tags::AttributeDirective < ::YARD::Tags::MethodDirective
  # source://yard//lib/yard/tags/directives.rb#462
  def after_parse; end

  protected

  # source://yard//lib/yard/tags/directives.rb#470
  def method_name; end

  # source://yard//lib/yard/tags/directives.rb#476
  def method_signature; end

  private

  # source://yard//lib/yard/tags/directives.rb#486
  def create_attribute_data(object); end

  # source://yard//lib/yard/tags/directives.rb#516
  def readable?; end

  # source://yard//lib/yard/tags/directives.rb#512
  def writable?; end
end

# source://yard//lib/yard/tags/default_factory.rb#4
class YARD::Tags::DefaultFactory
  # source://yard//lib/yard/tags/default_factory.rb#13
  def parse_tag(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#22
  def parse_tag_with_name(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#89
  def parse_tag_with_options(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#70
  def parse_tag_with_title_and_text(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#33
  def parse_tag_with_types(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#45
  def parse_tag_with_types_and_name(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#57
  def parse_tag_with_types_and_title(tag_name, text); end

  # source://yard//lib/yard/tags/default_factory.rb#75
  def parse_tag_with_types_name_and_default(tag_name, text); end

  private

  # source://yard//lib/yard/tags/default_factory.rb#101
  def extract_name_from_text(text); end

  # source://yard//lib/yard/tags/default_factory.rb#105
  def extract_title_and_desc_from_text(text); end

  # source://yard//lib/yard/tags/default_factory.rb#129
  def extract_types_and_name_from_text(text, opening_types = T.unsafe(nil), closing_types = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/default_factory.rb#138
  def extract_types_and_name_from_text_unstripped(text, opening_types = T.unsafe(nil), closing_types = T.unsafe(nil)); end
end

# source://yard//lib/yard/tags/default_factory.rb#6
YARD::Tags::DefaultFactory::TYPELIST_CLOSING_CHARS = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/tags/default_factory.rb#5
YARD::Tags::DefaultFactory::TYPELIST_OPENING_CHARS = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/tags/default_tag.rb#4
class YARD::Tags::DefaultTag < ::YARD::Tags::Tag
  # source://yard//lib/yard/tags/default_tag.rb#7
  def initialize(tag_name, text, types = T.unsafe(nil), name = T.unsafe(nil), defaults = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/default_tag.rb#5
  def defaults; end
end

# source://yard//lib/yard/tags/directives.rb#23
class YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#55
  def initialize(tag, parser); end

  # source://yard//lib/yard/tags/directives.rb#74
  def after_parse; end

  # source://yard//lib/yard/tags/directives.rb#69
  def call; end

  # source://yard//lib/yard/tags/directives.rb#34
  def expanded_text; end

  # source://yard//lib/yard/tags/directives.rb#34
  def expanded_text=(_arg0); end

  # source://yard//lib/yard/tags/directives.rb#49
  def handler; end

  # source://yard//lib/yard/tags/directives.rb#43
  def object; end

  # source://yard//lib/yard/tags/directives.rb#38
  def parser=(_arg0); end

  # source://yard//lib/yard/tags/directives.rb#25
  def tag; end

  # source://yard//lib/yard/tags/directives.rb#25
  def tag=(_arg0); end

  protected

  # source://yard//lib/yard/tags/directives.rb#80
  def inside_directive?; end

  # source://yard//lib/yard/tags/directives.rb#38
  def parser; end
end

# source://yard//lib/yard/tags/directives.rb#105
class YARD::Tags::EndGroupDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#106
  def call; end
end

# source://yard//lib/yard/tags/directives.rb#128
class YARD::Tags::GroupDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#129
  def call; end
end

# source://yard//lib/yard/tags/library.rb#59
class YARD::Tags::Library
  # source://yard//lib/yard/tags/library.rb#260
  def initialize(factory = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/library.rb#168
  def abstract_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def api_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def attr_reader_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def attr_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def attr_writer_tag(text); end

  # source://yard//lib/yard/tags/library.rb#202
  def attribute_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def author_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def deprecated_tag(text); end

  # source://yard//lib/yard/tags/library.rb#290
  def directive_create(tag_name, tag_buf, parser); end

  # source://yard//lib/yard/tags/library.rb#202
  def endgroup_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def example_tag(text); end

  # source://yard//lib/yard/tags/library.rb#258
  def factory; end

  # source://yard//lib/yard/tags/library.rb#258
  def factory=(_arg0); end

  # source://yard//lib/yard/tags/library.rb#202
  def group_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#280
  def has_directive?(tag_name); end

  # source://yard//lib/yard/tags/library.rb#267
  def has_tag?(tag_name); end

  # source://yard//lib/yard/tags/library.rb#202
  def macro_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#202
  def method_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def note_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def option_tag(text); end

  # source://yard//lib/yard/tags/library.rb#161
  def overload_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def param_tag(text); end

  # source://yard//lib/yard/tags/library.rb#202
  def parse_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def private_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def raise_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def return_tag(text); end

  # source://yard//lib/yard/tags/library.rb#202
  def scope_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def see_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def since_tag(text); end

  # source://yard//lib/yard/tags/library.rb#273
  def tag_create(tag_name, tag_buf); end

  # source://yard//lib/yard/tags/library.rb#168
  def todo_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def version_tag(text); end

  # source://yard//lib/yard/tags/library.rb#202
  def visibility_directive(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#168
  def yield_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def yieldparam_tag(text); end

  # source://yard//lib/yard/tags/library.rb#168
  def yieldreturn_tag(text); end

  private

  # source://yard//lib/yard/tags/library.rb#244
  def directive_call(tag, parser); end

  # source://yard//lib/yard/tags/library.rb#233
  def send_to_factory(tag_name, meth, text); end

  class << self
    # source://yard//lib/yard/tags/library.rb#83
    def default_factory; end

    # source://yard//lib/yard/tags/library.rb#87
    def default_factory=(factory); end

    # source://yard//lib/yard/tags/library.rb#196
    def define_directive(tag, tag_meth = T.unsafe(nil), directive_class = T.unsafe(nil)); end

    # source://yard//lib/yard/tags/library.rb#157
    def define_tag(label, tag, meth = T.unsafe(nil)); end

    # source://yard//lib/yard/tags/library.rb#220
    def directive_method_name(tag_name); end

    # source://yard//lib/yard/tags/library.rb#99
    def factory_method_for(tag); end

    # source://yard//lib/yard/tags/library.rb#112
    def factory_method_for_directive(directive); end

    # source://yard//lib/yard/tags/library.rb#67
    def instance; end

    # source://yard//lib/yard/tags/library.rb#63
    def labels; end

    # source://yard//lib/yard/tags/library.rb#142
    def sorted_labels; end

    # source://yard//lib/yard/tags/library.rb#216
    def tag_method_name(tag_name); end

    # source://yard//lib/yard/tags/library.rb#136
    def transitive_tags; end

    # source://yard//lib/yard/tags/library.rb#136
    def transitive_tags=(_arg0); end

    # source://yard//lib/yard/tags/library.rb#127
    def visible_tags; end

    # source://yard//lib/yard/tags/library.rb#127
    def visible_tags=(_arg0); end

    private

    # source://yard//lib/yard/tags/library.rb#226
    def tag_or_directive_method_name(tag_name, type = T.unsafe(nil)); end
  end
end

# source://yard//lib/yard/tags/directives.rb#258
class YARD::Tags::MacroDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#259
  def call; end

  private

  # source://yard//lib/yard/tags/directives.rb#288
  def anonymous?; end

  # source://yard//lib/yard/tags/directives.rb#277
  def attach?; end

  # source://yard//lib/yard/tags/directives.rb#283
  def class_method?; end

  # source://yard//lib/yard/tags/directives.rb#292
  def expand(macro_data); end

  # source://yard//lib/yard/tags/directives.rb#308
  def find_or_create; end

  # source://yard//lib/yard/tags/directives.rb#272
  def new?; end

  # source://yard//lib/yard/tags/directives.rb#332
  def warn; end
end

# source://yard//lib/yard/tags/directives.rb#368
class YARD::Tags::MethodDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#373
  def after_parse; end

  # source://yard//lib/yard/tags/directives.rb#371
  def call; end

  protected

  # source://yard//lib/yard/tags/directives.rb#413
  def create_object; end

  # source://yard//lib/yard/tags/directives.rb#381
  def method_name; end

  # source://yard//lib/yard/tags/directives.rb#390
  def method_signature; end

  # source://yard//lib/yard/tags/directives.rb#394
  def sanitized_tag_signature; end

  # source://yard//lib/yard/tags/directives.rb#403
  def use_indented_text; end
end

# source://yard//lib/yard/tags/directives.rb#369
YARD::Tags::MethodDirective::SCOPE_MATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/tags/option_tag.rb#4
class YARD::Tags::OptionTag < ::YARD::Tags::Tag
  # source://yard//lib/yard/tags/option_tag.rb#7
  def initialize(tag_name, name, pair); end

  # source://yard//lib/yard/tags/option_tag.rb#5
  def pair; end

  # source://yard//lib/yard/tags/option_tag.rb#5
  def pair=(_arg0); end
end

# source://yard//lib/yard/tags/overload_tag.rb#4
class YARD::Tags::OverloadTag < ::YARD::Tags::Tag
  # source://yard//lib/yard/tags/overload_tag.rb#7
  def initialize(tag_name, text); end

  # source://yard//lib/yard/tags/overload_tag.rb#5
  def docstring; end

  # source://yard//lib/yard/tags/overload_tag.rb#15
  def has_tag?(name); end

  # source://yard//lib/yard/tags/overload_tag.rb#36
  def is_a?(other); end

  # source://yard//lib/yard/tags/overload_tag.rb#36
  def kind_of?(other); end

  # source://yard//lib/yard/tags/overload_tag.rb#28
  def method_missing(*args, &block); end

  # source://yard//lib/yard/tags/overload_tag.rb#23
  def name(prefix = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/overload_tag.rb#17
  def object=(value); end

  # source://yard//lib/yard/tags/overload_tag.rb#5
  def parameters; end

  # source://yard//lib/yard/tags/overload_tag.rb#5
  def signature; end

  # source://yard//lib/yard/tags/overload_tag.rb#13
  def tag(name); end

  # source://yard//lib/yard/tags/overload_tag.rb#14
  def tags(name = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/overload_tag.rb#32
  def type; end

  private

  # source://yard//lib/yard/tags/overload_tag.rb#53
  def parse_signature; end

  # source://yard//lib/yard/tags/overload_tag.rb#43
  def parse_tag(text); end
end

# source://yard//lib/yard/tags/directives.rb#545
class YARD::Tags::ParseDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#546
  def call; end
end

# source://yard//lib/yard/tags/ref_tag.rb#4
module YARD::Tags::RefTag
  # source://yard//lib/yard/tags/ref_tag.rb#5
  def owner; end

  # source://yard//lib/yard/tags/ref_tag.rb#5
  def owner=(_arg0); end
end

# source://yard//lib/yard/tags/ref_tag_list.rb#4
class YARD::Tags::RefTagList
  # source://yard//lib/yard/tags/ref_tag_list.rb#7
  def initialize(tag_name, owner, name = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def name; end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def name=(_arg0); end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def owner; end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def owner=(_arg0); end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def tag_name; end

  # source://yard//lib/yard/tags/ref_tag_list.rb#5
  def tag_name=(_arg0); end

  # source://yard//lib/yard/tags/ref_tag_list.rb#13
  def tags; end
end

# source://yard//lib/yard/tags/directives.rb#579
class YARD::Tags::ScopeDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#580
  def call; end
end

# source://yard//lib/yard/tags/tag.rb#13
class YARD::Tags::Tag
  # source://yard//lib/yard/tags/tag.rb#44
  def initialize(tag_name, text, types = T.unsafe(nil), name = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/tag.rb#65
  def explain_types; end

  # source://yard//lib/yard/tags/tag.rb#26
  def name; end

  # source://yard//lib/yard/tags/tag.rb#26
  def name=(_arg0); end

  # source://yard//lib/yard/tags/tag.rb#29
  def object; end

  # source://yard//lib/yard/tags/tag.rb#29
  def object=(_arg0); end

  # source://yard//lib/yard/tags/tag.rb#15
  def tag_name; end

  # source://yard//lib/yard/tags/tag.rb#15
  def tag_name=(_arg0); end

  # source://yard//lib/yard/tags/tag.rb#19
  def text; end

  # source://yard//lib/yard/tags/tag.rb#19
  def text=(_arg0); end

  # source://yard//lib/yard/tags/tag.rb#56
  def type; end

  # source://yard//lib/yard/tags/tag.rb#23
  def types; end

  # source://yard//lib/yard/tags/tag.rb#23
  def types=(_arg0); end
end

# source://yard//lib/yard/tags/tag_format_error.rb#4
class YARD::Tags::TagFormatError < ::RuntimeError; end

# source://yard//lib/yard/tags/types_explainer.rb#6
class YARD::Tags::TypesExplainer
  class << self
    # source://yard//lib/yard/tags/types_explainer.rb#9
    def explain(*types); end

    # source://yard//lib/yard/tags/types_explainer.rb#17
    def explain!(*types); end
  end
end

# source://yard//lib/yard/tags/types_explainer.rb#58
class YARD::Tags::TypesExplainer::CollectionType < ::YARD::Tags::TypesExplainer::Type
  # source://yard//lib/yard/tags/types_explainer.rb#61
  def initialize(name, types); end

  # source://yard//lib/yard/tags/types_explainer.rb#66
  def to_s(_singular = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/types_explainer.rb#59
  def types; end

  # source://yard//lib/yard/tags/types_explainer.rb#59
  def types=(_arg0); end
end

# source://yard//lib/yard/tags/types_explainer.rb#72
class YARD::Tags::TypesExplainer::FixedCollectionType < ::YARD::Tags::TypesExplainer::CollectionType
  # source://yard//lib/yard/tags/types_explainer.rb#73
  def to_s(_singular = T.unsafe(nil)); end
end

# source://yard//lib/yard/tags/types_explainer.rb#79
class YARD::Tags::TypesExplainer::HashCollectionType < ::YARD::Tags::TypesExplainer::Type
  # source://yard//lib/yard/tags/types_explainer.rb#82
  def initialize(name, key_types, value_types); end

  # source://yard//lib/yard/tags/types_explainer.rb#80
  def key_types; end

  # source://yard//lib/yard/tags/types_explainer.rb#80
  def key_types=(_arg0); end

  # source://yard//lib/yard/tags/types_explainer.rb#88
  def to_s(_singular = T.unsafe(nil)); end

  # source://yard//lib/yard/tags/types_explainer.rb#80
  def value_types; end

  # source://yard//lib/yard/tags/types_explainer.rb#80
  def value_types=(_arg0); end
end

# source://yard//lib/yard/tags/types_explainer.rb#96
class YARD::Tags::TypesExplainer::Parser
  include ::YARD::CodeObjects

  # source://yard//lib/yard/tags/types_explainer.rb#117
  def initialize(string); end

  # source://yard//lib/yard/tags/types_explainer.rb#121
  def parse; end

  class << self
    # source://yard//lib/yard/tags/types_explainer.rb#113
    def parse(string); end
  end
end

# source://yard//lib/yard/tags/types_explainer.rb#99
YARD::Tags::TypesExplainer::Parser::TOKENS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/tags/types_explainer.rb#26
class YARD::Tags::TypesExplainer::Type
  # source://yard//lib/yard/tags/types_explainer.rb#29
  def initialize(name); end

  # source://yard//lib/yard/tags/types_explainer.rb#27
  def name; end

  # source://yard//lib/yard/tags/types_explainer.rb#27
  def name=(_arg0); end

  # source://yard//lib/yard/tags/types_explainer.rb#33
  def to_s(singular = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/tags/types_explainer.rb#45
  def list_join(list); end
end

# source://yard//lib/yard/tags/directives.rb#611
class YARD::Tags::VisibilityDirective < ::YARD::Tags::Directive
  # source://yard//lib/yard/tags/directives.rb#612
  def call; end
end

# source://yard//lib/yard/autoload.rb#271
module YARD::Templates; end

# source://yard//lib/yard/templates/engine.rb#12
module YARD::Templates::Engine
  class << self
    # source://yard//lib/yard/templates/engine.rb#101
    def generate(objects, options = T.unsafe(nil)); end

    # source://yard//lib/yard/templates/engine.rb#21
    def register_template_path(path); end

    # source://yard//lib/yard/templates/engine.rb#82
    def render(options = T.unsafe(nil)); end

    # source://yard//lib/yard/templates/engine.rb#35
    def template(*path); end

    # source://yard//lib/yard/templates/engine.rb#53
    def template!(path, full_paths = T.unsafe(nil)); end

    # source://yard//lib/yard/templates/engine.rb#15
    def template_paths; end

    # source://yard//lib/yard/templates/engine.rb#15
    def template_paths=(_arg0); end

    # source://yard//lib/yard/templates/engine.rb#115
    def with_serializer(object, serializer); end

    private

    # source://yard//lib/yard/templates/engine.rb#161
    def find_template_paths(from_template, path); end

    # source://yard//lib/yard/templates/engine.rb#141
    def set_default_options(options = T.unsafe(nil)); end

    # source://yard//lib/yard/templates/engine.rb#176
    def template_module_name(path); end
  end
end

# source://yard//lib/yard/templates/erb_cache.rb#5
module YARD::Templates::ErbCache
  class << self
    # source://yard//lib/yard/templates/erb_cache.rb#17
    def clear!; end

    # source://yard//lib/yard/templates/erb_cache.rb#6
    def method_for(filename); end
  end
end

# source://yard//lib/yard/autoload.rb#272
module YARD::Templates::Helpers; end

# source://yard//lib/yard/templates/helpers/base_helper.rb#4
module YARD::Templates::Helpers::BaseHelper
  # source://yard//lib/yard/templates/helpers/base_helper.rb#196
  def format_object_title(object); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#182
  def format_object_type(object); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#209
  def format_source(value); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#168
  def format_types(list, brackets = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#20
  def globals; end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#38
  def h(text); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#152
  def link_file(filename, title = T.unsafe(nil), anchor = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#113
  def link_include_file(file); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#105
  def link_include_object(obj); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#122
  def link_object(obj, title = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#141
  def link_url(url, title = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#55
  def linkify(*args); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#5
  def object; end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#5
  def object=(_arg0); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#11
  def owner; end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#30
  def run_verifier(list); end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#5
  def serializer; end

  # source://yard//lib/yard/templates/helpers/base_helper.rb#5
  def serializer=(_arg0); end
end

# source://yard//lib/yard/templates/helpers/filter_helper.rb#5
module YARD::Templates::Helpers::FilterHelper
  # source://yard//lib/yard/templates/helpers/filter_helper.rb#17
  def is_class?(object); end

  # source://yard//lib/yard/templates/helpers/filter_helper.rb#7
  def is_method?(object); end

  # source://yard//lib/yard/templates/helpers/filter_helper.rb#22
  def is_module?(object); end

  # source://yard//lib/yard/templates/helpers/filter_helper.rb#12
  def is_namespace?(object); end
end

# source://yard//lib/yard/templates/helpers/html_helper.rb#7
module YARD::Templates::Helpers::HtmlHelper
  include ::YARD::Templates::Helpers::MarkupHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  include ::YARD::Templates::Helpers::HtmlSyntaxHighlightHelper

  # source://yard//lib/yard/templates/helpers/html_helper.rb#347
  def anchor_for(object); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#574
  def charset; end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#458
  def format_object_name_list(objects); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#476
  def format_types(typelist, brackets = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#23
  def h(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#109
  def html_markup_asciidoc(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#168
  def html_markup_html(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#78
  def html_markup_markdown(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#160
  def html_markup_none(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#102
  def html_markup_org(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#146
  def html_markup_pre(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#136
  def html_markup_rdoc(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#179
  def html_markup_ruby(source); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#154
  def html_markup_text(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#118
  def html_markup_textile(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#128
  def html_markup_textile_strict(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#199
  def html_syntax_highlight(source, type = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#210
  def html_syntax_highlight_plain(source); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#57
  def htmlify(text, markup = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#184
  def htmlify_line(*args); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#296
  def insert_include(text, markup = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#270
  def link_file(filename, title = T.unsafe(nil), anchor = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#282
  def link_include_file(file); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#291
  def link_include_object(obj); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#301
  def link_object(obj, title = T.unsafe(nil), anchor = T.unsafe(nil), relative = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#332
  def link_url(url, title = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#400
  def mtime(_file); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#368
  def mtime_url(obj, anchor = T.unsafe(nil), relative = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#225
  def resolve_links(text); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#529
  def signature(meth, link = T.unsafe(nil), show_extras = T.unsafe(nil), full_attr_name = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#492
  def signature_types(meth, link = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#368
  def url_for(obj, anchor = T.unsafe(nil), relative = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#407
  def url_for_file(filename, anchor = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#434
  def url_for_frameset; end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#450
  def url_for_index; end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#426
  def url_for_list(type); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#442
  def url_for_main; end

  private

  # source://yard//lib/yard/templates/helpers/html_helper.rb#609
  def convert_method_to_overload(meth); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#664
  def detect_lang_in_codeblock_attributes(pre_html_attrs, code_html_attrs); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#640
  def parse_codeblocks(html); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#624
  def parse_lang_for_codeblock(source); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#603
  def tag_attrs(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/html_helper.rb#31
  def urlencode(text); end

  class << self
    # source://yard//lib/yard/templates/helpers/html_helper.rb#31
    def urlencode(text); end
  end
end

# source://yard//lib/yard/templates/helpers/html_helper.rb#15
YARD::Templates::Helpers::HtmlHelper::ASCIIDOC_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/templates/helpers/html_helper.rb#12
YARD::Templates::Helpers::HtmlHelper::URLMATCH = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/templates/helpers/html_syntax_highlight_helper.rb#6
module YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
  include ::YARD::Templates::Helpers::ModuleHelper

  # source://yard//lib/yard/templates/helpers/html_syntax_highlight_helper.rb#12
  def html_syntax_highlight_ruby(source); end

  private

  # source://yard//lib/yard/templates/helpers/html_syntax_highlight_helper.rb#63
  def clean_token_object(token_obj); end

  # source://yard//lib/yard/templates/helpers/html_syntax_highlight_helper.rb#45
  def html_syntax_highlight_ruby_legacy(source); end

  # source://yard//lib/yard/templates/helpers/html_syntax_highlight_helper.rb#22
  def html_syntax_highlight_ruby_ripper(source); end
end

# source://yard//lib/yard/autoload.rb#273
module YARD::Templates::Helpers::Markup; end

# source://yard//lib/yard/templates/helpers/markup/rdoc_markdown.rb#13
class YARD::Templates::Helpers::Markup::RDocMarkdown < ::YARD::Templates::Helpers::Markup::RDocMarkup
  # source://yard//lib/yard/templates/helpers/markup/rdoc_markdown.rb#14
  def initialize(text); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markdown.rb#18
  def fix_typewriter(html); end
end

# source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#12
class YARD::Templates::Helpers::Markup::RDocMarkup
  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#41
  def initialize(text); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#35
  def from_path; end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#35
  def from_path=(_arg0); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#50
  def to_html; end

  private

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#87
  def fix_dash_dash(text); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#66
  def fix_typewriter(text); end
end

# source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#12
YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP = RDoc::Markup

# source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#13
class YARD::Templates::Helpers::Markup::RDocMarkupToHtml < ::RDoc::Markup::ToHtml
  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#16
  def initialize; end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#100
  def accept_paragraph(*args); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#93
  def from_path; end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#93
  def from_path=(_arg0); end

  # source://yard//lib/yard/templates/helpers/markup/rdoc_markup.rb#96
  def handle_special_HYPERLINK(special); end
end

# source://yard//lib/yard/templates/helpers/markup_helper.rb#7
module YARD::Templates::Helpers::MarkupHelper
  # source://yard//lib/yard/templates/helpers/markup_helper.rb#87
  def load_markup_provider(type = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/markup_helper.rb#158
  def markup_class(type = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/markup_helper.rb#149
  def markup_file_contents(contents); end

  # source://yard//lib/yard/templates/helpers/markup_helper.rb#133
  def markup_for_file(contents, filename); end

  # source://yard//lib/yard/templates/helpers/markup_helper.rb#168
  def markup_provider(type = T.unsafe(nil)); end

  class << self
    # source://yard//lib/yard/templates/helpers/markup_helper.rb#11
    def clear_markup_cache; end

    # source://yard//lib/yard/templates/helpers/markup_helper.rb#18
    def markup_cache; end

    # source://yard//lib/yard/templates/helpers/markup_helper.rb#18
    def markup_cache=(_arg0); end
  end
end

# source://yard//lib/yard/templates/helpers/markup_helper.rb#61
YARD::Templates::Helpers::MarkupHelper::MARKUP_EXTENSIONS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/templates/helpers/markup_helper.rb#74
YARD::Templates::Helpers::MarkupHelper::MARKUP_FILE_SHEBANG = T.let(T.unsafe(nil), Regexp)

# source://yard//lib/yard/templates/helpers/markup_helper.rb#24
YARD::Templates::Helpers::MarkupHelper::MARKUP_PROVIDERS = T.let(T.unsafe(nil), Hash)

# source://yard//lib/yard/templates/helpers/method_helper.rb#5
module YARD::Templates::Helpers::MethodHelper
  # source://yard//lib/yard/templates/helpers/method_helper.rb#7
  def format_args(object); end

  # source://yard//lib/yard/templates/helpers/method_helper.rb#35
  def format_block(object); end

  # source://yard//lib/yard/templates/helpers/method_helper.rb#57
  def format_code(object, _show_lines = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/method_helper.rb#68
  def format_constant(value); end

  # source://yard//lib/yard/templates/helpers/method_helper.rb#50
  def format_lines(object); end

  # source://yard//lib/yard/templates/helpers/method_helper.rb#28
  def format_return_types(object); end
end

# source://yard//lib/yard/templates/helpers/module_helper.rb#6
module YARD::Templates::Helpers::ModuleHelper
  # source://yard//lib/yard/templates/helpers/module_helper.rb#11
  def prune_method_listing(list, hide_attributes = T.unsafe(nil)); end
end

# source://yard//lib/yard/templates/helpers/text_helper.rb#6
module YARD::Templates::Helpers::TextHelper
  # source://yard//lib/yard/templates/helpers/text_helper.rb#39
  def align_right(text, spacer = T.unsafe(nil), col = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#8
  def h(text); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#45
  def hr(col = T.unsafe(nil), sep = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#29
  def indent(text, len = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#50
  def signature(meth); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#34
  def title_align_right(text, col = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/helpers/text_helper.rb#24
  def wrap(text, col = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/templates/helpers/text_helper.rb#98
  def resolve_links(text); end
end

# source://yard//lib/yard/templates/helpers/uml_helper.rb#5
module YARD::Templates::Helpers::UMLHelper
  # source://yard//lib/yard/templates/helpers/uml_helper.rb#20
  def format_path(object); end

  # source://yard//lib/yard/templates/helpers/uml_helper.rb#27
  def h(text); end

  # source://yard//lib/yard/templates/helpers/uml_helper.rb#34
  def tidy(data); end

  # source://yard//lib/yard/templates/helpers/uml_helper.rb#9
  def uml_visibility(object); end
end

# source://yard//lib/yard/templates/section.rb#7
class YARD::Templates::Section < ::Array
  # source://yard//lib/yard/templates/section.rb#10
  def initialize(name, *args); end

  # source://yard//lib/yard/templates/section.rb#45
  def <<(*args); end

  # source://yard//lib/yard/templates/section.rb#34
  def ==(other); end

  # source://yard//lib/yard/templates/section.rb#21
  def [](*args); end

  # source://yard//lib/yard/templates/section.rb#74
  def any(item); end

  # source://yard//lib/yard/templates/section.rb#15
  def dup; end

  # source://yard//lib/yard/templates/section.rb#30
  def eql?(other); end

  # source://yard//lib/yard/templates/section.rb#54
  def inspect; end

  # source://yard//lib/yard/templates/section.rb#8
  def name; end

  # source://yard//lib/yard/templates/section.rb#8
  def name=(_arg0); end

  # source://yard//lib/yard/templates/section.rb#60
  def place(*args); end

  # source://yard//lib/yard/templates/section.rb#45
  def push(*args); end

  # source://yard//lib/yard/templates/section.rb#64
  def to_a; end

  # source://yard//lib/yard/templates/section.rb#50
  def unshift(*args); end

  private

  # source://yard//lib/yard/templates/section.rb#84
  def parse_sections(args); end
end

# source://yard//lib/yard/templates/template.rb#6
module YARD::Templates::Template
  include ::YARD::Templates::ErbCache
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::MethodHelper

  mixes_in_class_methods ::YARD::Templates::Template::ClassMethods

  # source://yard//lib/yard/templates/template.rb#186
  def initialize(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/template.rb#204
  def T(*path); end

  # source://yard//lib/yard/templates/template.rb#7
  def class; end

  # source://yard//lib/yard/templates/template.rb#7
  def class=(_arg0); end

  # source://yard//lib/yard/templates/template.rb#285
  def erb(section, &block); end

  # source://yard//lib/yard/templates/template.rb#312
  def file(basename, allow_inherited = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/template.rb#239
  def init; end

  # source://yard//lib/yard/templates/template.rb#342
  def inspect; end

  # source://yard//lib/yard/templates/template.rb#8
  def options; end

  # source://yard//lib/yard/templates/template.rb#337
  def options=(value); end

  # source://yard//lib/yard/templates/template.rb#252
  def run(opts = T.unsafe(nil), sects = T.unsafe(nil), start_at = T.unsafe(nil), break_first = T.unsafe(nil), &block); end

  # source://yard//lib/yard/templates/template.rb#7
  def section; end

  # source://yard//lib/yard/templates/template.rb#7
  def section=(_arg0); end

  # source://yard//lib/yard/templates/template.rb#226
  def sections(*args); end

  # source://yard//lib/yard/templates/template.rb#330
  def superb(sect = T.unsafe(nil), &block); end

  # source://yard//lib/yard/templates/template.rb#278
  def yieldall(opts = T.unsafe(nil), &block); end

  protected

  # source://yard//lib/yard/templates/template.rb#348
  def erb_file_for(section); end

  # source://yard//lib/yard/templates/template.rb#352
  def erb_with(content, filename = T.unsafe(nil)); end

  private

  # source://yard//lib/yard/templates/template.rb#399
  def add_options(opts = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/template.rb#378
  def cache(section); end

  # source://yard//lib/yard/templates/template.rb#388
  def cache_filename(section); end

  # source://yard//lib/yard/templates/template.rb#364
  def render_section(section, &block); end

  # source://yard//lib/yard/templates/template.rb#393
  def set_ivars; end

  # source://yard//lib/yard/templates/template.rb#412
  def with_section; end

  class << self
    # source://yard//lib/yard/templates/template.rb#25
    def extra_includes; end

    # source://yard//lib/yard/templates/template.rb#25
    def extra_includes=(_arg0); end

    # source://yard//lib/yard/templates/template.rb#38
    def include_extra(template, options); end

    # source://yard//lib/yard/templates/template.rb#29
    def included(klass); end
  end
end

# source://yard//lib/yard/templates/template.rb#59
module YARD::Templates::Template::ClassMethods
  # source://yard//lib/yard/templates/template.rb#81
  def initialize(path, full_paths); end

  # source://yard//lib/yard/templates/template.rb#149
  def S(*args); end

  # source://yard//lib/yard/templates/template.rb#142
  def T(*path); end

  # source://yard//lib/yard/templates/template.rb#98
  def find_file(basename); end

  # source://yard//lib/yard/templates/template.rb#109
  def find_nth_file(basename, index = T.unsafe(nil)); end

  # source://yard//lib/yard/templates/template.rb#60
  def full_path; end

  # source://yard//lib/yard/templates/template.rb#60
  def full_path=(_arg0); end

  # source://yard//lib/yard/templates/template.rb#65
  def full_paths; end

  # source://yard//lib/yard/templates/template.rb#122
  def is_a?(klass); end

  # source://yard//lib/yard/templates/template.rb#128
  def new(*args); end

  # source://yard//lib/yard/templates/template.rb#60
  def path; end

  # source://yard//lib/yard/templates/template.rb#60
  def path=(_arg0); end

  # source://yard//lib/yard/templates/template.rb#77
  def reset_full_paths; end

  # source://yard//lib/yard/templates/template.rb#135
  def run(*args); end

  private

  # source://yard//lib/yard/templates/template.rb#170
  def include_inherited(full_paths); end

  # source://yard//lib/yard/templates/template.rb#157
  def include_parent; end

  # source://yard//lib/yard/templates/template.rb#176
  def load_setup_rb; end
end

# source://yard//lib/yard/templates/template_options.rb#11
class YARD::Templates::TemplateOptions < ::YARD::Options
  # source://yard//lib/yard/options.rb#82
  def __globals; end

  # source://yard//lib/yard/options.rb#82
  def default_return; end

  # source://yard//lib/yard/options.rb#82
  def default_return=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def embed_mixins; end

  # source://yard//lib/yard/options.rb#82
  def embed_mixins=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#78
  def embed_mixins_match?(mixin); end

  # source://yard//lib/yard/options.rb#82
  def format; end

  # source://yard//lib/yard/options.rb#82
  def format=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def globals; end

  # source://yard//lib/yard/options.rb#82
  def globals=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def hide_void_return; end

  # source://yard//lib/yard/options.rb#82
  def hide_void_return=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def highlight; end

  # source://yard//lib/yard/options.rb#82
  def highlight=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#64
  def index; end

  # source://yard//lib/yard/templates/template_options.rb#64
  def index=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def markup; end

  # source://yard//lib/yard/options.rb#82
  def markup=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#30
  def markup_provider; end

  # source://yard//lib/yard/templates/template_options.rb#30
  def markup_provider=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#57
  def no_highlight; end

  # source://yard//lib/yard/templates/template_options.rb#58
  def no_highlight=(value); end

  # source://yard//lib/yard/templates/template_options.rb#38
  def object; end

  # source://yard//lib/yard/templates/template_options.rb#38
  def object=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#41
  def owner; end

  # source://yard//lib/yard/templates/template_options.rb#41
  def owner=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#61
  def page_title; end

  # source://yard//lib/yard/templates/template_options.rb#61
  def page_title=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def serialize; end

  # source://yard//lib/yard/options.rb#82
  def serialize=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#51
  def serializer; end

  # source://yard//lib/yard/templates/template_options.rb#51
  def serializer=(_arg0); end

  # source://yard//lib/yard/options.rb#82
  def template; end

  # source://yard//lib/yard/options.rb#82
  def template=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#44
  def type; end

  # source://yard//lib/yard/templates/template_options.rb#44
  def type=(_arg0); end

  # source://yard//lib/yard/templates/template_options.rb#89
  def verifier; end

  # source://yard//lib/yard/templates/template_options.rb#89
  def verifier=(_arg0); end
end

# source://yard//lib/yard/version.rb#5
YARD::VERSION = T.let(T.unsafe(nil), String)

# source://yard//lib/yard/verifier.rb#34
class YARD::Verifier
  # source://yard//lib/yard/verifier.rb#48
  def initialize(*expressions); end

  # source://yard//lib/yard/verifier.rb#58
  def add_expressions(*expressions); end

  # source://yard//lib/yard/verifier.rb#76
  def call(object); end

  # source://yard//lib/yard/verifier.rb#37
  def expressions; end

  # source://yard//lib/yard/verifier.rb#39
  def expressions=(value); end

  # source://yard//lib/yard/verifier.rb#63
  def method_missing(sym, *args, &block); end

  # source://yard//lib/yard/verifier.rb#91
  def run(list); end

  protected

  # source://yard//lib/yard/verifier.rb#98
  def o; end

  # source://yard//lib/yard/verifier.rb#98
  def object; end

  private

  # source://yard//lib/yard/verifier.rb#130
  def create_method_from_expressions; end

  # source://yard//lib/yard/verifier.rb#112
  def modify_nilclass; end

  # source://yard//lib/yard/verifier.rb#145
  def parse_expression(expr); end

  # source://yard//lib/yard/verifier.rb#120
  def unmodify_nilclass; end
end

# source://yard//lib/yard/verifier.rb#104
YARD::Verifier::NILCLASS_METHODS = T.let(T.unsafe(nil), Array)
