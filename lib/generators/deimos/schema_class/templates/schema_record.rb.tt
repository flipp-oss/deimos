  # Autogenerated Schema for Record at <%= @current_schema.namespace %>.<%= @current_schema.name %>
  class <%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %> < Deimos::SchemaClass::Record
  <%- if Deimos.config.schema.output_sorbet -%>
    extend T::Sig
  <%- end -%>
<% if @sub_schema_templates.present? -%>

    ### Secondary Schema Classes ###
  <%- @sub_schema_templates.each do |schema_template| -%>
  <%=- schema_template.gsub(/^/, "  ") %>

  <%- end -%>
<% end -%>

  <%- if @field_assignments.select{ |h| h[:is_schema_class] }.any? -%>
    ### Attribute Readers ###
  <%- @field_assignments.select{ |h| h[:is_schema_class] }.each do |method_definition| -%>
    <%- if Deimos.config.schema.output_sorbet -%>
    sig { returns(<%= method_definition[:sorbet_return_type] %>) }
    <%- end -%>
    # @return [<%= method_definition[:deimos_type] %>]
    attr_reader :<%= method_definition[:field].name %>
  <%- end -%>

<% end -%>
<%- if @field_assignments.select{ |h| !h[:is_schema_class] }.any? -%>
    ### Attribute Accessors ###
  <%- @field_assignments.select{ |h| !h[:is_schema_class] }.each do |method_definition| -%>
    <%- if Deimos.config.schema.output_sorbet -%>
    sig { returns(<%= method_definition[:sorbet_return_type] %>) }
    <%- end -%>
    # @return [<%= method_definition[:deimos_type] %>]
    attr_accessor :<%= method_definition[:field].name %>
  <%- end -%>

<% end -%>
<%- if @field_assignments.select{ |h| h[:is_schema_class] }.any? -%>
    ### Attribute Writers ###
  <%- @field_assignments.select{ |h| h[:is_schema_class] }.each do |method_definition| -%>
    <%- if Deimos.config.schema.output_sorbet -%>
    sig { params(<%= method_definition[:method_argument] %>: <%= method_definition[:sorbet_type] %>).void }
    <%- end -%>
    # @param <%= method_definition[:method_argument] %> [<%= method_definition[:deimos_type] %>]
    def <%= method_definition[:field].name %>=(<%= method_definition[:method_argument] %>)
    <%- if method_definition[:field_type] == :array -%>
      <%- if Deimos.config.schema.output_sorbet && !method_definition[:sorbet_type].starts_with?('T.nilable') -%>
        @<%= method_definition[:field].name %> = values.map do |value|
          <%= method_definition[:field_initialization] %>
        end
      <%- else -%>
        @<%= method_definition[:field].name %> = values&.map do |value|
          <%= method_definition[:field_initialization] %>
        end
      <%- end %>
    <%- elsif method_definition[:field_type] == :map -%>
      <%- if Deimos.config.schema.output_sorbet && !method_definition[:sorbet_type].starts_with?('T.nilable') -%>
        @<%= method_definition[:field].name %> = values.transform_values do |value|
          <%= method_definition[:field_initialization] %>
        end
      <%- else -%>
        @<%= method_definition[:field].name %> = values&.transform_values do |value|
          <%= method_definition[:field_initialization] %>
        end
      <%- end -%>
    <%- else -%>
      @<%= method_definition[:field].name %> = <%= method_definition[:field_initialization] %>
    <%- end -%>
    end

  <%- end -%>
<% end -%>
    # @override
    <%= @initialization_definition %>
      super
<%- @fields.each do |field| -%>
      self.<%= field.name %> = <%= field.name %>
<% end -%>
    end

    # @override
    def schema
      '<%= @current_schema.name %>'
    end

    # @override
    def namespace
      '<%= @current_schema.namespace %>'
    end
<%- if @tombstone_assignment %>
<%- if Deimos.config.schema.output_sorbet -%>
    sig {params(key: <%= @tombstone_type %>).void }
<%- end -%>
    def self.tombstone(key)
      record = self.allocate
<%- if @tombstone_assignment.present? -%>
      <%= @tombstone_assignment %>
<%- end -%>
      record
    end
<%- end %>
    # @override
    def as_json(_opts={})
      {
<%- @fields.each do |field| -%>
        <%= field_as_json(field) %>
<% end -%>
      }
    end

    <%- if Deimos.config.schema.output_sorbet -%>
    sig { params(value: T.any(Hash, T.nilable(<%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>))).
      returns(T.nilable(<%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>))}
    <%- end -%>
    def self.initialize_from_value(value)
      return nil if value.nil?

      value.is_a?(self) ? value : self.new(**value.symbolize_keys)
    end
  end
