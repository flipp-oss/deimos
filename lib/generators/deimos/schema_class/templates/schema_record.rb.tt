  # Autogenerated Schema for Record at <%= @current_schema.namespace %>.<%= @current_schema.name %>
  class <%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %> < Deimos::SchemaClass::Record
<% if @sub_schema_templates.present? -%>

    ### Secondary Schema Classes ###
  <%- @sub_schema_templates.each do |schema_template| -%>
  <%=- schema_template.gsub(/^/, "  ") %>

  <%- end -%>
<% end -%>

  <%- if @field_assignments.select{ |h| h[:is_schema_class] }.any? -%>
    ### Attribute Readers ###
  <%- @field_assignments.select{ |h| h[:is_schema_class] }.each do |method_definition| -%>
    # @return [<%= method_definition[:deimos_type] %>]
    attr_reader :<%= method_definition[:field].name %>
  <%- end -%>

<% end -%>
<%- if @field_assignments.select{ |h| !h[:is_schema_class] }.any? -%>
    ### Attribute Accessors ###
  <%- @field_assignments.select{ |h| !h[:is_schema_class] }.each do |method_definition| -%>
    # @return [<%= method_definition[:deimos_type] %>]
    attr_accessor :<%= method_definition[:field].name %>
  <%- end -%>

<% end -%>
<%- if @field_assignments.select{ |h| h[:is_schema_class] }.any? -%>
    ### Attribute Writers ###
  <%- @field_assignments.select{ |h| h[:is_schema_class] }.each do |method_definition| -%>
    # @return [<%= method_definition[:deimos_type] %>]
    def <%= method_definition[:field].name %>=(<%= method_definition[:method_argument] %>)
    <%- if method_definition[:field_type] == :array -%>
      @<%= method_definition[:field].name %> = values&.map do |value|
        <%= method_definition[:field_initialization] %>
      end
    <%- elsif method_definition[:field_type] == :map -%>
      @<%= method_definition[:field].name %> = values&.transform_values do |value|
        <%= method_definition[:field_initialization] %>
      end
    <%- else -%>
      @<%= method_definition[:field].name %> = <%= method_definition[:field_initialization] %>
    <%- end -%>
    end

  <%- end -%>
<% end -%>
<%- if @field_assignments.select{ |h| h[:is_complex_union] }.any? -%>
    <%- @field_assignments.select{ |h| h[:is_complex_union] }.each do |method_definition| -%>
    # Helper method to determine which schema type to use for <%= method_definition[:field].name %>
    # @param value [Hash, nil]
    # @param from_message [Boolean] whether this was initialized from a real Avro message
    # @return [Object, nil]
    def initialize_<%= method_definition[:field].name %>_type(value, from_message: false)
      return nil if value.nil?

      klass = [<%= method_definition[:field].type.schemas.reject { |s| s.type_sym == :null }.select { |s| s.type_sym == :record }.map { |s| Deimos::SchemaBackends::AvroBase.schema_classname(s) }.join(', ') %>].find do |candidate|
        fields = candidate.new.as_json.keys
        (value.keys - fields).empty?
      end

      klass.initialize_from_value(value, from_message: self._from_message)
    end

    <%- end -%>
<% end -%>
    # @override
    <%= @initialization_definition %>
      @_from_message = _from_message
      super
<%- @fields.each do |field| -%>
      self.<%= field.name %> = <%= field.name %>
<% end -%>
    end

    # @override
    def schema
      '<%= @current_schema.name %>'
    end

    # @override
    def namespace
      '<%= @current_schema.namespace %>'
    end
<%- if @tombstone_assignment %>
    def self.tombstone(key)
      record = self.allocate
<%- if @tombstone_assignment.present? -%>
      <%= @tombstone_assignment %>
<%- end -%>
      record
    end
<%- end %>
    # @override
    def as_json(_opts={})
      {
<%- @fields.each do |field| -%>
        <%= field_as_json(field) %>
<% end -%>
      }
    end
  end
