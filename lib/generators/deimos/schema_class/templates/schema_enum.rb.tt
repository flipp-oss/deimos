  <%- if Deimos.config.schema.output_sorbet -%>
  class <%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>Enum < T::Enum
    enums do
      <%- @current_schema.symbols.each do |sym| -%>
      <%= sym %> = new
      <%- end -%>
    end
  end
  <%- end -%>

  # Autogenerated Schema for Enum at <%= @current_schema.namespace %>.<%= @current_schema.name %>
  class <%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %> < Deimos::SchemaClass::Enum
    <%- if Deimos.config.schema.output_sorbet -%>
    extend T::Sig

    sig { returns(<%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>Enum) }
    <%- end -%>
    # @return ['<%= @current_schema.symbols.join("', '") %>']
    attr_accessor :<%= @current_schema.name.underscore %>

    # @override
    def symbols
      %w(<%= @current_schema.symbols.join(' ') %>)
    end

    <%- if Deimos.config.schema.output_sorbet -%>
    sig { params(value: T.any(String, <%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>)).
      returns(T.nilable(<%= Deimos::SchemaBackends::AvroBase.schema_classname(@current_schema) %>))}
    <%- end -%>
    def self.initialize_from_value(value)
      return nil if value.nil?

      value.is_a?(self) ? value : self.new(value)
    end

  end
