# frozen_string_literal: true

require 'deimos'
require 'karafka'

Deimos.configure do
<%- deimos_configs.each do |group, settings| -%>
  <%= group -%> do
  <%- settings.each do |k, v| -%>
    <%= k.to_s %> <%= v.inspect %>
  <%- end -%>
  end
  <%- end -%>
  <%- deimos_config.db_poller_objects.each do |poller| -%>
  db_poller do
    <%- poller.non_default_settings! -%>
    <%- poller.to_h.each do |k, v| -%>
    <%= k.to_s %> <%= v.inspect %>
    <%- end -%>
  <%- end -%>
  end
end

class KarafkaApp < Karafka::App
  setup do |config|
    <%- setup_configs.each do |k, v| -%>
    config.<%= k %> = <%= v.inspect %>
    <%- end -%>
    config.kafka = {
      <%- default_kafka_configs.compact.each do |k, v| -%>
      "<%= k.to_s %>": <%= v.inspect %>,
      <%- end -%>
    }
    # Recreate consumers with each batch. This will allow Rails code reload to work in the
    # development mode. Otherwise Karafka process would not be aware of code changes
    config.consumer_persistence = !Rails.env.development?
  end

  # Comment out this part if you are not using instrumentation and/or you are not
  # interested in logging events for certain environments. Since instrumentation
  # notifications add extra boilerplate, if you want to achieve max performance,
  # listen to only what you really need for given environment.
  Karafka.monitor.subscribe(Karafka::Instrumentation::LoggerListener.new)
  # Karafka.monitor.subscribe(Karafka::Instrumentation::ProctitleListener.new)

  # This logger prints the producer development info using the Karafka logger.
  # It is similar to the consumer logger listener but producer oriented.
  Karafka.producer.monitor.subscribe(
    WaterDrop::Instrumentation::LoggerListener.new(
      # Log producer operations using the Karafka logger
      Karafka.logger,
      # If you set this to true, logs will contain each message details
      # Please note, that this can be extensive
      log_messages: false
    )
  )

  # You can subscribe to all consumer related errors and record/track then that way
  #
  # Karafka.monitor.subscribe 'error.occurred' do |event|
  #   type = event[:type]
  #   error = event[:error]
  #   details = (error.backtrace || []).join("\n")
  #   ErrorTracker.send_error(error, type, details)
  # end

  # You can subscribe to all producer related errors and record/track then that way
  # Please note, that producer and consumer have their own notifications pipeline so you need to
  # setup error tracking independently for each of them
  #
  # Karafka.producer.monitor.subscribe('error.occurred') do |event|
  #   type = event[:type]
  #   error = event[:error]
  #   details = (error.backtrace || []).join("\n")
  #   ErrorTracker.send_error(error, type, details)
  # end

  routes.draw do
    defaults do
    <%- default_configs.each do |k, v| -%>
      <%= k.to_s %> <%= v.inspect %>
    <%- end -%>
    end

    <%- producer_configs.each do |producer| -%>
    topic "<%= producer[:topic] %>" do
      <%- producer.except(:topic).each do |k, v| -%>
      <%- if k.to_sym == :key_config -%>
      <%= k.to_s %>(<%= v.inspect %>)
      <%- else -%>
      <%= k.to_s %> <%= v.inspect %>
      <%- end -%>
      <%- end -%>
    end
    <%- end -%>

    <%- consumer_configs.each do |consumer| -%>
    topic "<%= consumer[:topic] -%>" do
      <%- if consumer[:kafka].present? -%>
      kafka(
        <%- consumer[:kafka].each do |k, v| -%>
        "<%= k.to_s %>": <%= v.inspect %>,
        <%- end -%>

      )
      <%- end -%>
      <%- consumer.except(:topic, :kafka).each do |k, v| -%>
      <%- if k.to_sym == :key_config -%>
      <%= k.to_s %>(<%= v.inspect %>)
      <%- else -%>
      <%= k.to_s %> <%= v.inspect %>
      <%- end -%>
      <%- end -%>
    end
    <%- end -%>

    # Uncomment this if you use Karafka with ActiveJob
    # You need to define the topic per each queue name you use
    # active_job_topic :default
    #    topic :example do
      # Uncomment this if you want Karafka to manage your topics configuration
      # Managing topics configuration via routing will allow you to ensure config consistency
      # across multiple environments
      #
      # config(partitions: 2, 'cleanup.policy': 'compact')
    # consumer ExampleConsumer
    # end
  end
end

Deimos.setup_karafka

# Karafka now features a Web UI!
# Visit the setup documentation to get started and enhance your experience.
#
# https://karafka.io/docs/Web-UI-Getting-Started

# Karafka::Web.setup do |config|
#   # You may want to set it per ENV. This value was randomly generated.
#   config.ui.sessions.secret = '<%= SecureRandom.hex %>'
# end

# Karafka::Web.enable!

